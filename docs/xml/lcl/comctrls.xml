<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="LCL">
    <!--
    ====================================================================
      ComCtrls
    ====================================================================
    -->
    <module name="ComCtrls">
      <short>Common controls used in Lazarus forms</short>
      <descr>
        <p>
          <file>comctrls.pp</file> contains classes and types like those found in the Delphi <file>comctrls</file> unit.
        </p>
        <p>
          <b>Components on the Common Controls Tab</b>
        </p>
        <ul>
          <li>TTrackbar</li>
          <li>TProgressBar</li>
          <li>TTreeView</li>
          <li>TListView</li>
          <li>TStatusBar</li>
          <li>TToolBar</li>
          <li>TCoolBar</li>
          <li>TUpDown</li>
          <li>TPageControl</li>
          <li>TTabControl</li>
          <li>THeaderControl</li>
        </ul>
      </descr>

      <!-- unresolved type references Visibility: default -->
      <element name="SysUtils"/>
      <element name="Types"/>
      <element name="Classes"/>
      <element name="Math"/>
      <element name="Laz_AVL_Tree"/>
      <element name="LCLStrConsts"/>
      <element name="LResources"/>
      <element name="LCLIntf"/>
      <element name="LCLType"/>
      <element name="LCLProc"/>
      <element name="LMessages"/>
      <element name="WSLCLClasses"/>
      <element name="WSReferences"/>
      <element name="Graphics"/>
      <element name="ImgList"/>
      <element name="ActnList"/>
      <element name="Themes"/>
      <element name="Menus"/>
      <element name="Controls"/>
      <element name="Forms"/>
      <element name="StdCtrls"/>
      <element name="ExtCtrls"/>
      <element name="ToolWin"/>
      <element name="Buttons"/>
      <element name="GraphType"/>
      <element name="LazUTF8"/>
      <element name="LazLoggerBase"/>
      <element name="LazUtilities"/>

      <element name="THitTest">
        <short>Represents permissible results for a hit test</short>
        <descr>
          <p>
            <var>THitTest</var> is an enumerated type with values that represent permissible results for a hit test (position of a mouse click etc relative to objects on a form). Values from THitTest are stored in the THitTests set type.
          </p>
        </descr>
        <seealso>
          <link id="THitTests"/>
        </seealso>
      </element>
      <element name="THitTest.htAbove">
        <short>The action was above the coordinates for the control</short>
      </element>
      <element name="THitTest.htBelow">
        <short>The action was below the coordinates for the control</short>
      </element>
      <element name="THitTest.htNowhere">
        <short>The action was not near the control checking for the event</short>
      </element>
      <element name="THitTest.htOnItem">
        <short>The action was on the control checking for the event</short>
      </element>
      <element name="THitTest.htOnButton">
        <short>The action was on a button in the control</short>
      </element>
      <element name="THitTest.htOnIcon">
        <short/>
      </element>
      <element name="THitTest.htOnIndent">
        <short/>
      </element>
      <element name="THitTest.htOnLabel">
        <short/>
      </element>
      <element name="THitTest.htOnRight">
        <short/>
      </element>
      <element name="THitTest.htOnStateIcon">
        <short/>
      </element>
      <element name="THitTest.htToLeft">
        <short/>
      </element>
      <element name="THitTest.htToRight">
        <short/>
      </element>

      <element name="THitTests">
        <short>
          <var>THitTests</var> - set of <var>THitTest</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanelStyle">
        <short>Represents the style used for a panel on a status bar</short>
        <descr>
          <p>
            <var>TStatusPanelStyle</var> is an enumerated type representing the style used for a panel on a status bar. TStatusPanelStyle is the type used to implement the <var>Style</var> property in <var>TStatusPanel</var>, and used in widgetset classes which initialize or update a status bar panel.
          </p>
        </descr>
        <seealso>
          <link id="TStatusPanel.Style"/>
        </seealso>
      </element>
      <element name="TStatusPanelStyle.psText">
        <short>The panel contains Text</short>
      </element>
      <element name="TStatusPanelStyle.psOwnerDraw">
        <short>
          The panel uses an owner-drawn style (generally implemented in an event handler)
        </short>
      </element>

      <element name="TStatusPanelBevel">
        <short>
          Enumerated type with the bevel styles used on status bar panels
        </short>
        <descr>
          <var>TStatusPanelBevel</var> is an enumerated type with values which represent bevel styles used on status bar panels. TStatusPanelBevel is the type used to implement the <var>Style</var> property in <var>TStatusPanel</var>.
        </descr>
        <seealso>
          <link id="TStatusPanel.Style"/>
        </seealso>
      </element>
      <element name="TStatusPanelBevel.pbNone">
        <short>No bevel is drawn on a panel</short>
      </element>
      <element name="TStatusPanelBevel.pbLowered">
        <short>Drawn using a lowered bevel style</short>
      </element>
      <element name="TStatusPanelBevel.pbRaised">
        <short>Drawn using a raised bevel style</short>
      </element>

      <element name="TPanelPart">
        <short>
          Lists the possible parts that make up a status panel
        </short>
        <descr>
          <p>
            <var>TPanelPart</var> is an enumerated type listing the possible parts that make up  a status panel.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TPanelPart.ppText">
        <short>Panel part contains text with text alignment</short>
      </element>
      <element name="TPanelPart.ppBorder">
        <short>Panel parts contains a bevel style</short>
      </element>
      <element name="TPanelPart.ppWidth">
        <short>Panel part contains a width value</short>
      </element>

      <element name="TPanelParts">
        <short>
          Set type used to store TPanelPart values
        </short>
        <descr>
          <p>
            <var>TPanelParts</var> is a set type used to store <var>TPanelPart</var> values.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TStatusPanelClass">
        <short>Class reference used to create new instances of TStatusPanel</short>
        <descr>
          <p>
            <var>TStatusPanelClass</var> is the type returned by the <var>GetPanelClass</var> method in <var>TStatusBar</var>. The class reference is used in the <var>CreatePanel</var> method in TStatusBar to create a new panel for the control.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.GetPanelClass"/>
          <link id="TStatusBar.CreatePanel"/>
        </seealso>
      </element>

      <element name="TStatusPanel">
        <short>Implements a panel displayed in TStatusBar</short>
        <descr>
          <p>
            <var>TStatusPanel</var> is a TCollectionItem descendant which implements panels used in <var>TStatusBar</var>. Instances of the class are created by and stored in a <var>TStatusPanels</var> collection in a <var>TStatusBar</var> control. Use the properties in the panel to control its appearance, size, and textual content.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.Panels"/>
          <link id="TStatusPanels"/>
        </seealso>
      </element>

      <element name="TStatusPanel.FBiDiMode"/>
      <element name="TStatusPanel.FText"/>
      <element name="TStatusPanel.FWidth"/>
      <element name="TStatusPanel.FAlignment"/>
      <element name="TStatusPanel.FBevel"/>
      <element name="TStatusPanel.FParentBiDiMode"/>
      <element name="TStatusPanel.FStyle"/>

      <element name="TStatusPanel.SetAlignment">
        <short>Gets the value for the Alignment property</short>
        <descr/>
        <seealso>
          <link id="TStatusPanel.Alignment"/>
        </seealso>
      </element>
      <element name="TStatusPanel.SetAlignment.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusPanel.SetBevel">
        <short>Sets the value for the Bevel property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetBevel.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusPanel.SetStyle">
        <short>Sets the value for the Style property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetStyle.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusPanel.SetText">
        <short>Sets the value for the Text property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetText.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusPanel.SetWidth">
        <short>Sets the value for the Width property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.SetWidth.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusPanel.FIntfFlag">
        <short>Field used  by Widgetset classes. Do not use it in the LCL.</short>
        <descr>Field used  by Widgetset classes. Do not use it in the LCL.</descr>
        <seealso/>
      </element>

      <element name="TStatusPanel.GetDisplayName">
        <short>
          Gets the value displayed as the name for the collection item
        </short>
        <descr>
          <var>GetDisplayName</var> is an overridden String function which returns the value displayed as the name of the collection item. The value in the Text property is used as the return value when it is not an empty string (''). Otherwise, the inherited GetDisplayName method is called to get the return value.
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
        </seealso>
      </element>
      <element name="TStatusPanel.GetDisplayName.Result">
        <short>Value displayed as the name for the collection item</short>
      </element>

      <element name="TStatusPanel.PanelChanged">
        <short>
          <var>PanelChanged</var> - method for dealing with a status panel, one or more of whose parts has changed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.PanelChanged.Parts">
        <short/>
      </element>

      <element name="TStatusPanel.SetIndex">
        <short>
          <var>SetIndex</var> saves the old index value, checks that the supplied value is different and then calls inherited method
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
        </seealso>
      </element>
      <element name="TStatusPanel.SetIndex.Value">
        <short/>
      </element>

      <element name="TStatusPanel.Create">
        <short>
          <var>Create</var> - constructor for <var>TStatusPanel</var>: sets default width, alignment and bevel, calls inherited <var>Create</var> and loads into StatusBar
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="TStatusPanel.Create.aCollection">
        <short>Collection which owns the status panel</short>
      </element>

      <element name="TStatusPanel.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TStatusPanel</var>: calls inherited <var>Destroy</var> and removes itself from the StatusBar
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
        </seealso>
      </element>

      <element name="TStatusPanel.Assign">
        <short>
          <var>Assign</var> copies text, width, alignment, bevel and style properties from <var>Source</var> if it is of correct type, otherwise calls inherited <var>Assign</var> (which will probably raise an exception)
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TStatusPanel.Assign.Source">
        <short>Class instance with the values stored in the status panel</short>
      </element>

      <element name="TStatusPanel.StatusBar">
        <short>The <var>StatusBar</var> that contains this <var>StatusPanel</var></short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanel.StatusBar.Result">
        <short>Status bar where the panel is displayed</short>
      </element>

      <element name="TStatusPanel.Alignment">
        <short>
          <var>Alignment</var> - whether left- or right-justified or centered
        </short>
        <descr>Only supported on Windows.</descr>
        <seealso/>
      </element>

      <element name="TStatusPanel.Bevel">
        <short>The type of <var>Bevel</var> for the display</short>
        <descr>Only supported on Windows.</descr>
        <seealso/>
      </element>

      <element name="TStatusPanel.BiDiMode">
        <short>Introduces BiDiMode support not present in the ancestor class</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.ParentBiDiMode">
        <short>Introduces BiDiMode support not present in the ancestor class</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.Style">
        <short>
          <var>Style</var> - whether text or something drawn by the owner
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.Text">
        <short>
          <var>Text</var> - the string for display in the StatusBar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanel.Width">
        <short>The <var>Width</var> of this panel on the StatusBar</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanels">
        <short>
          <var>TStatusPanels</var> - the collection of Status Panels in this StatusBar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusPanels.FStatusBar"/>

      <element name="TStatusPanels.GetItem" link="#rtl.Classes.TCollection.GetItem">
        <short>Gets the value for the indexed Items property</short>
        <descr/>
        <seealso>
          <link id="TStatusPanels.Items"/>
          <link id="#RTL.Classes.TCollection.GetItem">TCollection.GetItem</link>
        </seealso>
      </element>
      <element name="TStatusPanels.GetItem.Result">
        <short>Value for the property</short>
      </element>
      <element name="TStatusPanels.GetItem.Index">
        <short>Ordinal position for the requested collection item</short>
      </element>

      <element name="TStatusPanels.SetItem" link="#rtl.Classes.TCollection.SetItem">
        <short>Sets the value in the indexed Items property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanels.SetItem.Index">
        <short>Ordinal position for the collection item stored in the method</short>
      </element>
      <element name="TStatusPanels.SetItem.Value">
        <short>New value for the collection item</short>
      </element>

      <element name="TStatusPanels.GetOwner">
        <short>
          <var>GetOwner</var> returns a Status Bar overriding the inherited method
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.GetOwner">TPersistent.GetOwner</link>
        </seealso>
      </element>
      <element name="TStatusPanels.GetOwner.Result">
        <short/>
      </element>

      <element name="TStatusPanels.Update" link="#rtl.Classes.TCollection.Update">
        <short>
          Ensures that observers are notified when he specified collection item has been changed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanels.Update.Item">
        <short>Collection item for the notification</short>
      </element>

      <element name="TStatusPanels.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <var>Create</var> - constructor for <var>TStatusPanels</var>: calls inherited <var>Create</var> and attaches itself to StatusBar.
        </descr>
        <seealso>
          <link id="#rtl.Classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <element name="TStatusPanels.Create.TheStatusBar">
        <short>The control where the status panel is displayed</short>
      </element>

      <element name="TStatusPanels.Add" link="#rtl.Classes.TCollection.Add">
        <short>Adds a new TStatusPanel instance to the collection</short>
        <descr>
        </descr>
        <p>
          Calls the inherited Add method and casts the result to <var>TStatusPanel</var> for use as the return value. Calls the <var>UpdateHandleObject</var> method in <var>StatusBar</var> to ensure that an update sequence is started when the handle for the status bar has been allocated.
        </p>
        <seealso>
          <link id="TStatusPanel.StatusBar"/>
          <link id="TStatusBar.UpdateHandleObject"/>
        </seealso>
      </element>
      <element name="TStatusPanels.Add.Result">
        <short>Status panel added in the method</short>
      </element>

      <element name="TStatusPanels.Items" link="#rtl.Classes.TCollection.Items">
        <short>Provides indexed access to the TStatusPanel items in the collection</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusPanels.Items.Index">
        <short>Ordinal position for the collection item</short>
      </element>

      <element name="TStatusPanels.StatusBar">
        <short>
          The <var>StatusBar</var> to which this collection of Status Panels belongs
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TSBCreatePanelClassEvent">
        <short>
          <var>TSBCreatePanelClassEvent</var> - generic event handling procedure for creating a Status Bar panel class
        </short>
      </element>

      <element name="TDrawPanelEvent">
        <short>Specified an event handler used to draw a panel in a status bar</short>
        <descr>
          <p>
            <var>TDrawPanelEvent</var> is the type used to implement the <var>OnDrawPanel</var> property in <var>TStatusBar</var>.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.OnDrawPanel"/>
        </seealso>
      </element>
      <element name="TDrawPanelEvent.StatusBar">
        <short>Status bar for the event notification</short>
      </element>
      <element name="TDrawPanelEvent.Panel">
        <short>Panel drawn by the event handler</short>
      </element>
      <element name="TDrawPanelEvent.Rect">
        <short>Drawing area for the event notification</short>
      </element>

      <element name="TStatusBar">
        <short>
          <var>TStatusBar</var> - a strip along the bottom of a form for displaying information on current status
        </short>
        <descr>
          <p>
            <var>TStatusBar</var> - a strip along the bottom of a form for displaying information on current status. The bar may consist of a single <var>SimplePanel</var> in which case the displayed text is contained in <var>SimpleText</var>.
          </p>
          <p>
            However if <var>SimplePanel</var> is false, then there can be multiple panels or sub-sections of the status bar whose properties are described in <var>Panels</var>.
          </p>
          <p>
            The property <var>SimpleText</var> can be assigned programmatically to display the value of some variable, such as the position of the Splitter in the example.
          </p>
        </descr>
        <example file="extctrls/statusbar.pas"/>
      </element>

      <element name="TStatusBar.FAutoHint"/>
      <element name="TStatusBar.FCanvas"/>
      <element name="TStatusBar.FHandlePanelCount"/>
      <element name="TStatusBar.FHandleObjectNeedsUpdate"/>
      <element name="TStatusBar.FHandleUpdatePanelIndex"/>
      <element name="TStatusBar.FOnCreatePanelClass"/>
      <element name="TStatusBar.FSizeGrip"/>
      <element name="TStatusBar.FUpdateLock"/>
      <element name="TStatusBar.FPanels"/>
      <element name="TStatusBar.FSimpleText"/>
      <element name="TStatusBar.FSimplePanel"/>
      <element name="TStatusBar.FOnDrawPanel"/>
      <element name="TStatusBar.FOnHint"/>
      <element name="TStatusBar.FUseSystemFont"/>

      <element name="TStatusBar.SetPanels">
        <short>Sets the value for the Panels property</short>
        <descr/>
        <seealso>
          <link id="TStatusBar.Panels"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetPanels.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusBar.SetSimpleText">
        <short>Sets the value for the SimpleText property</short>
        <descr>
          Notifies the widgetset class of the value change when a handle has been allocated and SimplePanel is set to True.
        </descr>
        <seealso>
          <link id="TStatusBar.SimpleText"/>
          <link id="TStatusBar.SimplePanel"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetSimpleText.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusBar.SetSimplePanel">
        <short>Sets the value for the SimplePanel property</short>
        <descr/>
        <seealso>
          <link id="TStatusBar.SimplePanel"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetSimplePanel.Value">
        <short>New value for the property</short>
      </element>

      <element name="TStatusBar.SetSizeGrip">
        <short>Sets the value for the SizeGrip property</short>
        <descr/>
        <seealso>
          <link id="TStatusBar.SizeGrip"/>
        </seealso>
      </element>
      <element name="TStatusBar.SetSizeGrip.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TStatusBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TStatusBar.BoundsChanged" link="#LCL.Controls.TControl.BoundsChanged"/>

      <element name="TStatusBar.CreateWnd">
        <short>
          <var>CreateWnd</var> calls inherited method, then fixes handles if needed
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
        </seealso>
      </element>

      <element name="TStatusBar.DestroyWnd">
        <short>
          <var>DestroyWnd</var> calls inherited method and frees handles
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.DestroyWnd">TWinControl.DestroyWnd</link>
        </seealso>
      </element>

      <element name="TStatusBar.Loaded">
        <short>
          <var>Loaded</var> calls inherited method and fixes handles if needed
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TStatusBar.UpdateHandleObject">
        <short>
          <var>UpdateHandleObject</var> - updates all panel parts that have been changed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusBar.UpdateHandleObject.PanelIndex">
        <short/>
      </element>

      <element name="TStatusBar.CalculatePreferredSize">
        <short>
          <var>CalculatePreferredSize</var> calls inherited method then supplies its own values if any are missing
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.CalculatePreferredSize">TControl.CalculatePreferredSize</link>
        </seealso>
      </element>

      <element name="TStatusBar.SetBiDiMode">
        <short>Sets the value in the BiDiMode property</short>
        <descr>
          <p>
            Ensures that all panels in the status bar update their alignment to match the new value for the property. Calls UpdateHandleObject to ensure that an update sequence is started for the control when its handle has been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TStatusBar.Panels"/>
          <link id="TStatusBar.UpdateHandleObject"/>
          <link id="#lcl.controls.TControl.BiDiMode">TControl.BiDiMode</link>
        </seealso>
      </element>
      <element name="TStatusBar.SetBiDiMode.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TStatusBar.CreatePanel">
        <short>
          <var>CreatePanel</var> - returns a created Status Panel
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusBar.CreatePanel.Result">
        <short/>
      </element>

      <element name="TStatusBar.CreatePanels">
        <short>
          <var>CreatePanels</var> - returns a set of created panels
        </short>
      </element>
      <element name="TStatusBar.CreatePanels.Result">
        <short/>
      </element>

      <element name="TStatusBar.GetPanelClass">
        <short>
          <var>GetPanelClass</var> - returns a class of status panel
        </short>
      </element>
      <element name="TStatusBar.GetPanelClass.Result">
        <short/>
      </element>

      <element name="TStatusBar.DoSetApplicationHint">
        <short>
          <var>DoSetApplicationHint</var> - specifies a hint string and returns True if successful
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.DoHint">
        <short>
          Displays the hint for the status bar
        </short>
        <descr>
          <var>DoHint</var> shows the hint text for the control and returns True when successful. Uses the <var>OnHint</var> event handler.
        </descr>
        <seealso/>
      </element>

      <element name="TStatusBar.DrawPanel">
        <short>
          <var>DrawPanel</var> calls the <var>OnDrawPanel</var> event handler if assigned
        </short>
      </element>
      <element name="TStatusBar.DrawPanel.Panel">
        <short/>
      </element>
      <element name="TStatusBar.DrawPanel.Rect">
        <short/>
      </element>

      <element name="TStatusBar.LMDrawItem">
        <short>
          <var>LMDrawItem</var> - LCL message handler for drawing the item on the current canvas</short>
      </element>
      <element name="TStatusBar.LMDrawItem.Message">
        <short/>
      </element>

      <element name="TStatusBar.DoAutoAdjustLayout">
        <short>Performs actions needed to apply the layout policy in AMode</short>
        <descr>
          <p>
            Calls <var>BeginUpdate</var> to reduce the number of refreshes needed when updating panels in the status bar. Adjusts the width of all items in the <var>Panels</var> collection using the factor in <var>AXProportion</var>. The value in <var>AYProportion</var> is ignored in the method. Calls <var>EndUpdate</var> prior to exit from the method.
          </p>
        <remark>
          No actions are performed in the method when <var>AMode</var> contains a <var>TLayoutAdjustmentPolicy</var> value other than <var>lapAutoAdjustWithoutHorizontalScrolling</var> or <var>lapAutoAdjustForDPI</var>.
        </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TStatusBar.DoAutoAdjustLayout.Mode">
        <short>Layout policy applied in the method</short>
      </element>
      <element name="TStatusBar.DoAutoAdjustLayout.AXProportion">
        <short>Horizontal sizing factor applied to panels in the status bar</short>
      </element>
      <element name="TStatusBar.DoAutoAdjustLayout.AYProportion">
        <short>Vertical sizing factor applied to panels in the status bar</short>
      </element>

      <element name="TStatusBar.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TStatusBar</var>. It calls the inherited <var>Create</var> method, and initializes a number of local variables, including:
          </p>
          <ul>
            <li>AutoHint</li>
            <li>Canvas</li>
            <li>ControlStyle</li>
            <li>Color</li>
            <li>Align</li>
            <li>AutoSize</li>
            <li>SimplePanel</li>
          </ul>
        </descr>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TStatusBar.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TStatusBar.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TStatusBar</var>: frees canvas and panels, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TStatusBar.InvalidatePanel">
        <short>
          Updates the panel at the specified position in the Panels for the status bar
        </short>
        <descr>
          <p>
            <var>InvalidatePanel</var> renders the panel with specified index non-valid. Calls <var>UpdateHandleObject</var> to ensure that the widgetset class is notified of the change to the specified panel.
          </p>
          <remark>
            No actions are performed in the method when the PanelParts argument is an empty set (<b>[]</b>).
          </remark>
        </descr>
        <seealso/>
      </element>
      <element name="TStatusBar.InvalidatePanel.PanelIndex">
        <short>Ordinal position for the panel affected in the method</short>
      </element>
      <element name="TStatusBar.InvalidatePanel.PanelParts">
        <short>Panel parts affected in the method</short>
      </element>

      <element name="TStatusBar.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - starts the update process</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.EndUpdate">
        <short>
          <var>EndUpdate</var> - finishes the update process</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.ExecuteAction">
        <short>
          <var>ExecuteAction</var>: if required action is a Hint-related, sets the Hint in place, otherwise calls inherited method
        </short>
        <seealso>
          <link id="#rtl.classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
        </seealso>
      </element>

      <element name="TStatusBar.GetPanelIndexAt">
        <short>
          Gets the ordinal position for the panel at the specified coordinates
        </short>
        <descr>
          <p>
            <var>GetPanelIndexAt</var> gets the ordinal position for the panel at the specified coordinates. The return value is <b>-1</b> when <var>Panels</var> have not been defined in the status bar. No actions are performed in the method when Panels is empty.
          </p>
          <p>
            GetPanelIndexAt uses the display rectangle for the control to determine in the specified coordinates are within one of the Panels defined for the control. When True, each of the items in the Panels collection are examined to determine if the point is within a specific panel. The ordinal position for the panel is assigned as the return value.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TStatusBar.GetPanelIndexAt.Result">
        <short>
          Ordinal position for the status panel, or -1 when no panel is located at the specified coordinates
        </short>
      </element>
      <element name="TStatusBar.GetPanelIndexAt.X">
        <short>Horizontal coordinate to locate in the Panels for the status bar</short>
      </element>
      <element name="TStatusBar.GetPanelIndexAt.Y">
        <short>Vertical  coordinate to locate in the Panels for the status bar</short>
      </element>

      <element name="TStatusBar.SizeGripEnabled">
        <short>
          <var>SizeGripEnabled</var> - returns True if the size-grip (an area at the bottom of the statusbar where a mouse can grip to change the size) is enabled
        </short>
      </element>

      <element name="TStatusBar.UpdatingStatusBar">
        <short>
          <var>UpdatingStatusBar</var> - returns True if the status bar is being updated</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TStatusBar.UpdatingStatusBar.Result">
        <short/>
      </element>

      <element name="TStatusBar.Canvas">
        <short>The <var>Canvas</var> where the Panels of the StatusBar are to be Painted</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TStatusBar.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TStatusBar.Anchors" link="#LCL.Controls.TControl.Anchors"/>

      <element name="TStatusBar.AutoHint">
        <short>
          <var>AutoHint</var> - if True, a hint is automatically shown when mouse hovers over status bar. Default False
        </short>
      </element>

      <element name="TStatusBar.AutoSize">
        <short>TStatusBar default is True</short>
      </element>

      <element name="TStatusBar.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TStatusBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TStatusBar.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="TStatusBar.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TStatusBar.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TStatusBar.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TStatusBar.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TStatusBar.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TStatusBar.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TStatusBar.Font" link="#LCL.Controls.TControl.Font"/>

      <element name="TStatusBar.Panels">
        <short>Collection with the TStatusPanel instances defined for the control</short>
        <descr>
          <p>
            <var>Panels</var> is a collection used to store <var>TStatusPanel</var> class instances added to the status bar. Panels are significant when the <var>SimplePanel</var> property is set to <b>False</b>; when SimplePanel contains <b>True</b>, the status bar displays the value in <var>SimpleText</var> across the entire width for the status bar.
          </p>
          <p>
            Use <var>CreatePanel</var> to create a new status panel displayed on the status bar. Or use the editor provided in the Lazarus IDE Object Inspector to maintain the items in the Panels collection at design-time.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBidiMode"/>
      <element name="TStatusBar.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TStatusBar.ParentFont"  link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TStatusBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>

      <element name="TStatusBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>

      <element name="TStatusBar.SimpleText">
        <short>
          <var>SimpleText</var> - a character string containing the information to be displayed in the Status Bar</short>
        <descr>
          <p>
            <var>SimpleText</var> - a character string containing the information to be displayed in the Status Bar. This is displayed if <var>SimplePanel</var> is true; otherwise the information in Panels is displayed.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.SimplePanel">
        <short>
          <var>SimplePanel </var>- boolean. Is there just one continuous panel or several sub-panels?</short>
        <descr>
          <p>
            <var>SimplePanel </var>- boolean. Is there just one continuous panel or several sub-panels?
          </p>
          <p>
            If true, the value of <var>SimpleText</var> is displayed; if false, the contents of <var>Panels</var> is displayed.
          </p>
          <p>
            Contents can be adjusted with a stringlist editor that pops up when the ellipsis (...) next to <var>Panels</var> is selected and allows insertion of an arbitrary number of sub-panels with their own strings.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.SizeGrip">
        <short>
          <var>SizeGrip</var> - an area at the bottom of the statusbar where a mouse can grip to change the size: True if this is working
        </short>
      </element>

      <element name="TStatusBar.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>

      <element name="TStatusBar.UseSystemFont">
        <short>Indicates the System font is used for the control</short>
        <descr>
          This is used to provide VCL-compatibility in widgetset classes.
        </descr>
        <seealso/>
      </element>

      <element name="TStatusBar.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TStatusBar.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TStatusBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>

      <element name="TStatusBar.OnCreatePanelClass">
        <short>
          Event handler signalled to get the class used to create new panels in the status bar
        </short>
        <descr>
          <p>
            <var>OnCreatePanelClass</var> is signalled (when assigned) in the <var>CreatePanel</var> method to get  the class used to create new panels in the status bar. Assign an object procedure using the signature in <var>TSBCreatePanelClassEvent</var> to the property to override the value provided by the <var>GetPanelClass</var> method.
          </p>
        </descr>
      </element>

      <element name="TStatusBar.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TStatusBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TStatusBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>

      <element name="TStatusBar.OnDrawPanel">
        <short>Event handler signalled to draw a panel in the status bar</short>
        <descr>
          <p>
            <var>OnDrawPanel</var> is an event handler used to draw the specified panel on the status bar. OnDrawPanel is signalled (when assigned) from the DrawPanel method. Assign an object procedure using the signature in TDrawPanelEvent to render the  specified panel to the desired rectangle in the status bar.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TStatusBar.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TStatusBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>

      <element name="TStatusBar.OnHint">
        <short>Event handler for showing a hint when required</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStatusBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TStatusBar.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TStatusBar.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TStatusBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TStatusBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TStatusBar.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TStatusBar.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TStatusBar.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TStatusBar.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TStatusBar.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TStatusBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>

      <element name="TPageFlag">
        <short>
          Contains values which can be assigned to the Flags property in TCustomPage
        </short>
        <descr>
          Reflects the status or state for the handle used in a custom page control.
        </descr>
        <seealso/>
      </element>
      <element name="TPageFlag.pfAdded">
        <short>Handle for the page has been added to the notebook</short>
      </element>
      <element name="TPageFlag.pfAdding">
        <short>Handle for the page is being added to the notebook</short>
      </element>
      <element name="TPageFlag.pfRemoving">
        <short>Removing the page handle from the notebook</short>
      </element>
      <element name="TPageFlag.pfInserting">
        <short>Inserting the page handle into the notebook</short>
      </element>

      <element name="TPageFlags">
        <short>Set type used to store TPageFlag enumeration values</short>
        <descr>
          <p>
            <var>TPageFlags</var> is the type used to implement the <var>Flags</var> property in <var>TCustomPage</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomPage.Flags"/>
        </seealso>
      </element>

      <element name="TCustomPage">
        <short>The base class for TTabSheet</short>
        <descr>
          <p>
            <var>TCustomPage</var> is a <var>TWinControl</var> descendant which implements the base class for the tabbed pages found in notebooks. TCustomPage provides properties used to maintain the order and visibility of the page, and event handlers signalled when the page is hidden or displayed.
          </p>
        </descr>
        <seealso>
          <link id="TTabSheet"/>
          <link id="TPageControl"/>
          <link id="TCustomTabControl.Page"/>
          <link id="TCustomTabControl.ActivePageComponent"/>
          <link id="#lcl.extctrls.MultiPage-Controls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TCustomPage.FTabVisible"/>
      <element name="TCustomPage.FFlags"/>
      <element name="TCustomPage.FImageIndex"/>
      <element name="TCustomPage.FOnHide"/>
      <element name="TCustomPage.FOnShow"/>

      <element name="TCustomPage.SetImageIndex">
        <short>Sets the value for the ImageIndex property</short>
        <descr>
          Notifies the widgetset class of changes to properties in the custom page.
        </descr>
        <seealso>
          <link id="TCustomPage.ImageIndex"/>
        </seealso>
      </element>
      <element name="TCustomPage.SetImageIndex.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomPage.SetTabVisible">
        <short>Sets the value for the TabVisible property</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.SetTabVisible"/>
        </seealso>
      </element>
      <element name="TCustomPage.SetTabVisible.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomPage.WSRegisterClass">
        <short>Registers the widgetset class used for the class instance</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPage.WMPaint" link="#LCL.Controls.TWinControl.WMPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPage.WMPaint.Msg">
        <short/>
      </element>

      <element name="TCustomPage.SetParent" link="#LCL.Controls.TControl.SetParent">
        <short>Sets the Parent control for the custom page</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPage.SetParent.AParent">
        <short/>
      </element>

      <element name="TCustomPage.Flags">
        <short>
          Contains flag values that represent the status or state for the handle in the custom page control
        </short>
        <descr>
          <p>
            Values in <var>Flags</var> are normally added or removed when changes are performed in a control which uses the page control class instance. See <var>TPageFlag</var> for more information about enumeration values and their meanings.
          </p>
        </descr>
        <seealso>
          <link id="TPageFlags"/>
          <link id="TPageFlag"/>
        </seealso>
      </element>

      <element name="TCustomPage.CMHitTest" link="#LCL.Controls.TControl.CMHitTest">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPage.CMHitTest.Message">
        <short/>
      </element>

      <element name="TCustomPage.CMVisibleChanged" link="#lcl.controls.TWinControl.CMVisibleChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPage.CMVisibleChanged.Message">
        <short/>
      </element>

      <element name="TCustomPage.GetPageIndex">
        <short>Gets the value for the PageIndex property</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.PageIndex"/>
        </seealso>
      </element>
      <element name="TCustomPage.GetPageIndex.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomPage.SetPageIndex">
        <short>Sets the value for the PageIndex property</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.PageIndex"/>
        </seealso>
      </element>
      <element name="TCustomPage.SetPageIndex.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomPage.GetTabVisible">
        <short>Gets the value for the TabVisible property</short>
        <descr/>
        <seealso>
          <link id="TCustomPage.GetTabVisible"/>
        </seealso>
      </element>
      <element name="TCustomPage.GetTabVisible.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomPage.DialogChar" link="#LCL.Controls.TWinControl.DialogChar">
        <short>
          Provides support for TCustomTabControl as parent when handling dialog accelerator keys
        </short>
        <descr>
          <p>
            Calls the inherited DialogChar method when Parent is not derived from TCustomTabControl.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomPage.DialogChar.Result">
        <short/>
      </element>
      <element name="TCustomPage.DialogChar.Message">
        <short/>
      </element>

      <element name="TCustomPage.DoHide">
        <short>
          <var>DoHide</var> - perform the code for the <var>OnHide</var> event handler</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPage.DoShow">
        <short>
          <var>DoShow</var> - perform the code for the <var>OnShow</var> event handler</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPage.DestroyHandle" link="#LCL.Controls.TWinControl.DestroyHandle">
        <short>Updates the Flags property when the handle for the control is freed</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomPage.RealSetText" link="#LCL.Controls.TWinControl.RealSetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPage.RealSetText.AValue">
        <short/>
      </element>

      <element name="TCustomPage.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for <var>TCustomPage</var>.
          </p>
          <p>
            Create calls the inherited constructor on entry and sets the default value for the style, visibility, alignment and caption in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomPage.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomPage.CanTab" link="#lcl.controls.TWinControl.CanTab"/>
      <element name="TCustomPage.CanTab.Result"/>

      <element name="TCustomPage.IsControlVisible" link="#lcl.Controls.TControl.IsControlVisible"/>
      <element name="TCustomPage.IsControlVisible.Result"/>

      <element name="TCustomPage.HandleObjectShouldBeVisible" link="#lcl.controls.TControl.HandleObjectShouldBeVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomPage.HandleObjectShouldBeVisible.Result">
        <short/>
      </element>

      <element name="TCustomPage.VisibleIndex">
        <short>
          <var>VisibleIndex</var> - returns the index number of a visible page
        </short>
        <descr>
          <p>
            Gets the ordinal position in the Parent (tab control) where the current page is displayed. Returns <b>-1</b> if the page is not present in the notebook or has its TabVisible property set to False.
          </p>
        </descr>
      </element>
      <element name="TCustomPage.VisibleIndex.Result">
        <short>
          Ordinal position for the visible page, or -1 when not found or not visible
        </short>
      </element>

      <element name="TCustomPage.CheckNewParent">
        <short>Ensures that an assigned parent control is derived from TCustomTabControl</short>
        <descr/>
        <errors>
          Raises an EInvalidOperation exception when the specified AParent control is not derived from TCustomTabControl. Calls the inherited CheckNewParent method when AParent is unassigned or derived from TCustomTabControl.
        </errors>
        <seealso>
          <link id="TCustomPage"/>
          <link id="#lcl.controls.TControl.CheckNewParent">TControl.CheckNewParent</link>
        </seealso>
      </element>
      <element name="TCustomPage.CheckNewParent.AParent">
        <short>Parent control examined in the method</short>
      </element>

      <element name="TCustomPage.PageIndex">
        <short>Ordinal position for the page in the parent control</short>
        <descr>
          <p>
            <var>PageIndex</var> is an Integer property which contains the ordinal position for the page control in a <var>Parent</var> control. Setting a new value for the property causes the Parent control to call its <var>MoveTab</var> method to reorder the pages on the control. This action is performed when Parent is descended from <var>TCustomTabControl</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl"/>
        </seealso>
      </element>

      <element name="TCustomPage.TabVisible">
        <short>Indicates if the tab in the Parent control should be visible</short>
        <descr>
          <p>
            <var>TabVisible</var> indicates if the Tab in the <var>Parent</var> control is visible.
          </p>
          <p>
            Changing the value in the property cause the Parent control to be updated to reflect the new property value. Please note: No actions are performed when the new value for the property is the same as the existing value for the property, or at design-time.
          </p>
          <p>
            When the Parent control has been assigned and has a handle allocated, the TCustomTabControl in Parent is updated to reflect the new value for the property. When True, the active page in the tab control is changed to the current page instance when one has not already been assigned in the Parent control. The page and its handle are removed from the tab control when the property value is False.
          </p>
          <p>
            Use IsControlVisible to determine if the page is currently the active one displayed in the Parent tab control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.ImageIndex">
        <short>
          <var>ImageIndex</var> - integer index value for the image associated with this page</short>
      </element>

      <element name="TCustomPage.Left" link="#lcl.Controls.TControl.Left">
        <short/>
        <descr>
          The value for the Left property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.Top" link="#lcl.Controls.TControl.Top">
        <short/>
        <descr>
          The value for the Top property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.Width" link="#lcl.Controls.TControl.Width">
        <short/>
        <descr>
          The value for the Width property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.Height" link="#lcl.Controls.TControl.Height">
        <short/>
        <descr>
          The value for the Height property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.TabOrder" link="#lcl.Controls.TWinControl.TabOrder">
        <short/>
        <descr>
          The value for the TabOrder property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.Visible" link="#lcl.Controls.TControl.Visible">
        <short/>
        <descr>
          The value for the Visible property is not stored in the LCL component streaming mechanism for TCustomPage.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomPage.OnHide">
        <short>
          <var>OnHide</var> - event handler for hiding this page in a notebook
        </short>
      </element>

      <element name="TCustomPage.OnShow">
        <short>
          <var>OnShow</var> - event handler for showing (making visible) this page of a notebook
        </short>
      </element>

      <element name="TCustomPageClass">
        <short>
          <var>TCustomPageClass</var> - class of <var>TCustomPage</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBBasePages">
        <short>Ancestor for the TNBPages class</short>
        <descr>
          <p>
            <var>TNBBasePages</var> specifies the ancestor for TNBPages, and provides virtual abstract methods used to maintain a list of TCustomPage objects associated with a TCustomTabControl (also called a "notebook"). Use the TNBPages descendant which provides concrete method implementations and additional properties and methods for the purpose.
          </p>
        </descr>
        <seealso>
          <link id="TNBPages"/>
        </seealso>
      </element>

      <element name="TNBBasePages.IndexOfPage">
        <short>Gets the ordinal position for the specified page object</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.IndexOfPage.Result">
        <short>Ordinal position for the specified page object, or -1 when not found</short>
      </element>
      <element name="TNBBasePages.IndexOfPage.AnObject">
        <short>Page object to locate in the list</short>
      </element>

      <element name="TNBBasePages.InsertPage">
        <short>Inserts the specified page at the given position in the list</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.InsertPage.Index">
        <short>Ordinal position where the page is inserted</short>
      </element>
      <element name="TNBBasePages.InsertPage.APage">
        <short>Page object inserted in the method</short>
      </element>

      <element name="TNBBasePages.DeletePage">
        <short>Deletes the page at the specified position in the list</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.DeletePage.Index">
        <short>Ordinal position for the page deleted in the method</short>
      </element>

      <element name="TNBBasePages.GetPage">
        <short>Gets the page object stored at the specified position in the list</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBBasePages.GetPage.Result">
        <short>Page object stored at the specified position in the list</short>
      </element>
      <element name="TNBBasePages.GetPage.Index">
        <short>Ordinal position in the list for the requested page object</short>
      </element>

      <element name="TNBBasePages.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            Calls the inherited constructor. Please note: The value in theNotebook is ignored in the method. Use the derived TNBPages class which stores the notebook where the page objects are used.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TNBBasePages.Create.theNotebook">
        <short>
          Notebook (or custom tab control) for the page objects; Ignored in the method
        </short>
      </element>

      <element name="TNBBasePagesClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages.FPageList"/>
      <element name="TNBPages.FNotebook"/>

      <element name="TNBPages.PageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.PageListChange.Ptr">
        <short/>
      </element>
      <element name="TNBPages.PageListChange.AnAction">
        <short/>
      </element>

      <element name="TNBPages.Get" link="#rtl.Classes.TStringList.Get">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.Get.Result">
        <short/>
      </element>
      <element name="TNBPages.Get.Index">
        <short/>
      </element>

      <element name="TNBPages.GetCount" link="#rtl.Classes.TStringList.GetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.GetCount.Result">
        <short/>
      </element>

      <element name="TNBPages.GetObject" link="#rtl.Classes.TStringList.GetObject">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.GetObject.Result">
        <short/>
      </element>
      <element name="TNBPages.GetObject.Index">
        <short/>
      </element>

      <element name="TNBPages.Put" link="#rtl.Classes.TStringList.Put">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.Put.Index">
        <short/>
      </element>
      <element name="TNBPages.Put.S">
        <short/>
      </element>

      <element name="TNBPages.IndexOfPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.IndexOfPage.Result">
        <short/>
      </element>
      <element name="TNBPages.IndexOfPage.AnObject">
        <short/>
      </element>

      <element name="TNBPages.InsertPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.InsertPage.Index">
        <short/>
      </element>
      <element name="TNBPages.InsertPage.APage">
        <short/>
      </element>

      <element name="TNBPages.DeletePage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.DeletePage.Index">
        <short/>
      </element>

      <element name="TNBPages.GetPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.GetPage.Result">
        <short/>
      </element>
      <element name="TNBPages.GetPage.Index">
        <short/>
      </element>

      <element name="TNBPages.PageList">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages.Notebook">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages.Create">
        <short>
          <var>Create</var> - constructor for <var>TNBPages</var>: calls inherited <var>Create</var> then sets up the list of pages on the notebook
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TNBPages.Create.thePageList">
        <short/>
      </element>
      <element name="TNBPages.Create.theNotebook">
        <short/>
      </element>

      <element name="TNBPages.Destroy">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages.Clear" link="#rtl.Classes.TStrings.Clear">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBPages.Delete" link="#rtl.Classes.TStrings.Delete">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.Delete.Index">
        <short/>
      </element>

      <element name="TNBPages.Insert" link="#rtl.Classes.TStrings.Insert">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.Insert.Index">
        <short/>
      </element>
      <element name="TNBPages.Insert.S">
        <short/>
      </element>

      <element name="TNBPages.Move" link="#rtl.Classes.TStrings.Move">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBPages.Move.CurIndex">
        <short/>
      </element>
      <element name="TNBPages.Move.NewIndex">
        <short/>
      </element>

      <element name="TNBNoPages">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNBNoPages.Get">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.Get.Result">
        <short/>
      </element>
      <element name="TNBNoPages.Get.Index">
        <short/>
      </element>

      <element name="TNBNoPages.GetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.GetCount.Result">
        <short/>
      </element>

      <element name="TNBNoPages.IndexOfPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.IndexOfPage.Result">
        <short/>
      </element>
      <element name="TNBNoPages.IndexOfPage.AnObject">
        <short/>
      </element>

      <element name="TNBNoPages.GetPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNBNoPages.GetPage.Result">
        <short/>
      </element>
      <element name="TNBNoPages.GetPage.Index">
        <short/>
      </element>

      <element name="TTabChangingEvent">
        <short>
          <var>TTabChangingEvent</var> - generic event handling method for a change in a notebook Tab</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabChangingEvent.Sender">
        <short/>
      </element>
      <element name="TTabChangingEvent.AllowChange">
        <short/>
      </element>

      <element name="TTabPosition">
        <short>
          Represents the position for a tab relative to its page
        </short>
        <descr>
          <p>
            <var>TTabPosition</var> is an enumerated type with values that represent the position for the tabs in <var>TCustomTabControl</var> relative to its page. TTabPosition is the type used to implement the <var>TabPosition</var> property in TCustomTabControl.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.TabPosition"/>
        </seealso>
      </element>
      <element name="TTabPosition.tpTop">
        <short>Displays tabs along the top edge of the page</short>
      </element>
      <element name="TTabPosition.tpBottom">
        <short>Displays tabs along the bottom edge of the page</short>
      </element>
      <element name="TTabPosition.tpLeft">
        <short>Displays tabs vertically along the left edge of the page</short>
      </element>
      <element name="TTabPosition.tpRight">
        <short>Displays tabs vertically along the right edge of the page</short>
        <short/>
      </element>

      <element name="TTabStyle" link="#LCL.ExtCtrls.TTabStyle">
        <short>
          <var>TTabStyle</var> - enumerated type for tab style: normal, buttons or flat buttons
        </short>
        <descr>
          <p>
            <var>TTabStyle</var> is an enumerated type with values that define the drawing style used for tabs in <var>TCustomTabControl</var>. TTabStyle is the type used to implement the <var>Style</var> property in TCustomTabControl.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Style"/>
        </seealso>
      </element>
      <element name="TTabStyle.tsTabs">
        <short>Tabs are drawn using the tab style common to manilla file folders</short>
      </element>
      <element name="TTabStyle.tsButtons">
        <short>Tabs are drawn as buttons</short>
      </element>
      <element name="TTabStyle.tsFlatButtons">
        <short>Tabs are drawn as buttons using a flat (non-raised) appearance</short>
      </element>

      <element name="TTabGetImageEvent">
        <short>
          <var>TTabGetImageEvent</var> - generic event handling method for getting an image for a Tab
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabGetImageEvent.Sender">
        <short/>
      </element>
      <element name="TTabGetImageEvent.TabIndex">
        <short/>
      </element>
      <element name="TTabGetImageEvent.ImageIndex">
        <short/>
      </element>

      <element name="TCTabControlOption">
        <short>
          <var>TCTabControlOption</var> - Show the close button on a tab, allow multi-line tabs
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCTabControlOption.nboShowCloseButtons">
        <short/>
      </element>
      <element name="TCTabControlOption.nboMultiLine">
        <short/>
      </element>

      <element name="TCTabControlOptions">
        <short>
          <var>TCTabControlOptions</var> - set of <var>TCTabControlOption</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCTabControlCapability">
        <short>
          <var>TCTabControlCapability</var> - enumerated type containing possible capabilities of a notebook or tabbed control
        </short>
        <descr>
          nbcShowCloseButtons, nbcMultiLine, nbcPageListPopup, nbcShowAddTabButton
        </descr>
      </element>
      <element name="TCTabControlCapability.nbcShowCloseButtons">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcMultiLine">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcPageListPopup">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcShowAddTabButton">
        <short/>
      </element>
      <element name="TCTabControlCapability.nbcTabsSizeable">
        <short/>
      </element>

      <element name="TCTabControlCapabilities">
        <short>
          <var>TCTabControlCapabilities</var> - set of <var>TCTabControlCapability</var>
        </short>
      </element>

      <element name="TDrawTabEvent">
        <short>
          <var>TDrawTabEvent</var> - generic event handling procedure for drawing a tab with given index at the specified rectangle
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TDrawTabEvent.Control">
        <short/>
      </element>
      <element name="TDrawTabEvent.TabIndex">
        <short/>
      </element>
      <element name="TDrawTabEvent.Rect">
        <short/>
      </element>
      <element name="TDrawTabEvent.Active">
        <short/>
      </element>

      <element name="TCustomTabControl">
        <short>
          <var>TCustomTabControl</var> - base class for <var>TTabControl</var>, a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
        </short>
        <descr>
          <p>
            <var>TCustomTabControl</var> - base class for <var>TTabControl</var>, a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
          </p>
          <p>
            A tab control has a series of <var>Tabs</var> and it may or may not contain pages.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.Multi-PageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.FAccess"/>
      <element name="TCustomTabControl.FAddingPages"/>
      <element name="TCustomTabControl.FHotTrack"/>
      <element name="TCustomTabControl.FImages"/>
      <element name="TCustomTabControl.FImageWidth"/>
      <element name="TCustomTabControl.FImageListChangeLink"/>
      <element name="TCustomTabControl.FMultiSelect"/>
      <element name="TCustomTabControl.FOnChanging"/>
      <element name="TCustomTabControl.FOnCloseTabClicked"/>
      <element name="TCustomTabControl.FOnGetImageIndex"/>
      <element name="TCustomTabControl.fOnPageChanged"/>
      <element name="TCustomTabControl.FOptions"/>
      <element name="TCustomTabControl.FOwnerDraw"/>
      <element name="TCustomTabControl.FPageIndex"/>
      <element name="TCustomTabControl.FPageIndexOnLastChange"/>
      <element name="TCustomTabControl.FRaggedRight"/>
      <element name="TCustomTabControl.FScrollOpposite"/>
      <element name="TCustomTabControl.FShowTabs"/>
      <element name="TCustomTabControl.FStyle"/>
      <element name="TCustomTabControl.FTabHeight"/>
      <element name="TCustomTabControl.FTabPosition"/>
      <element name="TCustomTabControl.FTabWidth"/>

      <element name="TCustomTabControl.DoSendPageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoSendShowTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoSendTabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoSendTabSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoImageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.GetActivePage">
        <short>Gets the value for the ActivePage property</short>
        <descr>
          <p>
            Uses an internal index value to get the caption for the TCustomPage in the Page property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.ActivePage"/>
          <link id="TCustomTabControl.Page"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetActivePage.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomTabControl.GetActivePageComponent">
        <short>Gets the value for the ActivePageComponent property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ActivePageComponent"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetActivePageComponent.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomTabControl.GetDisplayRect">
        <short>Gets the value for the DisplayRect property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.DisplayRect"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetDisplayRect.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomTabControl.GetMultiLine">
        <short>Gets the value for the MultiLine property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.MultiLine"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetMultiLine.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomTabControl.FindVisiblePage">
        <short>Locates a visible page in the tab control</short>
        <descr>
          <p>
            <var>FindVisiblePage</var> is used to locate a Page in the tab control with its TabVisible property set to True. Index specifies the ordinal position in Pages property that is the search locus. FindVisiblePage searches the Page collection in ascending order starting at the position in Index. If a visible page is not found, Page is searched in descending order starting at Index -1.
          </p>
          <p>
            The return value contains the ordinal position in Page where the visible tab was located, or -1 when there are no visible tabs in Page.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.FindVisiblePage.Result">
        <short>
          Ordinal position for the page with a visible tab, or -1 when a visible tab is not found
        </short>
      </element>
      <element name="TCustomTabControl.FindVisiblePage.Index">
        <short>Ordinal position where the search is started</short>
      </element>

      <element name="TCustomTabControl.IsStoredActivePage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IsStoredActivePage.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.MoveTab">
        <short>Moves the specified page control to the new position in NewIndex</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.MoveTab.Sender">
        <short>Page object moved in the method</short>
      </element>
      <element name="TCustomTabControl.MoveTab.NewIndex">
        <short>New position in the list of pages</short>
      </element>

      <element name="TCustomTabControl.SetMultiLine">
        <short>Sets the value for the MultiLine property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.SetMultiLine"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetMultiLine.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetStyle">
        <short>Sets the value for the Style property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Style"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetStyle.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.WSMovePage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.WSMovePage.APage">
        <short/>
      </element>
      <element name="TCustomTabControl.WSMovePage.NewIndex">
        <short/>
      </element>

      <element name="TCustomTabControl.PageRemoved">
        <short>
          Performs action needed when the current page object is removed from the tabbed control
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.PageRemoved.Index">
        <short>Ordinal position for the page object removed from the tabbed control</short>
      </element>

      <element name="TCustomTabControl.SetActivePage">
        <short>Sets the value for the ActivePage property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ActivePage"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetActivePage.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetActivePageComponent">
        <short>Sets the value for the ActivePageComponent property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ActivePageComponent"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetActivePageComponent.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetImages">
        <short>Sets the value for the Images property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Images"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetImages.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetImagesWidth">
        <short>Sets the value for the ImagesWidth property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ImagesWidth"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetImagesWidth.AImagesWidth">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetPageIndex">
        <short>Sets the value for the PageIndex property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.PageIndex"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetPageIndex.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetPages">
        <short>Sets the value for the Pages property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Pages"/>
          <link id="TNBPages"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetPages.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetShowTabs">
        <short>Sets the value for the ShowTabs property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.ShowTabs"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetShowTabs.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetTabHeight">
        <short>Sets the value for the TabHeight property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabHeight"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetTabHeight.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetTabPosition">
        <short>Sets the value for the ShowTabs property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabPosition"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetTabPosition.tabPos">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.SetTabWidth">
        <short>Sets the value for the TabWidth property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabWidth"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetTabWidth.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.ShowCurrentPage">
        <short>Ensures that the current page has its Visible property set to True</short>
        <descr>
          <p>
            <var>ShowCurrentPage</var> checks the value in <var>PageIndex</var> to determine if a valid page index has been specified. No actions are performed in the method when PageIndex is less than <b>0</b> or greater than <b>PageCount - 1</b>.
          </p>
          <p>
            ShowCurrentPage gets the <var>TCustomPage</var> instance in <var>Page</var> at the position in <var>PageIndex</var>, and sets its <var>Visible</var> property to <b>True</b>. If the Page is Enabled, it <var>SetFocus</var> method is called.
          </p>
          <p>
            ShowCurrentPage sets the Visible property in the previously selected Page to <b>False</b>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTabControl.UpdateAllDesignerFlags">
        <short>
          Updates control style flags to hide or display pages in the tabbed control at design-time
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.UpdateDesignerFlags">
        <short>
          Updates control style flags for the specified page to hide or display the control at design-time
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.UpdateDesignerFlags.APageIndex">
        <short>Ordinal position for the Page updated in the method</short>
      </element>

      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle">
        <short>
          Notifies the widgetset class when the handle for the image resolution is freed
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.SetImageListAsync"/>
          <link id="#LCL.forms.TApplication.QueueAsyncCall">TApplication.QueueAsyncCall</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle.Sender">
        <short>Image list for the event notification</short>
      </element>
      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle.AWidth">
        <short>Not used in the method</short>
      </element>
      <element name="TCustomTabControl.DoImageListDestroyResolutionHandle.AReferenceHandle">
        <short>Not used in the method</short>
      </element>

      <element name="TCustomTabControl.SetImageListAsync">
        <short>Performs actions needed when the Images in the control are changed</short>
        <descr>
          Queued and executed asynchronously by the Application instance.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.SetImageListAsync.Data">
        <short>Pointer to the Data for the asynchronous event</short>
      </element>

      <element name="TCustomTabControl.DoAutoAdjustLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TCustomTabControl.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TCustomTabControl.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TCustomTabControl.GetPageClass">
        <short>Gets the class type used to create new page instances in the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetPageClass.Result">
        <short>Class type used to create new page instances in the control</short>
      </element>

      <element name="TCustomTabControl.GetListClass">
        <short>Gets the class type used to access a list of pages in the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetListClass.Result">
        <short>Class type used to access a list of pages in the control</short>
      </element>

      <element name="TCustomTabControl.SetOptions">
        <short>Sets the value for the Options property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Options"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.SetOptions.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomTabControl.AddRemovePageHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.AddRemovePageHandle.APage">
        <short/>
      </element>

      <element name="TCustomTabControl.CNNotify">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CNNotify.Message">
        <short/>
      </element>

      <element name="TCustomTabControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomTabControl.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd"/>

      <element name="TCustomTabControl.Loaded" link="#rtl.Classes.TComponent.Loaded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.DoChange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.InitializeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Change">
        <short>
          <var>Change</var> - perform the code for <var>OnChanging</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short>Handles page navigation using the Tab key</short>
        <descr>
          <p>
            <var>KeyDown</var> is overridden in TCustomTabControl to handle use of the <b>Tab</b> key (<b>VK_TAB</b>) to change the active page in the tabbed control.
          </p>
          <p>
            The <var>Options</var> property must contain the value    <var>nboKeyboardTabSwitch</var> to enable the tab switching feature. Pressing <b>Ctrl+Tab</b> switches to the next page by incrementing the      <var>PageIndex</var> value. Pressing <b>Ctrl+Shift+Tab</b>  switches to the previous  page by decrementing the <var>PageIndex</var> value.
          </p>
          <p>
            If <var>Key</var> is not the <b>VK_TAB</b> virtual key code, the inherited method is called to handle the values in <var>Key</var> and <var>Shift</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Options"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCTabControlOption"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.KeyDown.Key">
        <short>Virtual key code examined in the method</short>
      </element>
      <element name="TCustomTabControl.KeyDown.Shift">
        <short>Key modifier(s) used in the method</short>
      </element>

      <element name="TCustomTabControl.ReadState" link="#rtl.Classes.TComponent.ReadState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.ReadState.Reader">
        <short/>
      </element>

      <element name="TCustomTabControl.DialogChar" link="#LCL.Controls.TControl.DialogChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.DialogChar.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.DialogChar.Message">
        <short/>
      </element>

      <element name="TCustomTabControl.InternalSetPageIndex">
        <short>Updates the internal page index without triggering an OnChange event</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.InternalSetPageIndex.AValue">
        <short>New value for the internal page index</short>
      </element>

      <element name="TCustomTabControl.ShowControl" link="#LCL.Controls.TWinControl.ShowControl">
        <short>Makes the specified page object the active page in the tabbed control</short>
        <descr>
          <p>
            <var>ShowControl</var> gets the position for the control specified by the <var>APage</var> argument in the <var>Page</var> property, and makes it the active page in the tabbed control. If the control is not found in Page, the inherited ShowControl method is called to display the control.
          </p>
          <p>
            ShowControl is provided for Delphi compatibility.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Page"/>
          <link id="TCustomTabControl.IndexOf"/>
          <link id="TCustomTabControl.PageIndex"/>
          <link id="TCustomTabControl.PageToTabIndex"/>
          <link id="TCustomTabControl.TabToPageIndex"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.ShowControl.APage">
        <short>Page object to locate and display in the method</short>
      </element>

      <element name="TCustomTabControl.IndexOfTabAt">
        <short>
          <var>IndexOfTabAt</var> returns the index value for the Tab located at the specified X and Y positions
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.X">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.Y">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfTabAt.P">
        <short/>
      </element>

      <element name="TCustomTabControl.IndexOfPageAt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.X">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.Y">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOfPageAt.P">
        <short/>
      </element>

      <element name="TCustomTabControl.UpdateTabProperties">
        <short>
          <var>UpdateTabProperties</var> - apply all pending changes to the Tab</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr>
          <p>
            <var>Notification</var> is overridden in <var>TCustomTabControl</var> to ensure that resources allocated for the Images property are Nil'd when the component is removed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Images"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomTabControl.Notification.Operation">
        <short/>
      </element>

      <element name="TCustomTabControl.ActivePageComponent">
        <short>
          <var>ActivePageComponent</var> - the actual contents of the currently selected <var>Page</var>
        </short>
      </element>

      <element name="TCustomTabControl.ActivePage">
        <short>
          <var>ActivePage</var> - the  name (string) of the
          <var>Page</var> that is currently selected and is available for interaction
        </short>
      </element>

      <element name="TCustomTabControl.GetPage">
        <short>Gets the value for the indexed Page property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Page"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetPage.Result">
        <short>Value for the property</short>
      </element>
      <element name="TCustomTabControl.GetPage.AIndex">
        <short>Ordinal position for the page object requested in the method</short>
      </element>

      <element name="TCustomTabControl.GetPageCount">
        <short>Gets the value for the PageCount property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.PageCount"/>
        </seealso>
      </element>
      <element name="TCustomTabControl.GetPageCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomTabControl.InsertPage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.InsertPage.APage">
        <short/>
      </element>
      <element name="TCustomTabControl.InsertPage.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.RemovePage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.RemovePage.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.CanChange">
        <short>
          <var>CanChange</var> - returns True if the control can be changed</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CanChange.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.DisplayRect">
        <short>
          <var>DisplayRect</var> - the rectangular area to be used for displaying information determined by the identity of the selected <var>Tab</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Tabs">
        <short>
          <var>Tabs</var> - the actual Tabs expressed as strings</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabIndex">
        <short>
          <var>TabIndex</var> - index value of current Tab. If none selected, default value of -1 is returned
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.OnChange">
        <short>
          <var>OnChange</var> - event handler for a change in the page
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTabControl</var>: calls inherited <var>Create</var> creates a pagelist, then sets initial bounds and default values for local variables and properties
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomTabControl.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomTabControl.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomTabControl</var>: clears and frees pages and list, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomTabControl.TabRect">
        <short>
          <var>TabRect</var> - the rectangle occupied by the specified Tab
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.TabRect.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.TabRect.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.GetImageIndex">
        <short>
          <var>GetImageIndex</var> - find the index number of the image associated with the specified Page index
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetImageIndex.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.GetImageIndex.ThePageIndex">
        <short/>
      </element>

      <element name="TCustomTabControl.IndexOf">
        <short>
          <var>IndexOf</var> - returns the index value of a specified page</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.IndexOf.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.IndexOf.APage">
        <short/>
      </element>

      <element name="TCustomTabControl.CustomPage">
        <short>
          <var>CustomPage</var> - returns the page specified by <var>Index</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CustomPage.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.CustomPage.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.CanChangePageIndex">
        <short>
          <var>CanChangePageIndex</var> - determine whether it is permissible to change the index of the page
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.CanChangePageIndex.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.GetMinimumTabWidth">
        <short>
          <var>GetMinimumTabWidth</var> - find the smallest permissible tab width</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetMinimumTabWidth.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.GetMinimumTabHeight">
        <short>
          <var>GetMinimumTabHeight</var> - find the least permissible height for a tab</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.GetMinimumTabHeight.Result">
        <short/>
      </element>

      <element name="TCustomTabControl.GetCapabilities">
        <short>
          <var>GetCapabilities</var> - returns the set of capabilities
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabToPageIndex">
        <short>Gets the real page index for the specified tab</short>
        <descr>
          <p>
            <var>TabToPageIndex</var> is an <var>Integer</var> function used to get the page index for the tab at the specified position.  The tab index value in <var>AIndex</var> does not include any non-visible tabs. TabToPageIndex adjusts the index value to include any <var>TCustomPage</var> instances in <var>Page</var> with its <var>TabVisible</var> property set to <b>False</b>.
          </p>
          <p>
            The return value contains the value specified in AIndex after adding any non-visible pages proper to the requested position.
          </p>
          <p>
            No actions are performed in the method at design-time; all pages are visible on the designer surface.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTabControl.TabToPageIndex.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.TabToPageIndex.AIndex">
        <short/>
      </element>

      <element name="TCustomTabControl.PageToTabIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.PageToTabIndex.Result">
        <short/>
      </element>
      <element name="TCustomTabControl.PageToTabIndex.AIndex">
        <short/>
      </element>

      <element name="TCustomTabControl.DoCloseTabClicked">
        <short>
          <var>DoCloseTabClicked</var> - perform the action associated with clicking the Close tab for this page (<var>OnCloseTabClicked</var>)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.DoCloseTabClicked.APage">
        <short/>
      </element>

      <element name="TCustomTabControl.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasized
        </short>
        <descr/>
        <seealso>
          <link id="TCustomListView.HotTrack"/>
        </seealso>
      </element>

      <element name="TCustomTabControl.Images">
        <short>
          <var>Images</var> - the list of images associated with the pages of this notebook</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.ImagesWidth">
        <short>Width for the Images used in the control</short>
        <descr>
          <p>
            <var>ImagesWidth</var> specifies the width used for the <var>Images</var> in the control. ImagesWidth determines the resolution (either selected or resized) for the current display density (PPI).
          </p>
          <p>
            Changing the value in the property causes the <var>DoImageListChange</var> method to be called to select the image resolution, and to notify the widgetset class of the change. The <var>UpdateTabProperties</var> method is called to propogate the change to all tabs in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTabControl.Images"/>
          <link id="TCustomTabControl.ImagesWidth"/>
          <link id="TCustomTabControl.UpdateTabProperties"/>
          <link id="TChangeLink.OnChange"/>
        </seealso>
      </element>

      <element name="TCustomTabControl.MultiLine">
        <short>
          <var>MultiLine</var> - whether the Tab's caption is allowed to have multiple lines
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.MultiSelect">
        <short>
          <var>MultiSelect</var> - whether multiple Tabs are allowed to be selected at the same time (e.g. by pressing Shift or Ctrl while selecting)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.OnChanging">
        <short>
          <var>OnChanging</var> - event handler for changing a tab</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.OnCloseTabClicked">
        <short>
          <var>OnCloseTabClicked</var> - event handler for clicking on the Close button to close a tab
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for getting an image index
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Options">
        <short>
          The set of  <var>Options</var> for the Notebook: Show close buttons on the tabs, multi-line tabs
        </short>
        <descr>
          <p>The set of  <var>Options</var> for the Notebook: </p>
          <p>
            <var>nboShowCloseButtons</var> (display a little CloseButton on the Tab next to the label to allow a user to close that tab),</p>
          <p>
            <var>nboMultiLine</var> (allows multi-line captions on the Tabs)</p>
        </descr>
      </element>

      <element name="TCustomTabControl.OwnerDraw">
        <short>
          <var>OwnerDraw</var> - is the calling routine (<var>Owner</var>) allowed to specify the drawing method?
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Page">
        <short>The current <var>Page</var> of the Notebook</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTabControl.Page.Index">
        <short/>
      </element>

      <element name="TCustomTabControl.PageCount">
        <short>
          <var>PageCount</var> - the number of Pages in the Notebook</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.PageIndex">
        <short>
          <var>PageIndex</var> - Index number of the current page</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Pages">
        <short>The list of page names in the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.RaggedRight">
        <short>
          <var>RaggedRight</var> - un-justified or un-aligned text
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.ScrollOpposite">
        <short>
          <var>ScrollOpposite</var> - is scrolling to happen in the opposite direction to usual?
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.ShowTabs">
        <short>
          <var>ShowTabs</var> - if True (default condition), show the tabs for each page
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.Style">
        <short>
          <var>Style</var> - Tabs, buttons or flat buttons?
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabHeight">
        <short>
          <var>TabHeight</var> - height of the tabs
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabPosition">
        <short>
          <var>TabPosition</var> - top, bottom, left or right
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabWidth">
        <short>Width of the tabs displayed on the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTabControl.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <descr>
          <p>
            The default value for the property is <b>True</b> in <var>TCustomTabControl</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabSheet">
        <short>An individual page used in TPageControl</short>
        <descr>
          <p>
            <var>TTabSheet</var> - individual page of a <var>TPageControl</var>. It is a more elaborate version of <var>TPage</var>, and adds the following features:
          </p>
          <ul>
            <li>Drag/Drop properties</li>
            <li>Ability to Enable/Disable the page</li>
            <li>Ability to make the Tab visible or hidden</li>
          </ul>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.Multi-PageControls">Using Multi-Page Controls</link>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <element name="TTabSheet.GetPageControl">
        <short>Gets the value for the PageControl property</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.PageControl"/>
        </seealso>
      </element>
      <element name="TTabSheet.GetPageControl.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabSheet.GetTabIndex">
        <short>Gets the value for the TabIndex property</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabSheet.GetTabIndex.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabSheet.SetPageControl">
        <short>Sets the value for the PageControl property</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.PageControl"/>
        </seealso>
      </element>
      <element name="TTabSheet.SetPageControl.APageControl">
        <short>New value for the property</short>
      </element>

      <element name="TTabSheet.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TTabSheet.Create">
        <short>calls inherited <var>Create</var> and zeroes <var>ImageIndex</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TTabSheet.Create.TheOwner">
        <short/>
      </element>

      <element name="TTabSheet.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTabSheet</var>: detaches from the Host Dock Site and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TTabSheet.PageControl">
        <short>The <var>PageControl</var> of which this TabSheet is a member</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabSheet.TabIndex">
        <short>
          <var>TabIndex</var> - the Index value or sequence number of this TabSheet</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabSheet.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="TTabSheet.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TTabSheet.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TTabSheet.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TTabSheet.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TTabSheet.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TTabSheet.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TTabSheet.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TTabSheet.Height" link="#LCL.Controls.TControl.Height"/>
      <element name="TTabSheet.ImageIndex" link="#lcl.comctrls.TCustomPage.ImageIndex"/>
      <element name="TTabSheet.Left" link="#LCL.Controls.TControl.Left"/>
      <element name="TTabSheet.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TTabSheet.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TTabSheet.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TTabSheet.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TTabSheet.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TTabSheet.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TTabSheet.OnHide" link="#lcl.comctrls.TCustomPage.OnHide"/>
      <element name="TTabSheet.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TTabSheet.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TTabSheet.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TTabSheet.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TTabSheet.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TTabSheet.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TTabSheet.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TTabSheet.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TTabSheet.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TTabSheet.OnShow" link="#lcl.comctrls.TCustomPage.OnShow"/>
      <element name="TTabSheet.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TTabSheet.PageIndex" link="#lcl.comctrls.TCustomPage.PageIndex"/>
      <element name="TTabSheet.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TTabSheet.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TTabSheet.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TTabSheet.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TTabSheet.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TTabSheet.TabVisible" link="#lcl.comctrls.TCustomPage.TabVisible"/>
      <element name="TTabSheet.Top" link="#LCL.Controls.TControl.Top"/>
      <element name="TTabSheet.Width" link="#LCL.Controls.TControl.Width"/>

      <element name="TPageControl">
        <short>
          <var>TPageControl</var> - provides a series of tabs along the edge of a multi-page component to allow selection of one of the pages (TTabSheet) of the component
        </short>
        <descr>
          <p>
            <var>TPageControl</var> provides a series of tabs along an edge of a multi-page component to allow selection of one of the pages (<var>TTabSheet</var>) defined for the component.
          </p>
          <p>
            To use <var>TPageControl</var>, select its icon from the Common Controls tab of the IDE Component Palette and place it at the desired location on the Form.
          </p>
          <p>
            Use the Form Designer and Object Inspector to adjust its shape, size, alignment, anchoring, docking and other properties, then select the object and right click with the mouse to bring up a pop-up menu whose first item is 'AddPage'. After you have added as many pages as you need, the individual pages can be edited by selecting <var>ActivePage</var> in the Object Inspector choosing the page required and editing its properties.
          </p>
          <p>
            While a given page is selected, it is also possible to drop other controls (such as buttons, memo boxes etc) on to the page from the Component Palette.
          </p>
          <p>
            Inherits most of its properties from <link id="#lcl.comctrls.TCustomTabControl">TCustomTabControl</link>
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.Multi-PageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TPageControl.FPageToUndock"/>

      <element name="TPageControl.GetActivePageIndex">
        <short>Gets the value for the ActivePageIndex property</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePageIndex"/>
        </seealso>
      </element>
      <element name="TPageControl.GetActivePageIndex.Result">
        <short>Value for the property</short>
      </element>

      <element name="TPageControl.GetActiveTabSheet">
        <short>Gets the value for the ActivePage property</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePage"/>
        </seealso>
      </element>
      <element name="TPageControl.GetActiveTabSheet.Result">
        <short>Value for the property</short>
      </element>

      <element name="TPageControl.GetTabSheet">
        <short>Gets the value for the Pages property</short>
        <descr/>
        <seealso>
          <link id="TPageControl.Pages"/>
        </seealso>
      </element>
      <element name="TPageControl.GetTabSheet.Result">
        <short>Value for the property</short>
      </element>
      <element name="TPageControl.GetTabSheet.Index">
        <short>Ordinal position for the page or tabsheet requested in the method</short>
      </element>

      <element name="TPageControl.SetActivePageIndex">
        <short>Sets the value for the ActivePageIndex property</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePageIndex"/>
        </seealso>
      </element>
      <element name="TPageControl.SetActivePageIndex.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TPageControl.SetActiveTabSheet">
        <short>Sets the value for the ActivePage property</short>
        <descr/>
        <seealso>
          <link id="TPageControl.ActivePage"/>
        </seealso>
      </element>
      <element name="TPageControl.SetActiveTabSheet.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TPageControl.FindPageWithDockClient">
        <short>
          Finds the tabsheet in the Pages property which is the parent for the control specified in Client
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.FindPageWithDockClient.Result">
        <short/>
      </element>
      <element name="TPageControl.FindPageWithDockClient.Client">
        <short/>
      </element>

      <element name="TPageControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TPageControl.GetPageClass">
        <short>
          Gets the class type used to create a new tabsheet (or page) for the page control
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.GetPageClass.Result">
        <short/>
      </element>

      <element name="TPageControl.DoAddDockClient">
        <short>
          <var>DoAddDockClient</var> creates a new TabSheet in the PageControl, places the client on it and aligns it
        </short>
        <descr>
          Client cannot be added to TPageControl itself but new TabSheet should be added and client placed onto it.
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoAddDockClient">TWinControl.DoAddDockClient</link>
        </seealso>
      </element>

      <element name="TPageControl.DockOver" link="#LCL.Controls.TWinControl.DockOver">
        <short>Called to check whether this control allows docking and where</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.DockOver.Source">
        <short/>
      </element>
      <element name="TPageControl.DockOver.X">
        <short/>
      </element>
      <element name="TPageControl.DockOver.Y">
        <short/>
      </element>
      <element name="TPageControl.DockOver.State">
        <short/>
      </element>
      <element name="TPageControl.DockOver.Accept">
        <short/>
      </element>

      <element name="TPageControl.DoRemoveDockClient">
        <short>
          <var>DoRemoveDockClient</var> - frees the page which is being undocked
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoRemoveDockClient">TWinControl.DoRemoveDockClient</link>
        </seealso>
      </element>

      <element name="TPageControl.DoUndockClientMsg" link="#LCL.Controls.TWinControl.DoUndockClientMsg"/>

      <element name="TPageControl.ChildClassAllowed" link="#LCL.Controls.TWinControl.ChildClassAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.ChildClassAllowed.Result">
        <short/>
      </element>
      <element name="TPageControl.ChildClassAllowed.ChildClass">
        <short/>
      </element>

      <element name="TPageControl.FindNextPage">
        <short>
          <var>FindNextPage</var> - returns the next page (<var>TTabSheet</var>) in the sequence
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TPageControl.FindNextPage.Result">
        <short/>
      </element>
      <element name="TPageControl.FindNextPage.CurPage">
        <short/>
      </element>
      <element name="TPageControl.FindNextPage.GoForward">
        <short/>
      </element>
      <element name="TPageControl.FindNextPage.CheckTabVisible">
        <short/>
      </element>

      <element name="TPageControl.SelectNextPage">
        <short>
          <var>SelectNextPage</var> - checking that its tab is visible
        </short>
        <descr>
          <p>If GoForward is True, goes to next (higher index) page;</p>
          <p>if False, goes to previous (lower index)</p>
          <p>If <var>CheckTabVisible</var> is True, will only move if the tab is visible</p>
        </descr>
        <seealso/>
      </element>
      <element name="TPageControl.SelectNextPage.GoForward">
        <short/>
      </element>
      <element name="TPageControl.SelectNextPage.CheckTabVisible">
        <short/>
      </element>

      <element name="TPageControl.IndexOfTabAt" link="#lcl.comctrls.TCustomTabControl.IndexOfTabAt"/>
      <element name="TPageControl.IndexOfTabAt.Result"/>
      <element name="TPageControl.IndexOfTabAt.X"/>
      <element name="TPageControl.IndexOfTabAt.Y"/>
      <element name="TPageControl.IndexOfTabAt.P"/>

      <element name="TPageControl.IndexOfPageAt" link="#lcl.comctrls.TCustomTabControl.IndexOfPageAt"/>
      <element name="TPageControl.IndexOfPageAt.Result"/>
      <element name="TPageControl.IndexOfPageAt.X"/>
      <element name="TPageControl.IndexOfPageAt.Y"/>
      <element name="TPageControl.IndexOfPageAt.P"/>

      <element name="TPageControl.AddTabSheet">
        <short>Convenience routine used to make the TPageControl more intuitive to use</short>
        <descr/>
        <seealso>
          <link id="TTabSheet.PageControl"/>
          <link id="TPageControl.Pages"/>
          <link id="TPageControl.ActivePage"/>
          <link id="TPageControl.GetPageClass"/>
        </seealso>
      </element>
      <element name="TPageControl.AddTabSheet.Result">
        <short>Page class instance created in the method</short>
      </element>

      <element name="TPageControl.ActivePageIndex">
        <short>
          <var>ActivePageIndex</var> - index value of currently selected (active) page
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TPageControl.Pages">
        <short>
          <var>Pages</var> - the actual Pages (<var>TTabSheet</var>) that comprise the component
        </short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Pages"/>
        </seealso>
      </element>
      <element name="TPageControl.Pages.Index">
        <short/>
      </element>

      <element name="TPageControl.ActivePage">
        <short>
          <var>ActivePage</var> - the currently selected active page (<var>TTabSheet</var>)
        </short>
        <descr>
          <p>
            <var>ActivePage</var> - the currently selected active page (<var>TTabSheet</var>).
          </p>
          <remark>
            Please note that the property is implemented with a type that differs from   <var>TCustomTabControl</var>, where <var>ActivePage</var> is defined as a <var>String</var>.
          </remark>
        </descr>
        <seealso/>
      </element>

      <element name="TPageControl.OnGetDockCaption" link="#LCL.Controls.TWinControl.OnGetDockCaption"/>

      <element name="TPageControl.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TPageControl.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TPageControl.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TPageControl.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TPageControl.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TPageControl.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TPageControl.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TPageControl.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TPageControl.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TPageControl.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TPageControl.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TPageControl.HotTrack" link="#lcl.comctrls.TCustomTabControl.HotTrack"/>
      <element name="TPageControl.Images" link="#lcl.comctrls.TCustomTabControl.Images"/>
      <element name="TPageControl.ImagesWidth" link="#lcl.comctrls.TCustomTabControl.ImagesWidth"/>
      <element name="TPageControl.MultiLine" link="#lcl.comctrls.TCustomTabControl.MultiLine"/>
      <element name="TPageControl.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TPageControl.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TPageControl.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TPageControl.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TPageControl.RaggedRight" link="#lcl.comctrls.TCustomTabControl.RaggedRight"/>
      <element name="TPageControl.ScrollOpposite" link="#lcl.comctrls.TCustomTabControl.ScrollOpposite"/>
      <element name="TPageControl.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TPageControl.ShowTabs" link="#lcl.comctrls.TCustomTabControl.ShowTabs"/>
      <element name="TPageControl.Style" link="#lcl.comctrls.TCustomTabControl.Style"/>
      <element name="TPageControl.TabHeight" link="#lcl.comctrls.TCustomTabControl.TabHeight"/>
      <element name="TPageControl.TabIndex" link="#lcl.comctrls.TCustomTabControl.TabIndex"/>

      <element name="TPageControl.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TPageControl.TabPosition" link="#lcl.comctrls.TCustomTabControl.TabPosition"/>
      <element name="TPageControl.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TPageControl.TabWidth" link="#lcl.comctrls.TCustomTabControl.TabWidth"/>
      <element name="TPageControl.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TPageControl.OnChange">
        <short><var>OnChange</var> - Occurs immediately after a tab is selected.</short>
        <descr>Occurs immediately after a tab is selected.</descr>
        <seealso/>
      </element>

      <element name="TPageControl.OnChanging" link="#lcl.comctrls.TCustomTabControl.OnChanging"/>
      <element name="TPageControl.OnCloseTabClicked" link="#lcl.comctrls.TCustomTabControl.OnCloseTabClicked"/>
      <element name="TPageControl.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TPageControl.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TPageControl.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TPageControl.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TPageControl.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TPageControl.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TPageControl.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TPageControl.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TPageControl.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TPageControl.OnGetImageIndex" link="#lcl.comctrls.TCustomTabControl.OnGetImageIndex"/>
      <element name="TPageControl.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TPageControl.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TPageControl.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TPageControl.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TPageControl.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TPageControl.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TPageControl.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TPageControl.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TPageControl.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TPageControl.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TPageControl.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TPageControl.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TPageControl.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TPageControl.Options" link="#lcl.comctrls.TCustomTabControl.Options"/>

      <element name="TTabControlStrings">
        <short>
          <var>TTabControlStrings</var> - the Strings that appear on the tabs of <var>TTabControl</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.FHotTrack"/>
      <element name="TTabControlStrings.FImages"/>
      <element name="TTabControlStrings.FMultiLine"/>
      <element name="TTabControlStrings.FMultiSelect"/>
      <element name="TTabControlStrings.FOwnerDraw"/>
      <element name="TTabControlStrings.FRaggedRight"/>
      <element name="TTabControlStrings.FScrollOpposite"/>
      <element name="TTabControlStrings.FTabControl"/>
      <element name="TTabControlStrings.FUpdateCount"/>

      <element name="TTabControlStrings.GetTabIndex">
        <short>
          <var>GetTabIndex</var> - returns the Index value of the current Tab</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.GetTabIndex.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.SetHotTrack">
        <short>
          <var>SetHotTrack</var> - specifies the status of HotTrack</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetHotTrack.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetImages">
        <short>
          <var>SetImages</var> - specifies the list of images to be used</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetImages.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetMultiLine">
        <short>
          <var>SetMultiLine</var> - specifies whether multiline captions are to be used</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetMultiLine.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetMultiSelect">
        <short>
          <var>SetMultiSelect</var> - specifies whether MultiSelection is available</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetMultiSelect.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetOwnerDraw">
        <short>
          <var>SetOwnerDraw</var> - specifies whether an owner-derived drawing can be used</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetOwnerDraw.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetRaggedRight">
        <short>
          <var>SetRaggedRight</var> - specifies whether ragged-right (as opposed to right-justified) alignment is to be used</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetRaggedRight.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetScrollOpposite">
        <short>
          <var>SetScrollOpposite</var> - specifies whether scrollbars are to operate in the opposite sense to normal</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetScrollOpposite.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.SetTabIndex">
        <short>
          <var>SetTabIndex</var> - specifies an index value for a tab</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.SetTabIndex.AValue">
        <short/>
      </element>

      <element name="TTabControlStrings.Create">
        <short>
          <var>Create</var> - constructor for <var>TTabControlStrings</var>: calls inherited <var>Create</var> then sets many local defaults</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TTabControlStrings</var>. It calls  the inherited <var>Create</var> method then sets default values in the class instance.
          </p>
          <p>Among the defaults set are:</p>
          <p>
            HotTrack, Multiline, MultiSelect, OwnerDraw, RaggedRight, ScrollOpposite - all False; Tab height and width to zero
          </p>
        </descr>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTabControlStrings.Create.TheTabControl">
        <short/>
      </element>

      <element name="TTabControlStrings.GetHitTestInfoAt">
        <short>
          <var>GetHitTestInfoAt</var> - returns the results of a hit test at the specified location X, Y</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TTabControlStrings.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TTabControlStrings.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TTabControlStrings.GetSize">
        <short>Gets the size for the String displayed on a tab conrtol</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.GetSize.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.IndexOfTabAt">
        <short>
          <var>IndexOfTabAt</var> - returns the Index value of the tab at the specified location X, Y</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.IndexOfTabAt.Result">
        <short/>
      </element>
      <element name="TTabControlStrings.IndexOfTabAt.X">
        <short/>
      </element>
      <element name="TTabControlStrings.IndexOfTabAt.Y">
        <short/>
      </element>

      <element name="TTabControlStrings.RowCount">
        <short>
          <var>RowCount</var> - number of rows (for a multi-row string)</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.RowCount.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.TabRect">
        <short>
          <var>TabRec</var> - returns the coordinates of the rectangle for the tab with specified index
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.TabRect.Result">
        <short/>
      </element>
      <element name="TTabControlStrings.TabRect.Index">
        <short/>
      </element>

      <element name="TTabControlStrings.ImageListChange">
        <short>
          <var>ImageListChange</var> - method for changing the image list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.ImageListChange.Sender">
        <short/>
      </element>

      <element name="TTabControlStrings.ScrollTabs">
        <short>
          <var>ScrollTabs</var> - scrolls the tabs by an amount specified by <var>Delta</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.ScrollTabs.Delta">
        <short/>
      </element>

      <element name="TTabControlStrings.TabControlBoundsChange">
        <short>
          <var>TabControlBoundsChange</var> - method for dealing with a change in the bounds of a Tab Control
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.UpdateTabImages">
        <short>
          <var>UpdateTabImages</var> - bring the tab images up to date
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.BeginUpdate">
        <short>
          <var>BeginUpdate</var> increments the Update count
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.BeginUpdate">TStrings.BeginUpdate</link>
        </seealso>
      </element>

      <element name="TTabControlStrings.EndUpdate">
        <short>
          <var>EndUpdate</var> decrements the Update count
        </short>
        <descr/>
        <errors>An exception is raised if the Update count is zero</errors>
        <seealso>
          <link id="#rtl.classes.TStrings.EndUpdate">TStrings.EndUpdate</link>
        </seealso>
      </element>

      <element name="TTabControlStrings.IsUpdating">
        <short>
          <var>IsUpdating</var> - returns True if in the process of updating
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.IsUpdating.Result">
        <short/>
      </element>

      <element name="TTabControlStrings.TabControl">
        <short>The <var>TabControl</var> to which these strings apply</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.TabIndex">
        <short>
          <var>TabIndex</var> - the index of the current Tab
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.HotTrack">
        <short>
          <var>HotTrack</var> - the property whereby the item under the mouse pointer becomes emphasized
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.comctrls.TCustomListView.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>

      <element name="TTabControlStrings.Images">
        <short>The list of <var>Images</var> associated with the Strings for these tabs</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.MultiLine">
        <short>
          <var>MultiLine</var> - if True, multiple lines may be used in Tab strings
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.MultiSelect">
        <short>
          <var>MultiSelect</var> - if True, multiple tabs can be selected, for example by holding down Shift or Ctrl keys while selecting
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.OwnerDraw">
        <short>
          <var>OwnerDraw</var> - if True, Owner object (or calling routine) can specify drawing methods
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlStrings.RaggedRight">
        <short>
          <var>RaggedRight</var> - if True, strings are un-justified or un-aligned with ragged right margin
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlStrings.ScrollOpposite">
        <short>
          <var>ScrollOpposite</var> - if True, scrolling proceeds in opposite direction to usual
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl">
        <short/>
        <descr/>
        <seealso/>
        <notes><note>TODO TCustomTabControl, and fix all widgetsets</note></notes>
      </element>

      <element name="TNoteBookStringsTabControl.FHandleCreated"/>

      <element name="TNoteBookStringsTabControl.CreateHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl.AdjustXY">
        <short>Adjusts the specified coordinates to the ClientOrigin for the parent</short>
        <descr>
          <p>
            The adjustment amount is the difference between the <var>ClientOrigin</var> for the control and the <var>ClientOrigin</var> for the <var>Parent</var> of the control. The offset amounts are then applied to the values <var>X</var> and <var>Y</var>.
          </p>
          <p>
            Called from the <var>DragDrop</var>, <var>DragOver</var>, <var>MouseMove</var>, <var>MouseDown</var>, and <var>MouseUp</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TNoteBookStringsTabControl.DragDrop"/>
          <link id="TNoteBookStringsTabControl.DragOver"/>
          <link id="TNoteBookStringsTabControl.MouseMove"/>
          <link id="TNoteBookStringsTabControl.MouseDown"/>
          <link id="TNoteBookStringsTabControl.MouseUp"/>
        </seealso>
      </element>
      <element name="TNoteBookStringsTabControl.AdjustXY.X">
        <short>Horizontal coordinate adjusted in the method</short>
      </element>
      <element name="TNoteBookStringsTabControl.AdjustXY.Y">
        <short>Vertical coordinate adjusted in the method</short>
      </element>

      <element name="TNoteBookStringsTabControl.DoStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.DoStartDrag.DragObject">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.DragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.DragDrop.Source">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragDrop.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragDrop.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.DragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.Source">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.Y">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.State">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.DragOver.Accept">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.Button">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.Shift">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseDown.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseMove.Shift">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseMove.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseMove.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.Button">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.Shift">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.X">
        <short/>
      </element>
      <element name="TNoteBookStringsTabControl.MouseUp.Y">
        <short/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl.MouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControl.GetPopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short>
          Gets the value for the PopupMenu property
        </short>
        <descr>
          <p>
            <var>GetPopupMenu</var> is an overridden <var>TPopupMenu</var> function which implements the read access specifier for the <var>PopupMenu</var> property. The return value contains the TPopupMenu instance from the <var>Parent</var> control when it is derived from TTabControl and <var>Options</var> contains the value <var>nboHidePageListPopup</var>. Otherwise, the inherited method in <var>TControl</var> is called to get the popup menu instance for the control.
          </p>
        </descr>
        <seealso>
          <link id="TTabControl"/>
          <link id="TPageControl.Options"/>
          <link id="#lcl.menus.TPopupMenu">TPopupMenu</link>
          <link id="#lcl.controls.TControl.GetPopupMenu">TControl.GetPopupMenu</link>
          <link id="#lcl.controls.TControl.PopupMenu">TControl.PopupMenu</link>
          <link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
        </seealso>
      </element>
      <element name="TNoteBookStringsTabControl.GetPopupMenu.Result">
        <short>Value for the property</short>
      </element>

      <element name="TNoteBookStringsTabControl.WSRegisterClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNoteBookStringsTabControlClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlNoteBookStrings">
        <short>
          <var>TTabControlNoteBookStrings</var> - instance of <var>TTabControlStrings</var> for use with a <var>TNoteBook</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlNoteBookStrings.FNoteBook"/>
      <element name="TTabControlNoteBookStrings.FInHandleCreated"/>

      <element name="TTabControlNoteBookStrings.GetStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.GetStyle.Result">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.SetStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.SetStyle.AValue">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetInternalTabControllClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.GetInternalTabControllClass.Result">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Get">
        <short>
          <var>Get</var> returns the text string found on the indexed page
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStringList.Get">TStringList.Get</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Get.Result">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.Get.Index">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetCount" link="#rtl.Classes.TStringList.GetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.GetCount.Result">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetObject">
        <short>
          <var>GetObject</var> returns the indexed object from the paged notebook
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStringList.GetObject">TStringList.GetObject</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.GetObject.Result">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.GetObject.Index">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetTabIndex" link="#LCL.ComCtrls.TTabControlStrings.GetTabIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.GetTabIndex.Result">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetTabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.GetTabPosition.Result">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.NBChanging">
        <short>
          <var>NBChanging</var> - method for dealing with the process for change in a NoteBook
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBChanging.Sender">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.NBChanging.AllowChange">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.NBGetImageIndex">
        <short>
          <var>NBGetImageIndex</var> - obtains the Image Index associated with a given Tab Index in the NoteBook
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.Sender">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.TheTabIndex">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.NBGetImageIndex.ImageIndex">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.NBPageChanged">
        <short>
          <var>NBPageChanged</var> - Method for dealing with a NoteBook page that has changed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBPageChanged.Sender">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.NBHandleCreated">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.NBHandleCreated.Sender">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Put">
        <short>
          <var>Put</var> writes the supplied string to the indexed page of the notebook
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStringList.Put">TStringList.Put</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Put.Index">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.Put.S">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.PutObject">
        <short>
          <var>PutObject</var> stores the supplied object at the indexed place in the paged notebook
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStringList.PutObject">TStringList.PutObject</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.PutObject.Index">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.PutObject.AObject">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.SetImages">
        <short>
          <var>SetImages</var> - if the supplied ImageList is of correct type, stores it in the notebook <var>Images</var> area
        </short>
        <descr/>
        <seealso>
          <link id="TTabControlStrings.SetImages"/>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.SetImages.AValue">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.SetMultiLine">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.SetMultiLine.AValue">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.SetTabIndex" link="#LCL.ComCtrls.TTabControlStrings.SetTabIndex">
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControlNoteBookStrings.SetTabIndex.AValue">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.SetUpdateState">
        <short>
          <var>SetUpdateState</var> - if Updating is True, calls <var>BeginUpdate</var>; otherwise calls <var>EndUpdate</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStringList.SetUpdateState">TStringList.SetUpdateState</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.SetUpdateState.Updating">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Create">
        <short>
          <var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: calls inherited <var>Create</var> then sets some default Actions
        </short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: calls inherited <var>Create</var> then sets some default Actions.
          </p>
          <p>
            Among the actions set are: OnGetImageIndex, OnChanging, OnChange. Notebook is created with a nominated parent.
          </p>
        </descr>
        <seealso>
          <link id="TTabControlStrings.Create"/>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Create.TheTabControl">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTabControlNoteBookStrings</var>: frees NoteBook then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TStrings.Destroy">TStrings.Destroy</link>
        </seealso>
      </element>

      <element name="TTabControlNoteBookStrings.Clear">
        <short>
          <var>Clear</var> calls the <var>Clear</var> method for the client Notebook
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Clear">TStrings.Clear</link>
        </seealso>
      </element>

      <element name="TTabControlNoteBookStrings.Delete">
        <short>
          <var>Delete</var> calls the <var>Delete</var> method for the client NoteBook
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Delete">TStrings.Delete</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Delete.Index">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.Insert">
        <short>
          <var>Insert</var> calls the <var>Insert</var> method for the client NoteBook
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Insert">TStrings.Insert</link>
        </seealso>
      </element>
      <element name="TTabControlNoteBookStrings.Insert.Index">
        <short/>
      </element>
      <element name="TTabControlNoteBookStrings.Insert.S">
        <short/>
      </element>

      <element name="TTabControlNoteBookStrings.GetSize" link="#lcl.comctrls.TTabControlStrings.GetSize"/>
      <element name="TTabControlNoteBookStrings.GetSize.Result"/>

      <element name="TTabControlNoteBookStrings.TabControlBoundsChange" link="#LCL.ComCtrls.TTabControlStrings.TabControlBoundsChange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlNoteBookStrings.IndexOfTabAt" link="#lcl.comctrls.TTabControlStrings.IndexOfTabAt"/>
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.Result"/>
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.X"/>
      <element name="TTabControlNoteBookStrings.IndexOfTabAt.Y"/>

      <element name="TTabControlNoteBookStrings.TabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlNoteBookStrings.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControlNoteBookStrings.NoteBook">
        <short>
          The <var>NoteBook</var> for which the tab strings are to be used
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl">
        <short>
          <var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
        </short>
        <descr>
          <p>
            <var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a display area; selection of a <var>Tab</var> governs the contents of the <var>DisplayRect</var>
          </p>
          <p>
            Use <var>TTabControl </var>by selecting its icon from the Common Controls tab of the IDE Component Palette and placing it at the desired location on the <var>Form</var>. Use the Form Designer and Object Inspector to adjust its shape, size, alignment, anchoring and other properties. Tabs can be added or removed from the component by selecting it, then right-clicking with the mouse to get a pop-up menu whose first item is 'Add Tab'. Once created, the Tabs can be edited by selecting the <var>Tabs</var> entry in the Object Inspector and selecting the ellipsis (...) which will cause a pop-up String editor to appear. The tabs can be given new captions, moved up and down the list or removed altogether as required.
          </p>
          <p>
            Each Tab has an Index (starting from 0) and this index can be used to specify an entry from <var>Images</var> for display in the <var>DisplayRect</var>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.Multi-PageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TTabControl.FImageChangeLink"/>
      <element name="TTabControl.FOnChange"/>
      <element name="TTabControl.FOnChangeNeeded"/>
      <element name="TTabControl.FTabControlCreating"/>
      <element name="TTabControl.FTabs"/>
      <element name="TTabControl.FCanvas"/>

      <element name="TTabControl.AdjustDisplayRect">
        <short>
          Adjusts the display rectangle to reserve space for an internal border drawn on the control
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.AdjustDisplayRect.ARect">
        <short/>
      </element>

      <element name="TTabControl.GetDisplayRect">
        <short>Gets the value for the DisplayRect property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.DisplayRect"/>
        </seealso>
      </element>
      <element name="TTabControl.GetDisplayRect.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetHotTrack">
        <short>Gets the value for the HotTrack property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.HotTrack"/>
        </seealso>
      </element>
      <element name="TTabControl.GetHotTrack.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetMultiLine">
        <short>Gets the value for the MultiLine property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiLine"/>
        </seealso>
      </element>
      <element name="TTabControl.GetMultiLine.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetMultiSelect">
        <short>Gets the value for the MultiSelect property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiSelect"/>
        </seealso>
      </element>
      <element name="TTabControl.GetMultiSelect.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetOwnerDraw">
        <short>Gets the value for the OwnerDraw property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.OwnerDraw"/>
        </seealso>
      </element>
      <element name="TTabControl.GetOwnerDraw.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetRaggedRight">
        <short>Gets the value for the RaggedRight property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.RaggedRight"/>
        </seealso>
      </element>
      <element name="TTabControl.GetRaggedRight.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetScrollOpposite">
        <short>Gets the value for the ScrollOpposite property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.ScrollOpposite"/>
        </seealso>
      </element>
      <element name="TTabControl.GetScrollOpposite.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetTabIndex">
        <short>Gets the value for the TabIndex property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabControl.GetTabIndex.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.GetTabRectWithBorder">
        <short>
          Gets a rectangle with the space reserved for the tabs on the control including border space
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.GetTabRectWithBorder.Result">
        <short/>
      </element>

      <element name="TTabControl.GetTabStop">
        <short>Gets the value for the TabStop property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabStop"/>
        </seealso>
      </element>
      <element name="TTabControl.GetTabStop.Result">
        <short>Value for the property</short>
      </element>

      <element name="TTabControl.SetHotTrack">
        <short>Sets the value for the HotTrack property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.HotTrack"/>
        </seealso>
      </element>
      <element name="TTabControl.SetHotTrack.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetImages">
        <short>Sets the value for the Images property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.Images"/>
        </seealso>
      </element>
      <element name="TTabControl.SetImages.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetMultiLine">
        <short>Sets the value for the MultiLine property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiLine"/>
        </seealso>
      </element>
      <element name="TTabControl.SetMultiLine.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetMultiSelect">
        <short>Sets the value for the MultiSelect property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.MultiSelect"/>
        </seealso>
      </element>
      <element name="TTabControl.SetMultiSelect.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetOwnerDraw">
        <short>Sets the value for the OwnerDraw property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.OwnerDraw"/>
        </seealso>
      </element>
      <element name="TTabControl.SetOwnerDraw.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetRaggedRight">
        <short>Sets the value for the RaggedRight property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.RaggedRight"/>
        </seealso>
      </element>
      <element name="TTabControl.SetRaggedRight.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetScrollOpposite">
        <short>Sets the value for the ScrollOpposite property</short>
        <short/>
        <descr/>
        <seealso>
          <link id="TTabControl.ScrollOpposite"/>
        </seealso>
      </element>
      <element name="TTabControl.SetScrollOpposite.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetStyle">
        <short>Sets the value for the Style property</short>
        <short/>
        <descr/>
        <seealso>
          <link id="TTabControl.Style"/>
          <link id="TCustomTabControl.SetStyle"/>
        </seealso>
      </element>
      <element name="TTabControl.SetStyle.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetTabHeight">
        <short>Sets the Height for tabs displayed on the control</short>
        <descr>
          <p>
            <var>SetTabHeight</var> is used to set the height for the tabs displayed on the control to the value in <var>AValue</var>. SetTabHeight calls <var>GetCapabilities</var> to determine if the value <var>nbcTabsSizeable</var> is included in the capabilties for the control. No actions are performed in the method when nbcTabsSizeable is <b>not</b> present in the controls capabilities list.
          </p>
          <p>
            SetTabHeight propogates the new tab height to the Notebook which contains the <var>Tabs</var> in the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.SetTabHeight.AValue">
        <short>New height for the tabs displayed on the control</short>
      </element>

      <element name="TTabControl.SetTabPosition">
        <short>Sets the value for the TabPosition property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabPosition"/>
          <link id="TCustomTabControl.SetTabPosition"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabPosition.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetTabs">
        <short>Sets the value for the Tabs property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.Tabs"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabs.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetTabStop">
        <short>Sets the value for the TabStop property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabStop"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabStop.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.SetTabWidth">
        <short>Sets the value for the TabWidth property</short>
        <descr/>
        <seealso>
          <link id="TTabControl.TabWidth"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabWidth.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.WSRegisterClass">
        <short/>
        <descr>
          <p>
            <var>WSRegisterClass</var> is an overridden class procedure used to register the widgetset class used to create new instances of the class. WSRegisterClass calls the inherited method, and calls RegisterPropertyToSkip to omit the <var>OnDrawTab</var> property when the component is loaded at run-time. OnDrawTab was used in an older version of the Lazarus LCL.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.SetOptions">
        <short>Sets the value for the Options property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.Options"/>
          <link id="TCustomTabControl.SetOptions"/>
        </seealso>
      </element>
      <element name="TTabControl.SetOptions.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.AddRemovePageHandle">
        <short/>
        <descr>
          <p>
            An empty implementation in TTabControl; there are no pages, so no handle is required.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.AddRemovePageHandle.APage">
        <short/>
      </element>

      <element name="TTabControl.CanChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.CanChange.Result">
        <short/>
      </element>

      <element name="TTabControl.CanShowTab">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.CanShowTab.Result">
        <short/>
      </element>
      <element name="TTabControl.CanShowTab.ATabIndex">
        <short/>
      </element>

      <element name="TTabControl.Change">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl.CreateWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl.DestroyHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.Notification.AComponent">
        <short/>
      </element>
      <element name="TTabControl.Notification.Operation">
        <short/>
      </element>

      <element name="TTabControl.SetDragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.SetDragMode.Value">
        <short/>
      </element>

      <element name="TTabControl.SetTabIndex">
        <short>Sets the value for the TabIndex property</short>
        <descr/>
        <seealso>
          <link id="TCustomTabControl.TabIndex"/>
        </seealso>
      </element>
      <element name="TTabControl.SetTabIndex.Value">
        <short>New value for the property</short>
      </element>

      <element name="TTabControl.UpdateTabImages">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl.ImageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.ImageListChange.Sender">
        <short/>
      </element>

      <element name="TTabControl.DoSetBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.DoSetBounds.ALeft">
        <short/>
      </element>
      <element name="TTabControl.DoSetBounds.ATop">
        <short/>
      </element>
      <element name="TTabControl.DoSetBounds.AWidth">
        <short/>
      </element>
      <element name="TTabControl.DoSetBounds.AHeight">
        <short/>
      </element>

      <element name="TTabControl.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TTabControl.PaintWindow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.PaintWindow.DC">
        <short/>
      </element>

      <element name="TTabControl.Paint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl.AdjustDisplayRectWithBorder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.AdjustDisplayRectWithBorder.ARect">
        <short/>
      </element>

      <element name="TTabControl.AdjustClientRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.AdjustClientRect.ARect">
        <short/>
      </element>

      <element name="TTabControl.CreateTabNoteBookStrings">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.CreateTabNoteBookStrings.Result">
        <short/>
      </element>

      <element name="TTabControl.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance. Create calls the inherited constructor, and sets the default values for the following properties in the class instance:
          </p>
          <ul>
            <li>Tabs</li>
            <li>TabStop</li>
            <li>BorderWidth</li>
          </ul>
          <p>
            Create calls GetControlClassDefaultSize and sets the initial bounds for the control using SetInitialBounds. Create allocates a TControlCanvas instance that is used in the Canvas property.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TTabControl.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy ensures that resources allocated in the class instance are freed, including:
          </p>
          <ul>
            <li>Buttons (and the associated toolbar)</li>
            <li>Internal ImageChangeLinks</li>
          </ul>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.IndexOfTabAt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.IndexOfTabAt.Result">
        <short/>
      </element>
      <element name="TTabControl.IndexOfTabAt.X">
        <short/>
      </element>
      <element name="TTabControl.IndexOfTabAt.Y">
        <short/>
      </element>
      <element name="TTabControl.IndexOfTabAt.P">
        <short/>
      </element>

      <element name="TTabControl.GetHitTestInfoAt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TTabControl.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TTabControl.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TTabControl.GetImageIndex">
        <short>
          Signals the OnGetImageIndex event handler to get an image for the specified tab index
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.GetImageIndex.Result">
        <short/>
      </element>
      <element name="TTabControl.GetImageIndex.ATabIndex">
        <short/>
      </element>

      <element name="TTabControl.IndexOfTabWithCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.IndexOfTabWithCaption.Result">
        <short/>
      </element>
      <element name="TTabControl.IndexOfTabWithCaption.TabCaption">
        <short/>
      </element>

      <element name="TTabControl.TabRect">
        <short>Gets the rectangle where the tab at the specified psition is drawn</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.TabRect.Result">
        <short/>
      </element>
      <element name="TTabControl.TabRect.Index">
        <short/>
      </element>

      <element name="TTabControl.RowCount">
        <short>Gets the number of rows needed to render the Tabs on the control</short>
        <descr>
          Always returns 1 in TTabControl.
        </descr>
        <seealso/>
      </element>
      <element name="TTabControl.RowCount.Result">
        <short></short>
      </element>

      <element name="TTabControl.ScrollTabs">
        <short>
          Scrolls the tabs on the control horizontally by the value specified in Delta
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.ScrollTabs.Delta">
        <short/>
      </element>

      <element name="TTabControl.BeginUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl.EndUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTabControl.IsUpdating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTabControl.IsUpdating.Result">
        <short/>
      </element>

      <element name="TTabControl.DisplayRect">
        <short/>
        <descr>
          <p>
            <var>DisplayRect</var> is a read-only <var>TRect</var> property which contains the display area for the page in the tabbed control. It uses the client rectangle for the control as the  value for the property. Use <var>TabRect</var> to get the display area for the tab in the tabbed control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTabControl.HotTrack" link="#LCL.ComCtrls.TCustomTabControl.HotTrack"/>
      <element name="TTabControl.Images" link="#LCL.ComCtrls.TCustomTabControl.Images"/>
      <element name="TTabControl.ImagesWidth" link="#lcl.comctrls.TCustomTabControl.ImagesWidth"/>
      <element name="TTabControl.MultiLine" link="#lcl.comctrls.TCustomTabControl.MultiLine"/>
      <element name="TTabControl.MultiSelect" link="#lcl.comctrls.TCustomTabControl.MultiSelect"/>
      <element name="TTabControl.OnChange" link="#lcl.comctrls.TCustomTabControl.OnChange"/>
      <element name="TTabControl.OnChanging" link="#lcl.comctrls.TCustomTabControl.OnChanging"/>
      <element name="TTabControl.OnGetImageIndex" link="#lcl.comctrls.TCustomTabControl.OnGetImageIndex"/>
      <element name="TTabControl.OwnerDraw" link="#lcl.comctrls.TCustomTabControl.OwnerDraw"/>
      <element name="TTabControl.RaggedRight" link="#lcl.comctrls.TCustomTabControl.RaggedRight"/>
      <element name="TTabControl.ScrollOpposite" link="#lcl.comctrls.TCustomTabControl.ScrollOpposite"/>
      <element name="TTabControl.Style" link="#lcl.comctrls.TCustomTabControl.Style"/>
      <element name="TTabControl.TabPosition" link="#lcl.comctrls.TCustomTabControl.TabPosition"/>
      <element name="TTabControl.TabHeight" link="#lcl.comctrls.TCustomTabControl.TabHeight"/>
      <element name="TTabControl.TabIndex" link="#lcl.comctrls.TCustomTabControl.TabIndex"/>
      <element name="TTabControl.Tabs" link="#lcl.comctrls.TCustomTabControl.Tabs"/>
      <element name="TTabControl.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TTabControl.TabWidth" link="#lcl.comctrls.TCustomTabControl.TabWidth"/>
      <element name="TTabControl.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TTabControl.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TTabControl.BIdiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TTabControl.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TTabControl.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TTabControl.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TTabControl.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TTabControl.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TTabControl.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TTabControl.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TTabControl.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TTabControl.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TTabControl.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TTabControl.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TTabControl.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TTabControl.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TTabControl.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TTabControl.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TTabControl.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TTabControl.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TTabControl.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TTabControl.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TTabControl.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TTabControl.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TTabControl.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TTabControl.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TTabControl.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TTabControl.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TTabControl.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TTabControl.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TTabControl.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TTabControl.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TTabControl.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TTabControl.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TTabControl.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TTabControl.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TTabControl.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TTabControl.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TTabControl.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TTabControl.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TTabControl.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TCustomDrawTarget">
        <short>
          <var>TCustomDrawTarget</var> - enumerated type controlling how a target object is drawn
        </short>
      </element>
      <element name="TCustomDrawTarget.dtControl">
        <short>Draw the entire control</short>
      </element>
      <element name="TCustomDrawTarget.dtItem">
        <short>Draw one item (or line in report mode)</short>
      </element>
      <element name="TCustomDrawTarget.dtSubItem">
        <short>Draw one subitem (except subitem 0 which is drawn by dtItem)</short>
      </element>

      <element name="TCustomDrawStage">
        <short>
          <var>TCustomDrawStage</var>  a series of constants to define the drawing stages
        </short>
        <descr/>
      </element>
      <element name="TCustomDrawStage.cdPrePaint">
        <short/>
      </element>
      <element name="TCustomDrawStage.cdPostPaint">
        <short/>
      </element>
      <element name="TCustomDrawStage.cdPreErase">
        <short/>
      </element>
      <element name="TCustomDrawStage.cdPostErase">
        <short/>
      </element>

      <element name="TCustomDrawStateFlag">
        <short>
          <var>TCustomDrawStateFlag</var> - series of flags to define the DrawState</short>
        <descr>
          <p>
            <var>TCustomDrawStateFlag</var> is an enumerated type with values repersenting the drawing states available in custom-drawn controls. Values from the enumeration are stored in the <var>TCustomDrawState</var> set type passed as an argument to event handlers in list view and tree view controls, and stored internally in the controls.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawState"/>
          <link id="TLVCustomDrawItemEvent"/>
          <link id="TLVCustomDrawSubItemEvent"/>
          <link id="TLVAdvancedCustomDrawItemEvent"/>
          <link id="TLVAdvancedCustomDrawSubItemEvent"/>
          <link id="TTVCustomDrawItemEvent"/>
          <link id="TTVAdvancedCustomDrawItemEvent"/>
        </seealso>
      </element>
      <element name="TCustomDrawStateFlag.cdsSelected">
        <short>Control is drawn using the selected style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsGrayed">
        <short>Control is drawn using the grayed or unselected style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsDisabled">
        <short>Control is drawn using the disabled style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsChecked">
        <short>Control is drawn using the checked style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsFocused">
        <short>Control is drawn using the focused style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsDefault">
        <short>Control is drawn using the default style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsHot">
        <short>Control is drawn using the hot tracking style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsMarked">
        <short>Control is drawn using the marked (multiselected) style</short>
      </element>
      <element name="TCustomDrawStateFlag.cdsIndeterminate">
        <short>Control is drawn using the indeterminate state style</short>
      </element>

      <element name="TCustomDrawState">
        <short>
          <var>TCustomDrawState</var>  - set of <var>TCustomDrawStateFlag</var>
        </short>
        <descr>
          TCustomDrawState determines how a item will be drawn.
        </descr>
        <seealso>
          <link id="TCustomDrawStateFlag"/>
          <link id="TLVCustomDrawItemEvent"/>
          <link id="TLVCustomDrawSubItemEvent"/>
          <link id="TLVAdvancedCustomDrawItemEvent"/>
          <link id="TLVAdvancedCustomDrawSubItemEvent"/>
          <link id="TTVCustomDrawItemEvent"/>
          <link id="TTVAdvancedCustomDrawItemEvent"/>
        </seealso>
      </element>

      <element name="TCustomDrawResultFlag">
        <short>
          <var>TCustomDrawResultFlag</var> - enumerated type, a series of flags to signify the result of a drawing process
        </short>
      </element>
      <element name="TCustomDrawResultFlag.cdrSkipDefault">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyPostpaint">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyItemdraw">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifySubitemdraw">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyPosterase">
        <short/>
      </element>
      <element name="TCustomDrawResultFlag.cdrNotifyItemerase">
        <short/>
      </element>

      <element name="TCustomDrawResult">
        <short>
          <var>TCustomDrawResult</var> - set of <var>TCustomDrawResultFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TSortType">
        <short>
          <var>TSortType</var> - enumerated type, a series of constants signifying that there is no sorting or that sorting is according to data, test or both</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TSortType.stNone">
        <short/>
      </element>
      <element name="TSortType.stData">
        <short/>
      </element>
      <element name="TSortType.stText">
        <short/>
      </element>
      <element name="TSortType.stBoth">
        <short/>
      </element>

      <element name="TListItemState">
        <short>
          <var>TListItemState</var> - enumerated type denoting the state of a list item
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemState.lisCut">
        <short/>
      </element>
      <element name="TListItemState.lisDropTarget">
        <short/>
      </element>
      <element name="TListItemState.lisFocused">
        <short/>
      </element>
      <element name="TListItemState.lisSelected">
        <short/>
      </element>

      <element name="TListItemStates">
        <short>
          <var>TListItemStates</var> - set of <var>TListItemState</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItemFlag">
        <short>
          <var>TListItemFlag</var> - enumerated type, a flag denoting a list item is being destroyed or created
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemFlag.lifDestroying">
        <short/>
      </element>
      <element name="TListItemFlag.lifCreated">
        <short/>
      </element>

      <element name="TListItemFlags">
        <short>
          <var>TListItemFlags</var> - set of <var>TListItemFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDisplayCode">
        <short>
          <var>TDisplayCode</var> - enumerated type denoting how items are displayed
        </short>
      </element>
      <element name="TDisplayCode.drBounds">
        <short/>
      </element>
      <element name="TDisplayCode.drIcon">
        <short/>
      </element>
      <element name="TDisplayCode.drLabel">
        <short/>
      </element>
      <element name="TDisplayCode.drSelectBounds">
        <short/>
      </element>

      <element name="TIconArrangement">
        <short>Represents icon arrangement options in a list view control</short>
        <descr>
          <p>
            <var>TIconArrangement</var> is an enumerated type with values representing the icon arrangement options for a list view control.
          </p>
        </descr>
        <seealso>
          <link id="TIconOptions"/>
          <link id="TCustomListView"/>
        </seealso>
      </element>
      <element name="TIconArrangement.iaTop">
        <short>
          Icons are arranged from the top to the bottom, then left to right in the control
        </short>
      </element>
      <element name="TIconArrangement.iaLeft">
        <short>
          Icons are arranged from left to right, then top to bottom in the control
        </short>
      </element>

      <element name="TIconOptions">
        <short/>
        <descr>
          <p>
            <var>TIconOptions</var> is a <var>TPersistent</var> descendant which represents the text wrapping and icon layout settings in the <var>IconOptions</var> property in <var>TCustomListView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.IconOptions"/>
        </seealso>
      </element>

      <element name="TIconOptions.FListView"/>
      <element name="TIconOptions.FArrangement"/>

      <element name="TIconOptions.GetAutoArrange">
        <short>Gets the value for the AutoArrange property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.GetAutoArrange.Result">
        <short>Value for the property</short>
      </element>

      <element name="TIconOptions.GetWrapText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.GetWrapText.Result">
        <short/>
      </element>

      <element name="TIconOptions.SetArrangement">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.SetArrangement.Value">
        <short/>
      </element>

      <element name="TIconOptions.SetAutoArrange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.SetAutoArrange.Value">
        <short/>
      </element>

      <element name="TIconOptions.SetWrapText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.SetWrapText.Value">
        <short/>
      </element>

      <element name="TIconOptions.AssignTo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.AssignTo.Dest">
        <short/>
      </element>

      <element name="TIconOptions.GetOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.GetOwner.Result">
        <short/>
      </element>

      <element name="TIconOptions.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIconOptions.Create.AOwner">
        <short/>
      </element>

      <element name="TIconOptions.Arrangement">
        <short/>
        <descr>
          Arrangement is a TIconArrangement property.
          The default value for the property is iaTop.
        </descr>
        <seealso/>
      </element>

      <element name="TIconOptions.AutoArrange">
        <short/>
        <descr>
          AutoArrange is a Boolean property.
          The default value for the property is False.
        </descr>
        <seealso/>
      </element>

      <element name="TIconOptions.WrapText">
        <short/>
        <descr>
          WrapText is a Boolean property.
          The default value for the property is True.
        </descr>
        <seealso/>
      </element>

      <element name="TListItem">
        <short>
          Repesents the items created in TCustomListView and descendants
        </short>
        <descr>
          <p>
            <var>TListItem</var> is the ancestor class for the Items created in <var>TCustomListView</var> and <var>TListView</var>. Most properties are inherited from ancestors classes, like TPersistent and TObject.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TPersistent">TPersistent</link>
          <link id="#rtl.objects.TObject">TObject</link>
        </seealso>
      </element>

      <element name="TListItem.FOwner"/>
      <element name="TListItem.FFlags"/>
      <element name="TListItem.FSubItems"/>
      <element name="TListItem.FCaption"/>
      <element name="TListItem.FData"/>
      <element name="TListItem.FImageIndex"/>
      <element name="TListItem.FStateIndex"/>
      <element name="TListItem.FStates"/>
      <element name="TListItem.FChecked"/>

      <element name="TListItem.GetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetCaption.Result">
        <short/>
      </element>

      <element name="TListItem.GetChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetChecked.Result">
        <short/>
      </element>

      <element name="TListItem.GetLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetLeft.Result">
        <short/>
      </element>

      <element name="TListItem.GetListView">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetListView.Result">
        <short/>
      </element>

      <element name="TListItem.GetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetPosition.Result">
        <short/>
      </element>

      <element name="TListItem.GetState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetState.Result">
        <short/>
      </element>
      <element name="TListItem.GetState.ALisOrd">
        <short/>
      </element>

      <element name="TListItem.GetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetImageIndex.Result">
        <short/>
      </element>

      <element name="TListItem.GetIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetIndex.Result">
        <short/>
      </element>

      <element name="TListItem.GetStateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetStateIndex.Result">
        <short/>
      </element>

      <element name="TListItem.GetSubItemImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetSubItemImages.Result">
        <short/>
      </element>
      <element name="TListItem.GetSubItemImages.AIndex">
        <short/>
      </element>

      <element name="TListItem.GetSubItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetSubItems.Result">
        <short/>
      </element>

      <element name="TListItem.GetTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetTop.Result">
        <short/>
      </element>

      <element name="TListItem.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.WSUpdateAllowed.Result">
        <short/>
      </element>

      <element name="TListItem.WSUpdateText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSUpdateImages">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSUpdateChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSSetState">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.WSUpdateState">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.SetChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetChecked.AValue">
        <short/>
      </element>

      <element name="TListItem.SetState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetState.ALisOrd">
        <short/>
      </element>
      <element name="TListItem.SetState.AIsSet">
        <short/>
      </element>

      <element name="TListItem.SetData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetData.AValue">
        <short/>
      </element>

      <element name="TListItem.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetImageIndex.AValue">
        <short/>
      </element>

      <element name="TListItem.SetLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetLeft.AValue">
        <short/>
      </element>

      <element name="TListItem.SetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetCaption.AValue">
        <short/>
      </element>

      <element name="TListItem.SetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetPosition.AValue">
        <short/>
      </element>

      <element name="TListItem.SetStateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetStateIndex.AValue">
        <short/>
      </element>

      <element name="TListItem.SetSubItemImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetSubItemImages.AIndex">
        <short/>
      </element>
      <element name="TListItem.SetSubItemImages.AValue">
        <short/>
      </element>

      <element name="TListItem.SetSubItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetSubItems.AValue">
        <short/>
      </element>

      <element name="TListItem.SetTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SetTop.Value">
        <short/>
      </element>

      <element name="TListItem.IsEqual">
        <short>
          The current ListItem <var>IsEqual</var> to the item specified in the argument <var>AItem</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.IsEqual.Result">
        <short/>
      </element>
      <element name="TListItem.IsEqual.AItem">
        <short/>
      </element>

      <element name="TListItem.IsOwnerData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.IsOwnerData.Result">
        <short/>
      </element>

      <element name="TListItem.GetCheckedInternal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetCheckedInternal.Result">
        <short/>
      </element>

      <element name="TListItem.GetOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.GetOwner.Result">
        <short/>
      </element>

      <element name="TListItem.Assign">
        <short>
          <var>Assign</var> - if source has correct type, copies Caption, Data, ImageIndex and SubItems from source, otherwise calls inherited <var>Assign</var> which probably raises an exception
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TListItem.Assign.ASource">
        <short/>
      </element>

      <element name="TListItem.Create">
        <short>
          <var>Create</var> - constructor for <var>TListItem</var>: calls inherited <var>Create</var> then initializes flags, states, ImageIndex and SubItems
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TListItem.Create.AOwner">
        <short/>
      </element>

      <element name="TListItem.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TListItem</var>: frees SubItems, sets flags to signify destruction, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TListItem.Delete">
        <short>Remove an Item from the list</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.MakeVisible">
        <short>
          <var>MakeVisible</var> - render the item visible (if <var>PartialOK</var> is True, only part may be visible)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.MakeVisible.PartialOK">
        <short/>
      </element>

      <element name="TListItem.DisplayRect">
        <short>
          <var>DisplayRect</var> - returns the coordinates of a rectangle for displaying the current item
        </short>
        <descr>
          <p>
            <var>DisplayRect</var> - returns the coordinates of a rectangle for displaying the current item.
          </p>
          <p>
            Display codes can be: <var>drBounds</var>, <var>drIcon</var>, <var>drLabel</var>, <var>drSelectBounds</var>.
          </p>
        </descr>
      </element>
      <element name="TListItem.DisplayRect.Result">
        <short/>
      </element>
      <element name="TListItem.DisplayRect.Code">
        <short/>
      </element>

      <element name="TListItem.DisplayRectSubItem">
        <short>
          <var>DisplayRectSubItem</var> - returns the coordinates of a display rectangle for a specified sub-item
        </short>
        <descr>
          <p>
            <var>DisplayRectSubItem</var> - returns the coordinates of a display rectangle for a specified sub-item.
          </p>
          <p>
            Display codes can be: <var>drBounds</var>, <var>drIcon</var>, <var>drLabel</var>, <var>drSelectBounds</var>.
          </p>
        </descr>
      </element>
      <element name="TListItem.DisplayRectSubItem.Result">
        <short/>
      </element>
      <element name="TListItem.DisplayRectSubItem.SubItem">
        <short/>
      </element>
      <element name="TListItem.DisplayRectSubItem.Code">
        <short/>
      </element>

      <element name="TListItem.EditCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.EditCaption.Result">
        <short/>
      </element>

      <element name="TListItem.Caption">
        <short>
          <var>Caption</var> - the name given to this item on the list
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Checked">
        <short>
          <var>Checked</var> - if True, a check mark is present beside the item implying it has been selected
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Cut">
        <short>
          <var>Cut</var> this item from the list (but it can be placed on the clipboard)
        </short>
      </element>

      <element name="TListItem.Data">
        <short>Pointer to the Data associated with this item</short>
      </element>

      <element name="TListItem.DropTarget">
        <short>
          <var>DropTarget</var> - returns True if this is a valid target on the list for dropping
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Focused">
        <short>Property is true if this item has Focus</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Index">
        <short>The index of this item in the list (integer)</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.ImageIndex">
        <short>The index of the image associated with this Item in the list</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Left">
        <short>The position of the Left side of the list item</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.ListView">
        <short>The <var>ListView</var> in which this Item is found</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Owner">
        <short>The Owner of the ListItem</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Position">
        <short>The coordinates of the position where the ListItem is located</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.Selected">
        <short>
          Whether this Item has been <var>Selected</var> (often denoted by a check-mark)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.SubItems">
        <short>The list of <var>SubItems</var> associated with this ListItem</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItem.SubItemImages">
        <short>
          <var>SubItemImages</var> - the list of Images associated with the SubItems
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItem.SubItemImages.AIndex">
        <short/>
      </element>

      <element name="TListItem.Top">
        <short>The position of the <var>Top</var> of this ListItem</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItemClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOwnerDataListItem">
        <short/>
        <descr>
          TOwnerDataListItem is a TListItem descendant.
        </descr>
        <seealso/>
      </element>

      <element name="TOwnerDataListItem.FDataIndex"/>
      <element name="TOwnerDataListItem.FCached"/>

      <element name="TOwnerDataListItem.GetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetCaption.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.GetIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetIndex.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.GetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetImageIndex.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetCaption.AValue">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetImageIndex.AValue">
        <short/>
      </element>

      <element name="TOwnerDataListItem.GetSubItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.GetSubItems.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.DoCacheItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOwnerDataListItem.IsOwnerData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.IsOwnerData.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetDataIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetDataIndex.ADataIndex">
        <short/>
      </element>

      <element name="TOwnerDataListItem.SetOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItem.SetOwner.AOwner">
        <short/>
      </element>

      <element name="TListItemsEnumerator">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItemsEnumerator.FItems"/>
      <element name="TListItemsEnumerator.FPosition"/>

      <element name="TListItemsEnumerator.GetCurrent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsEnumerator.GetCurrent.Result">
        <short/>
      </element>

      <element name="TListItemsEnumerator.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsEnumerator.Create.AItems">
        <short>List items navigated in the enumerator</short>
      </element>

      <element name="TListItemsEnumerator.MoveNext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsEnumerator.MoveNext.Result">
        <short/>
      </element>

      <element name="TListItemsEnumerator.Current">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItemsFlag">
        <short>Widgetset flags applied to the TListItems container</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItemsFlag.lisfWSItemsCreated">
        <short/>
      </element>

      <element name="TListItemsFlags">
        <short>Set type used to store TListItemsFlag enumeration values</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems">
        <short>
          <var>TListItems</var> - a list of items with a cache of the last accessed item
        </short>
        <descr>
          <var>TListitems</var> has a built-in cache for the last accessed item. This will speed up interface updates since <var>Item.Index</var> is  often used for the same item updating more properties.  If <var>FCacheIndex</var> contains -1 then the cache is not valid.
        </descr>
        <seealso/>
      </element>

      <element name="TListItems.FOwner"/>
      <element name="TListItems.FItems"/>
      <element name="TListItems.FFlags"/>
      <element name="TListItems.FCacheIndex"/>
      <element name="TListItems.FCacheItem"/>

      <element name="TListItems.WSCreateCacheItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSUpdateAllowed.Result">
        <short/>
      </element>

      <element name="TListItems.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSUpdateAllowed.Result">
        <short/>
      </element>

      <element name="TListItems.WSUpdateItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSUpdateItem.AIndex">
        <short/>
      </element>
      <element name="TListItems.WSUpdateItem.AValue">
        <short/>
      </element>

      <element name="TListItems.WSSetItemsCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.WSSetItemsCount.ACount">
        <short/>
      </element>

      <element name="TListItems.ItemDestroying">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.ItemDestroying.AItem">
        <short/>
      </element>

      <element name="TListItems.ReadData">
        <short/>
        <descr>
          Reads data in a Delphi compatible way.
        </descr>
        <seealso/>
      </element>
      <element name="TListItems.ReadData.Stream">
        <short/>
      </element>

      <element name="TListItems.ReadLazData">
        <short/>
        <descr>
          Reads data in a 64-bit safe way.
        </descr>
        <seealso/>
      </element>
      <element name="TListItems.ReadLazData.Stream">
        <short/>
      </element>

      <element name="TListItems.WriteLazData">
        <short/>
        <descr>
          Writes data in a 64-bit safe way.
        </descr>
        <seealso/>
      </element>
      <element name="TListItems.WriteLazData.Stream">
        <short/>
      </element>

      <element name="TListItems.DefineProperties">
        <short>
          <var>DefineProperties</var> - calls inherited method, then defines some specific binary properties
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.DefineProperties">TPersistent.DefineProperties</link>
        </seealso>
      </element>
      <element name="TListItems.DefineProperties.Filer">
        <short/>
      </element>

      <element name="TListItems.GetCount">
        <short>
          <var>GetCount</var> - find the number of Items in the list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.GetCount.Result">
        <short/>
      </element>

      <element name="TListItems.GetItem">
        <short>
          <var>GetItem</var> returns the <var>ListItem</var> specified by <var>AIndex</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.GetItem.Result">
        <short/>
      </element>
      <element name="TListItems.GetItem.AIndex">
        <short/>
      </element>

      <element name="TListItems.GetOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.GetOwner.Result">
        <short/>
      </element>

      <element name="TListItems.WSCreateItems">
        <short>
          <var>WSCreateItems</var> - instruction to the widgetset to create Items
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.DoFinalizeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.SetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.SetCount.ACount">
        <short/>
      </element>

      <element name="TListItems.SetItem">
        <short>
          <var>SetItem</var> - writes the Index and content of a given Item to a local variable
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.SetItem.AIndex">
        <short/>
      </element>
      <element name="TListItems.SetItem.AValue">
        <short/>
      </element>

      <element name="TListItems.ClearSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.SelectAll">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Add">
        <short>
          <var>Add</var> an Item to the Collection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Add.Result">
        <short/>
      </element>

      <element name="TListItems.AddItem">
        <short>
          <var>AddItem</var> - add the specified <var>AItem</var> to the collection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.AddItem.AItem">
        <short/>
      </element>

      <element name="TListItems.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Clear">
        <short>
          <var>Clear</var> - remove all Items from the list
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Create">
        <short>
          <var>Create</var> - constructor for <var>TListItems</var>: calls inherited <var>Create</var> then creates the list
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TListItems.Create.AOwner">
        <short/>
      </element>

      <element name="TListItems.Destroy">
        <short>
          <var>Destroy</var> destructor for <var>TListItems</var>: frees the individual items on the list, then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TListItems.Delete">
        <short>Remove the Item specified by <var>AIndex</var> from the collection</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Delete.AIndex">
        <short/>
      </element>

      <element name="TListItems.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Exchange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Exchange.AIndex1">
        <short/>
      </element>
      <element name="TListItems.Exchange.AIndex2">
        <short/>
      </element>

      <element name="TListItems.Move">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Move.AFromIndex">
        <short/>
      </element>
      <element name="TListItems.Move.AToIndex">
        <short/>
      </element>

      <element name="TListItems.FindCaption">
        <short>
          <var>FindCaption</var> - returns the ListItem with the specified caption at the given starting place.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.FindCaption.StartIndex">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Value">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Partial">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Inclusive">
        <short/>
      </element>
      <element name="TListItems.FindCaption.Wrap">
        <short/>
      </element>
      <element name="TListItems.FindCaption.PartStart">
        <short/>
      </element>

      <element name="TListItems.FindData">
        <short>
          <var>FindData</var> - returns the ListItem associated with the specified data pointer
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.FindData.Result">
        <short/>
      </element>
      <element name="TListItems.FindData.AData">
        <short/>
      </element>
      <element name="TListItems.FindData.StartIndex">
        <short/>
      </element>
      <element name="TListItems.FindData.Value">
        <short/>
      </element>
      <element name="TListItems.FindData.Inclusive">
        <short/>
      </element>
      <element name="TListItems.FindData.Wrap">
        <short/>
      </element>

      <element name="TListItems.GetEnumerator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.GetEnumerator.Result">
        <short/>
      </element>

      <element name="TListItems.IndexOf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.IndexOf.Result">
        <short/>
      </element>
      <element name="TListItems.IndexOf.AItem">
        <short/>
      </element>

      <element name="TListItems.Insert">
        <short>
          <var>Insert</var> an item in the list at <var>AIndex</var>, returning the value of the <var>ListItem</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Insert.Result">
        <short/>
      </element>
      <element name="TListItems.Insert.AIndex">
        <short/>
      </element>

      <element name="TListItems.InsertItem">
        <short>
          <var>InsertItem</var> - procedure to insert <var>AItem</var> at position <var>AIndex</var> in the list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.InsertItem.AItem">
        <short/>
      </element>
      <element name="TListItems.InsertItem.AIndex">
        <short/>
      </element>

      <element name="TListItems.Flags">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Count">
        <short>
          <var>Count</var> - the number of items in the collection
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListItems.Item">
        <short>An <var>Item</var> in the list, specified by its Index value</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListItems.Item.AIndex">
        <short/>
      </element>
      <element name="TListItems.Owner">
        <short>
          <var>Owner</var> - the ListView that owns this collection of ListItems
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TOwnerDataListItems">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOwnerDataListItems.fItemsCount"/>

      <element name="TOwnerDataListItems.GetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItems.GetCount.Result">
        <short/>
      </element>

      <element name="TOwnerDataListItems.SetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItems.SetCount.ACount">
        <short/>
      </element>

      <element name="TOwnerDataListItems.GetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOwnerDataListItems.GetItem.Result">
        <short/>
      </element>
      <element name="TOwnerDataListItems.GetItem.AIndex">
        <short/>
      </element>

      <element name="TOwnerDataListItems.Clear">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TWidth">
        <short>ImageIndex</short>
        <descr>
          TWidth is an Integer range type.
          Range is 0..MaxInt.
        </descr>
        <seealso/>
      </element>

      <element name="TSortIndicator">
        <short></short>
        <descr>
          <p>
            <var>TSortIndicator</var> is an enumerated type with values that represent the sort indicators available in the <var>TListColumn</var> class. TSortIndicator is the type used to implement the <var>SortIndicator</var> property in <var>TListColumn</var>.
          </p>
        </descr>
        <seealso>
          <link id="TListColumn.SortIndicator"/>
        </seealso>
      </element>
      <element name="TSortIndicator.siNone">
        <short>No sort indicator is used for the list column</short>
      </element>
      <element name="TSortIndicator.siAscending">
        <short>Uses an ascending sort indicator for the list column</short>
      </element>
      <element name="TSortIndicator.siDescending">
        <short>Uses a  descending sort indicator for the list column</short>
      </element>

      <element name="TListColumn">
        <short>
          <var>TListColumn</var> - an individual column in a multi-column List control
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.FAlignment"/>
      <element name="TListColumn.FAutoSize"/>
      <element name="TListColumn.FCaption"/>
      <element name="TListColumn.FMinWidth"/>
      <element name="TListColumn.FMaxWidth"/>
      <element name="TListColumn.FVisible"/>
      <element name="TListColumn.FWidth"/>
      <element name="TListColumn.FImageIndex"/>
      <element name="TListColumn.FTag"/>
      <element name="TListColumn.FSortIndicator"/>

      <element name="TListColumn.GetWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.GetWidth.Result">
        <short/>
      </element>

      <element name="TListColumn.WSCreateColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.WSDestroyColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.WSUpdateAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.WSReadAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.SetVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetVisible.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetAutoSize.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetMinWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetMinWidth.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetMaxWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetMaxWidth.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetWidth.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetCaption.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetAlignment.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetImageIndex.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetSortIndicator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.SetSortIndicator.AValue">
        <short/>
      </element>

      <element name="TListColumn.SetIndex">
        <short>
          <var>SetIndex</var> - calls inherited method and if this is a new index value, changes to the new column index
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
        </seealso>
      </element>
      <element name="TListColumn.SetIndex.AValue">
        <short/>
      </element>

      <element name="TListColumn.GetDisplayName">
        <short>
          <var>GetDisplayName</var> returns the <var>Caption</var>; if this is blank, calls inherited method
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
        </seealso>
      </element>
      <element name="TListColumn.GetDisplayName.Result">
        <short/>
      </element>

      <element name="TListColumn.GetStoredWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumn.GetStoredWidth.Result">
        <short/>
      </element>

      <element name="TListColumn.Create">
        <short>
          <var>Create</var> - constructor for TListColumn: calls inherited <var>Create</var> then sets defaults for size, alignment and index
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="TListColumn.Create.ACollection">
        <short/>
      </element>

      <element name="TListColumn.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TListColumn</var>: if update allowed, updates columns then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
        </seealso>
      </element>

      <element name="TListColumn.Assign">
        <short>
          <var>Assign</var> - if source is of correct type, copies alignment, caption, visibility and size properties, otherwise calls inherited <var>Assign</var> which probably raises an exception
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TListColumn.Assign.ASource">
        <short/>
      </element>

      <element name="TListColumn.WidthType">
        <short/>
        <descr>
          WidthType is a read-only TWidth property.
        </descr>
        <seealso/>
      </element>

      <element name="TListColumn.Alignment">
        <short>Sets alignment of caption: text is left or right justified or centered.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.AutoSize">
        <short>
          When other columns have fixed width, auto-calculate width of this column, to fill entire width.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.Caption">
        <short>Caption text of column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.ImageIndex">
        <short>Index of icon, inside ImageList object for columns of Listview.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.MaxWidth">
        <short>Maximal width for this column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.MinWidth">
        <short>Minimal width for this column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.Tag">
        <short>Int value, to store some info for this column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.Visible">
        <short>Allow to show this column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.Width">
        <short>Current width of column. May be calculated auto, if AutoSize used.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumn.SortIndicator">
        <short>
          Indicator of the sorting order. Serves only the visual purpose, doesn't affect the actual sorting order
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns">
        <short>
          <var>TListColumns</var> - a collection of Items of type <var>TListColumn</var> (the columns appearing in a multi-column list)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns.FOwner"/>
      <element name="TListColumns.FItemNeedsUpdate"/>
      <element name="TListColumns.FNeedsUpdate"/>

      <element name="TListColumns.GetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumns.GetItem.Result">
        <short/>
      </element>
      <element name="TListColumns.GetItem.AIndex">
        <short/>
      </element>

      <element name="TListColumns.WSCreateColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns.SetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumns.SetItem.AIndex">
        <short/>
      </element>
      <element name="TListColumns.SetItem.AValue">
        <short/>
      </element>

      <element name="TListColumns.DoFinalizeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns.GetOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumns.GetOwner.Result">
        <short/>
      </element>

      <element name="TListColumns.Create">
        <short>
          <var>Create</var> - constructor for <var>TListColumns</var>: sets ownership then calls inherited <var>Create</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
        </seealso>
      </element>
      <element name="TListColumns.Create.TheOwner">
        <short/>
      </element>

      <element name="TListColumns.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TListColumns</var>: calls inherited destructor
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Destroy">TCollection.Destroy</link>
        </seealso>
      </element>

      <element name="TListColumns.Update">
        <short>
          <var>Update</var> checks if update is in fact required, then calls inherited method
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Update">TCollection.Update</link>
        </seealso>
      </element>

      <element name="TListColumns.Update.Item">
        <short/>
      </element>

      <element name="TListColumns.Add">
        <short>
          <var>Add</var> calls inherited method, then adjusts state flags
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
        </seealso>
      </element>
      <element name="TListColumns.Add.Result">
        <short/>
      </element>

      <element name="TListColumns.Owner" link="#rtl.Classes.TCollection.Owner">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TListColumns.Items" link="#rtl.Classes.TCollection.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TListColumns.Items.AIndex">
        <short/>
      </element>

      <element name="TListColumns.Assign">
        <short>
          <var>Assign</var> checks that source is of correct type, then adds new columns and copies items from source into them; otherwise calls inherited <var>Assign</var> which probably raises an exception
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TCollection.Assign">TCollection.Assign</link>
        </seealso>
      </element>
      <element name="TListColumns.Assign.Source">
        <short/>
      </element>

      <element name="TItemChange">
        <short>
          <var>TItemChange</var> - enumerated type for kind of change: in text, in image or in state
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TItemChange.ctText">
        <short/>
      </element>
      <element name="TItemChange.ctImage">
        <short/>
      </element>
      <element name="TItemChange.ctState">
        <short/>
      </element>

      <element name="TViewStyle">
        <short>
          <var>TViewStyle</var> - enumerated type for style of view
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TViewStyle.vsIcon">
        <short/>
      </element>
      <element name="TViewStyle.vsSmallIcon">
        <short/>
      </element>
      <element name="TViewStyle.vsList">
        <short/>
      </element>
      <element name="TViewStyle.vsReport">
        <short/>
      </element>

      <element name="TItemFind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TItemFind.ifData">
        <short/>
      </element>
      <element name="TItemFind.ifPartialString">
        <short/>
      </element>
      <element name="TItemFind.ifExactString">
        <short/>
      </element>
      <element name="TItemFind.ifNearest">
        <short/>
      </element>

      <element name="TSearchDirection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TSearchDirection.sdLeft">
        <short/>
      </element>
      <element name="TSearchDirection.sdRight">
        <short/>
      </element>
      <element name="TSearchDirection.sdAbove">
        <short/>
      </element>
      <element name="TSearchDirection.sdBelow">
        <short/>
      </element>
      <element name="TSearchDirection.sdAll">
        <short/>
      </element>

      <element name="TLVChangeEvent">
        <short>
          <var>TLVChangeEvent</var> - generic event handler method for change in List View
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVChangeEvent.Sender">
        <short/>
      </element>
      <element name="TLVChangeEvent.Item">
        <short/>
      </element>
      <element name="TLVChangeEvent.Change">
        <short/>
      </element>

      <element name="TLVDataFindEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDataFindEvent.Sender">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFind">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFindString">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFindPosition">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AFindData">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AStartIndex">
        <short/>
      </element>
      <element name="TLVDataFindEvent.ADirection">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AWrap">
        <short/>
      </element>
      <element name="TLVDataFindEvent.AIndex">
        <short/>
      </element>

      <element name="TLVDataHintEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDataHintEvent.Sender">
        <short/>
      </element>
      <element name="TLVDataHintEvent.StartIndex">
        <short/>
      </element>
      <element name="TLVDataHintEvent.EndIndex">
        <short/>
      </element>

      <element name="TLVDataStateChangeEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDataStateChangeEvent.Sender">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.StartIndex">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.EndIndex">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.OldState">
        <short/>
      </element>
      <element name="TLVDataStateChangeEvent.NewState">
        <short/>
      </element>

      <element name="TLVColumnClickEvent">
        <short>
          <var>TLVColumnClickEvent</var> - generic event handler method for a click on a List View column
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVColumnClickEvent.Sender">
        <short/>
      </element>
      <element name="TLVColumnClickEvent.Column">
        <short/>
      </element>

      <element name="TLVColumnRClickEvent">
        <short>
          <var>TLVColumnRClickEvent</var> - generic event handler method for a right click on a List View column
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVColumnRClickEvent.Sender">
        <short/>
      </element>
      <element name="TLVColumnRClickEvent.Column">
        <short/>
      </element>
      <element name="TLVColumnRClickEvent.Point">
        <short/>
      </element>

      <element name="TLVCompare">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCompare.Result">
        <short/>
      </element>
      <element name="TLVCompare.Item1">
        <short/>
      </element>
      <element name="TLVCompare.Item2">
        <short/>
      </element>
      <element name="TLVCompare.AOptionalParam">
        <short/>
      </element>

      <element name="TLVCompareEvent">
        <short>
          <var>TLVCompareEvent</var> - generic event handler method for List View comparison
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCompareEvent.Sender">
        <short/>
      </element>
      <element name="TLVCompareEvent.Item1">
        <short/>
      </element>
      <element name="TLVCompareEvent.Item2">
        <short/>
      </element>
      <element name="TLVCompareEvent.Data">
        <short/>
      </element>
      <element name="TLVCompareEvent.Compare">
        <short/>
      </element>

      <element name="TLVDeletedEvent">
        <short>
          <var>TLVDeletedEvent</var> - generic event handler method for deleted items in List View
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDeletedEvent.Sender">
        <short/>
      </element>
      <element name="TLVDeletedEvent.Item">
        <short/>
      </element>

      <element name="TLVEditingEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVEditingEvent.Sender">
        <short/>
      </element>
      <element name="TLVEditingEvent.Item">
        <short/>
      </element>
      <element name="TLVEditingEvent.AllowEdit">
        <short/>
      </element>

      <element name="TLVEditedEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVEditedEvent.Sender">
        <short/>
      </element>
      <element name="TLVEditedEvent.Item">
        <short/>
      </element>
      <element name="TLVEditedEvent.AValue">
        <short/>
      </element>

      <element name="TLVInsertEvent">
        <short>
          <var>TLVInsertEvent</var> - generic event handler method for List View insertion
        </short>
        <descr/>
        <seealso>
          <link id="TLVDeletedEvent"/>
        </seealso>
      </element>

      <element name="TLVDataEvent">
        <short/>
        <descr/>
        <seealso>
          <link id="TLVDeletedEvent"/>
        </seealso>
      </element>

      <element name="TLVCheckedItemEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCheckedItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVCheckedItemEvent.Item">
        <short/>
      </element>

      <element name="TLVSelectItemEvent">
        <short>
          <var>TLVSelectItemEvent</var> - generic event handler method for List View selection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVSelectItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVSelectItemEvent.Item">
        <short/>
      </element>
      <element name="TLVSelectItemEvent.Selected">
        <short/>
      </element>

      <element name="TLVCustomDrawEvent">
        <short>
          <var>TLVCustomDrawEvent</var> - generic event handler method for List View custom drawing
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TLVCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TLVCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVCustomDrawItemEvent">
        <short>
          <var>TLVCustomDrawItemEvent</var> - generic event handling method for List View item drawing
        </short>
      </element>
      <element name="TLVCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVCustomDrawItemEvent.Item">
        <short/>
      </element>
      <element name="TLVCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TLVCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVCustomDrawSubItemEvent">
        <short>
          <var>TLVCustomDrawSubItemEvent</var> - generic event handling method for List View subitem drawing
        </short>
      </element>
      <element name="TLVCustomDrawSubItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.Item">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.SubItem">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.State">
        <short/>
      </element>
      <element name="TLVCustomDrawSubItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVDrawItemEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVDrawItemEvent.AItem">
        <short/>
      </element>
      <element name="TLVDrawItemEvent.ARect">
        <short/>
      </element>
      <element name="TLVDrawItemEvent.AState">
        <short/>
      </element>

      <element name="TLVAdvancedCustomDrawEvent">
        <short>
          <var>TLVAdvancedCustomDrawEvent</var> - generic event handling method for List View custom drawing
        </short>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.Stage">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVAdvancedCustomDrawItemEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.Item">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.Stage">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVAdvancedCustomDrawSubItemEvent">
        <short>
          <var>TLVAdvancedCustomDrawSubItemEvent</var> - generic event handling method for List View custom subitem drawing
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.Sender">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.Item">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.SubItem">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.State">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.Stage">
        <short/>
      </element>
      <element name="TLVAdvancedCustomDrawSubItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TLVCreateItemClassEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TLVCreateItemClassEvent.Sender">
        <short/>
      </element>
      <element name="TLVCreateItemClassEvent.ItemClass">
        <short/>
      </element>

      <element name="TListViewProperty">
        <short>
          <var>TListViewProperty</var> - enumerated type: a series of constants denoting the properties of a listview
        </short>
        <descr>
          <p>
            <var>TListViewProperty</var> is an enumerated type with a series of constants denoting the properties of a listview.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TListViewProperty.lvpAutoArrange">
        <short/>
      </element>
      <element name="TListViewProperty.lvpCheckboxes">
        <short/>
      </element>
      <element name="TListViewProperty.lvpColumnClick">
        <short/>
      </element>
      <element name="TListViewProperty.lvpFlatScrollBars">
        <short/>
      </element>
      <element name="TListViewProperty.lvpFullDrag">
        <short/>
      </element>
      <element name="TListViewProperty.lvpGridLines">
        <short/>
      </element>
      <element name="TListViewProperty.lvpHideSelection">
        <short/>
      </element>
      <element name="TListViewProperty.lvpHotTrack">
        <short/>
      </element>
      <element name="TListViewProperty.lvpMultiSelect">
        <short/>
      </element>
      <element name="TListViewProperty.lvpOwnerDraw">
        <short/>
      </element>
      <element name="TListViewProperty.lvpReadOnly">
        <short/>
      </element>
      <element name="TListViewProperty.lvpRowSelect">
        <short/>
      </element>
      <element name="TListViewProperty.lvpShowColumnHeaders">
        <short/>
      </element>
      <element name="TListViewProperty.lvpShowWorkAreas">
        <short/>
      </element>
      <element name="TListViewProperty.lvpWrapText">
        <short/>
      </element>
      <element name="TListViewProperty.  lvpToolTips">
        <short/>
      </element>

      <element name="TListViewProperties">
        <short>
          <var>TListViewProperties</var> - set of <var>TListViewProperty</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListViewImageList">
        <short>
          <var>TListViewImageList</var> - enumerated type denoting the category of image list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListViewImageList.lvilSmall">
        <short/>
      </element>
      <element name="TListViewImageList.lvilLarge">
        <short/>
      </element>
      <element name="TListViewImageList.lvilState">
        <short/>
      </element>

      <element name="TListHotTrackStyle">
        <short>
          <var>TListHotTrackStyle</var> - enumerated type denoting the style of HotTrack
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TListHotTrackStyle.htHandPoint">
        <short>For current ListView item, show the HandPoint mouse cursor.</short>
      </element>
      <element name="TListHotTrackStyle.htUnderlineCold">
        <short>For current ListView item, show the pale underline.</short>
      </element>
      <element name="TListHotTrackStyle.htUnderlineHot">
        <short>For current ListView item, show the bold underline.</short>
      </element>

      <element name="TListHotTrackStyles">
        <short>
          <var>TListHotTrackStyles</var> - set of <var>TListHotTrackStyle</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListViewFlag">
        <short>
          <var>TListViewFlag</var> - enumerated type (currently containing only one value) for List View flag
        </short>
      </element>
      <element name="TListViewFlag.lffSelectedValid">
        <short/>
      </element>
      <element name="TListViewFlag.lffItemsMoving">
        <short/>
      </element>
      <element name="TListViewFlag.lffItemsSorting">
        <short/>
      </element>
      <element name="TListViewFlag.lffPreparingSorting">
        <short/>
      </element>

      <element name="TListViewFlags">
        <short>
          <var>TListViewFlags</var> - set of <var>TListViewFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TSortDirection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TSortDirection.sdAscending">
        <short/>
      </element>
      <element name="TSortDirection.sdDescending">
        <short/>
      </element>

      <element name="TCustomListViewEditor">
        <short/>
        <descr>
          Used to provide multi-platform editing capabilities for TCustomListView.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListViewEditor.FItems"/>

      <element name="TCustomListViewEditor.ListViewEditorKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListViewEditor.ListViewEditorKeyDown.Sender">
        <short/>
      </element>
      <element name="TCustomListViewEditor.ListViewEditorKeyDown.Key">
        <short/>
      </element>
      <element name="TCustomListViewEditor.ListViewEditorKeyDown.Shift">
        <short/>
      </element>

      <element name="TCustomListViewEditor.DoExit">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListViewEditor.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListViewEditor.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomListViewEditor.Item">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView">
        <short>
          <var>TCustomListView</var> - the base class for <var>TListView</var>
        </short>
        <descr>
          <p>
            <var>TCustomListView</var> is the base class for <var>TListView</var>. If you want to define your own ListView class, you should derive it from this class.
          </p>
        </descr>
      </element>

      <element name="TCustomListView.FEditor"/>
      <element name="TCustomListView.FAllocBy"/>
      <element name="TCustomListView.FAutoSort"/>
      <element name="TCustomListView.FAutoSortIndicator"/>
      <element name="TCustomListView.FAutoWidthLastColumn"/>
      <element name="TCustomListView.FCanvas"/>
      <element name="TCustomListView.FDefaultItemHeight"/>
      <element name="TCustomListView.FHotTrackStyles"/>
      <element name="TCustomListView.FIconOptions"/>
      <element name="TCustomListView.FOnEdited"/>
      <element name="TCustomListView.FOnEditing"/>
      <element name="TCustomListView.FOwnerData"/>
      <element name="TCustomListView.FOwnerDataItem"/>
      <element name="TCustomListView.FListItems"/>
      <element name="TCustomListView.FColumns"/>
      <element name="TCustomListView.FImages"/>
      <element name="TCustomListView.FImagesWidth"/>
      <element name="TCustomListView.FImageChangeLink"/>
      <element name="TCustomListView.FFlags"/>
      <element name="TCustomListView.FShowEditorQueued"/>
      <element name="TCustomListView.FSortDirection"/>
      <element name="TCustomListView.FViewStyle"/>
      <element name="TCustomListView.FSortType"/>
      <element name="TCustomListView.FSortColumn"/>
      <element name="TCustomListView.FCustomSort_Func"/>
      <element name="TCustomListView.FCustomSort_Param"/>
      <element name="TCustomListView.FScrollBars"/>
      <element name="TCustomListView.FViewOriginCache"/>
      <element name="TCustomListView.FSelected"/>
      <element name="TCustomListView.FFocused"/>
      <element name="TCustomListView.FSelectedIdx"/>
      <element name="TCustomListView.FHoverTime"/>
      <element name="TCustomListView.FUpdateCount"/>
      <element name="TCustomListView.FOnChange"/>
      <element name="TCustomListView.FOnColumnClick"/>
      <element name="TCustomListView.FOnCompare"/>
      <element name="TCustomListView.FOnData"/>
      <element name="TCustomListView.FOnDataFind"/>
      <element name="TCustomListView.FOnDataHint"/>
      <element name="TCustomListView.FOnDataStateChange"/>
      <element name="TCustomListView.FOnDeletion"/>
      <element name="TCustomListView.FOnInsert"/>
      <element name="TCustomListView.FOnItemChecked"/>
      <element name="TCustomListView.FOnSelectItem"/>
      <element name="TCustomListView.FOnCustomDraw"/>
      <element name="TCustomListView.FOnCustomDrawItem"/>
      <element name="TCustomListView.FOnCustomDrawSubItem"/>
      <element name="TCustomListView.FOnAdvancedCustomDraw"/>
      <element name="TCustomListView.FOnAdvancedCustomDrawItem"/>
      <element name="TCustomListView.FOnAdvancedCustomDrawSubItem"/>
      <element name="TCustomListView.FProperties"/>

      <element name="TCustomListView.GetBoundingRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetBoundingRect.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetColumnCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetColumnCount.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetColumnFromIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetColumnFromIndex.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetColumnFromIndex.AIndex">
        <short/>
      </element>

      <element name="TCustomListView.GetDropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetDropTarget.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetFocused">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetFocused.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetImageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetImageList.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetImageList.ALvilOrd">
        <short/>
      </element>

      <element name="TCustomListView.GetHoverTime">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetHoverTime.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetItemIndex.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetProperty">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetProperty.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetProperty.ALvpOrd">
        <short/>
      </element>

      <element name="TCustomListView.GetSelCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetSelCount.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetSelection.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetTopItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetTopItem.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetViewOrigin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetViewOrigin.Result">
        <short/>
      </element>

      <element name="TCustomListView.GetVisibleRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetVisibleRowCount.Result">
        <short/>
      </element>

      <element name="TCustomListView.ResizeLastColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.SetAllocBy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetAllocBy.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetAutoWidthLastColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetAutoWidthLastColumn.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetColumns.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetDefaultItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetDefaultItemHeight.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetDropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetDropTarget.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetFocused">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetFocused.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetHotTrackStyles">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetHotTrackStyles.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetHoverTime">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetHoverTime.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetIconOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetIconOptions.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetImageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetImageList.ALvilOrd">
        <short/>
      </element>
      <element name="TCustomListView.SetImageList.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetImageListWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetImageListWidth.ALvilOrd">
        <short/>
      </element>
      <element name="TCustomListView.SetImageListWidth.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetImageListWS">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetImageListWS.ALvil">
        <short/>
      </element>

      <element name="TCustomListView.SetItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetItemIndex.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetItems.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetItemVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetItemVisible.AValue">
        <short/>
      </element>
      <element name="TCustomListView.SetItemVisible.APartialOK">
        <short/>
      </element>

      <element name="TCustomListView.SetOwnerData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetOwnerData.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetProperty">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetProperty.ALvpOrd">
        <short/>
      </element>
      <element name="TCustomListView.SetProperty.AIsSet">
        <short/>
      </element>

      <element name="TCustomListView.SetScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetScrollBars.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetSelection.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetShowEditorQueued">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetShowEditorQueued.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetSortColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetSortColumn.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetSortDirection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetSortDirection.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetSortType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetSortType.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetViewOrigin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetViewOrigin.AValue">
        <short/>
      </element>

      <element name="TCustomListView.SetViewStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetViewStyle.Avalue">
        <short/>
      </element>

      <element name="TCustomListView.QueuedShowEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.QueuedShowEditor.Data">
        <short/>
      </element>

      <element name="TCustomListView.SortWithParams">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SortWithParams.ACompareFunc">
        <short/>
      </element>

      <element name="TCustomListView.UpdateScrollbars">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.CNNotify"/>
      <element name="TCustomListView.CNNotify.AMessage"/>

      <element name="TCustomListView.CNDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CNDrawItem.Message">
        <short/>
      </element>

      <element name="TCustomListView.InvalidateSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ImageResolutionHandleDestroyed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.ImageResolutionHandleDestroyed.Sender">
        <short/>
      </element>
      <element name="TCustomListView.ImageResolutionHandleDestroyed.AWidth">
        <short/>
      </element>
      <element name="TCustomListView.ImageResolutionHandleDestroyed.AReferenceHandle">
        <short/>
      </element>

      <element name="TCustomListView.SetImageListAsync">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.SetImageListAsync.Data">
        <short/>
      </element>

      <element name="TCustomListView.FOnCreateItemClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.FOnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.HideEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ShowEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.WMHScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.WMHScroll.Message">
        <short/>
      </element>

      <element name="TCustomListView.WMVScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.WMVScroll.Message">
        <short/>
      </element>

      <element name="TCustomListView.ShowEditorQueued">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ItemDeleted">
        <short>
          <var>ItemDeleted</var> - the specified listitem is removed from the list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.ItemDeleted.AItem">
        <short/>
      </element>

      <element name="TCustomListView.ItemInserted">
        <short>
          <var>ItemInserted</var> - the specified item is inserted into the list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.ItemInserted.AItem">
        <short/>
      </element>

      <element name="TCustomListView.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomListView.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomListView.InitializeWnd">
        <short>
          <var>InitializeWnd</var> - calls inherited method, then sets various local properties
        </short>
        <descr>
          <var>InitializeWnd</var> - calls inherited method, then sets style, adds columns, sets imagelists and item depending properties (scroll bars, sorting etc), adds items and sets other miscellaneous properties (default item height, hot track styles, hover time etc)
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
        </seealso>
      </element>

      <element name="TCustomListView.FinalizeWnd">
        <short>
          <var>FinalizeWnd</var> stores the list origin then calls inherited method
        </short>
        <seealso>
          <link id="#lcl.controls.TWinControl.FinalizeWnd">TWinControl.FinalizeWnd</link>
        </seealso>
      </element>

      <element name="TCustomListView.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd"/>
      <element name="TCustomListView.BeginAutoDrag" link="#LCL.Controls.TControl.BeginAutoDrag"/>

      <element name="TCustomListView.CreateListItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CreateListItem.Result">
        <short/>
      </element>

      <element name="TCustomListView.CreateListItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CreateListItems.Result">
        <short/>
      </element>

      <element name="TCustomListView.CanEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CanEdit.Result">
        <short/>
      </element>
      <element name="TCustomListView.CanEdit.Item">
        <short/>
      </element>

      <element name="TCustomListView.Change">
        <short>
          <var>Change</var>  - Internal procedure to simulate the <var>OnChange</var> event
        </short>
        <descr>
          <p>
            This is an internal procedure which is called after an item has been changed. It is a programmatic method for simulating the <var>OnChange</var> event if the programmer has assigned a method to this event.
          </p>
        </descr>
      </element>
      <element name="TCustomListView.Change.AItem">
        <short/>
      </element>
      <element name="TCustomListView.Change.AChange">
        <short/>
      </element>

      <element name="TCustomListView.ColClick">
        <short>
          <var>ColClick</var>  - procedure to simulate the <var>OnColumnClick</var>  event
        </short>
        <descr>
          <p>
            <var>ColClick</var>  - procedure to simulate the <var>OnColumnClick</var>  event. Can be used programmatically to execute the same code as is used to respond to the <var>OnColumnClick </var>event.
          </p>
        </descr>
      </element>
      <element name="TCustomListView.ColClick.AColumn">
        <short/>
      </element>

      <element name="TCustomListView.Delete">
        <short>
          <var>Delete</var> an Item from the List
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.Delete.AItem">
        <short/>
      </element>

      <element name="TCustomListView.DoDeletion">
        <short>
          <var>DoDeletion</var> - performs the actual deletion
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoDeletion.AItem">
        <short/>
      </element>

      <element name="TCustomListView.DoInsert">
        <short>Performs the insertion</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoInsert.AItem">
        <short/>
      </element>

      <element name="TCustomListView.DoItemChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoItemChecked.AItem">
        <short/>
      </element>

      <element name="TCustomListView.DoSelectItem">
        <short>
          <var>DoSelectItem</var> - perform item selection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoSelectItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.DoSelectItem.ASelected">
        <short/>
      </element>

      <element name="TCustomListView.DoAutoAdjustLayout">
        <short>Adjusts layout for the list view using the specified arguments</short>
        <descr>
          <p>
            <var>DoAutoAdjustLayout</var> is an overridden procedure used to adjust the layout for the list view using the specified arguments. DoAutoAdjustLayout calls the inherited method.
          </p>
          <p>
            DoAutoAdjustLayout extends the ancestor method to include support for sizing the columns in the list view using the proportions specified in AXProportion and AYProportion for the display density (DPI). DoAutoAdjustLayout also ensures that the widgetset class is initialized for each of the image list sizes represented by the TListViewImageList enumeration.
          </p>
          <p>
            No actions are performed in the method if AMode does NOT include one of the following values: lapAutoAdjustWithoutHorizontalScrolling or lapAutoAdjustForDPI.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
        </seealso>
      </element>
      <element name="TCustomListView.DoAutoAdjustLayout.AMode">
        <short>Layout adjustment policy used in the method</short>
      </element>
      <element name="TCustomListView.DoAutoAdjustLayout.AXProportion">
        <short>Factor used to adjust widths</short>
      </element>
      <element name="TCustomListView.DoAutoAdjustLayout.AYProportion">
        <short>Factor used to adjust heights</short>
      </element>

      <element name="TCustomListView.DoSetBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoSetBounds.ALeft">
        <short/>
      </element>
      <element name="TCustomListView.DoSetBounds.ATop">
        <short/>
      </element>
      <element name="TCustomListView.DoSetBounds.AWidth">
        <short/>
      </element>
      <element name="TCustomListView.DoSetBounds.AHeight">
        <short/>
      </element>

      <element name="TCustomListView.DoEndEdit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoEndEdit.AItem">
        <short/>
      </element>
      <element name="TCustomListView.DoEndEdit.AValue">
        <short/>
      </element>

      <element name="TCustomListView.Edit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.Edit.AItem">
        <short/>
      </element>

      <element name="TCustomListView.InsertItem">
        <short>Inserts an Item into the List</short>
        <descr>
          <p>
            Signals the OnInsert event handler (when assigned) using the value in AItem as an argument.
          </p>
          <p>
            InsertItem is called from the DoInsert method when an overridden method has been implemented in a descendent class and called from ItemInserted.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OnInsert"/>
          <link id="TCustomListView.DoInsert"/>
          <link id="TCustomListView.ItemInserted"/>
          <link id="TListItem"/>
        </seealso>
      </element>
      <element name="TCustomListView.InsertItem.AItem">
        <short>Item with the values inserted into the Items for the control</short>
      </element>

      <element name="TCustomListView.ImageChanged">
        <short>
          <var>ImageChanged</var> - procedure to signal that an image has changed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.ImageChanged.Sender">
        <short/>
      </element>

      <element name="TCustomListView.Loaded" link="#LCL.Controls.TWinControl.Loaded"/>

      <element name="TCustomListView.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomListView.Notification.Operation">
        <short/>
      </element>

      <element name="TCustomListView.IsCustomDrawn">
        <short>
          <var>IsCustomDrawn</var> - returns True if a target has been custom drawn
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.IsCustomDrawn.Result">
        <short/>
      </element>
      <element name="TCustomListView.IsCustomDrawn.ATarget">
        <short/>
      </element>
      <element name="TCustomListView.IsCustomDrawn.AStage">
        <short/>
      </element>

      <element name="TCustomListView.CustomDraw">
        <short>
          <var>CustomDraw</var> - performs custom drawing in the given rectangle and returns True if successful
        </short>
      </element>
      <element name="TCustomListView.CustomDraw.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomDraw.ARect">
        <short/>
      </element>
      <element name="TCustomListView.CustomDraw.AStage">
        <short/>
      </element>

      <element name="TCustomListView.CustomDrawItem">
        <short>
          <var>CustomDrawItem</var> - custom draws the specified item and returns True if successful
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CustomDrawItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawItem.AState">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawItem.AStage">
        <short/>
      </element>

      <element name="TCustomListView.CustomDrawSubItem">
        <short>
          <var>CustomDrawSubItem</var> - custom draws the specified subitem returning True if successful
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.ASubItem">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.AState">
        <short/>
      </element>
      <element name="TCustomListView.CustomDrawSubItem.AStage">
        <short/>
      </element>

      <element name="TCustomListView.IntfCustomDraw">
        <short>
          <var>IntfCustomDraw</var> - uses the interface to perform custom drawing and returns a result of drawing
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.Result">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.ATarget">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AStage">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AItem">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.ASubItem">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AState">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.AStage">
        <short/>
      </element>
      <element name="TCustomListView.IntfCustomDraw.ARect">
        <short/>
      </element>

      <element name="TCustomListView.GetUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetUpdateCount.Result">
        <short/>
      </element>

      <element name="TCustomListView.DrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DrawItem.AItem">
        <short/>
      </element>
      <element name="TCustomListView.DrawItem.ARect">
        <short/>
      </element>
      <element name="TCustomListView.DrawItem.AState">
        <short/>
      </element>

      <element name="TCustomListView.DoGetOwnerData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoGetOwnerData.Item">
        <short/>
      </element>

      <element name="TCustomListView.DoOwnerDataHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoOwnerDataHint.Result">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataHint.AStartIndex">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataHint.AEndIndex">
        <short/>
      </element>

      <element name="TCustomListView.DoOwnerDataStateChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.Result">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.AStartIndex">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.AEndIndex">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.AOldState">
        <short/>
      </element>
      <element name="TCustomListView.DoOwnerDataStateChange.ANewState">
        <short/>
      </element>

      <element name="TCustomListView.DblClick">
        <short>Performs actions needed when the control is double clicked</short>
        <descr>
          <p>
            Calls the inherited DblClick method. Ensures that ShowEditorQueued is set to True when the control has an assigned editor and is not marked as read-only.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DblClick">TControl.DblClick</link>
        </seealso>
      </element>

      <element name="TCustomListView.KeyDown">
        <short/>
        <descr>
          <p>
            Handles an F2 function key pressed when the control has focus. Ensures that the  editor is displayed when the control is not marked  as ReadOnly. The keystroke is digested (set to zero).
          </p>
          <p>
            If the control is marked as ReasdOnly, or Key is not the unshifted F2 function key, the inherited KeyDown method is called to handle the values in Key and Shift.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
        </seealso>
      </element>
      <element name="TCustomListView.KeyDown.Key">
        <short/>
      </element>
      <element name="TCustomListView.KeyDown.Shift">
        <short/>
      </element>

      <element name="TCustomListView.AllocBy">
        <short>
          When new items add to list, increase internal buffer capacity by this amount. Needed to not add to internal buffer by one.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.AutoSort">
        <short>
          When user clicks ListView header's column, sort ListView by this column. After next click, sort in other order
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.AutoSortIndicator">
        <short>
          If AutoSort is used on TListView, this property controls, if TListView should also automatically set SortIndicator for the selected sorting column
        </short>
        <descr/>
        <seealso>
          <link id="TListColumn.SortIndicator"/>
        </seealso>
      </element>

      <element name="TCustomListView.AutoWidthLastColumn">
        <short>Resizes the last column to fill entire ListView width in Report view</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ColumnClick">
        <short>
          Enable to react to clicks on ListView header columns, and call the OnColumnClick event
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Columns">
        <short>
          Collection of items, which have properties for ListView columns (size, alignment, image index, etc.)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.DefaultItemHeight">
        <short>Default height for items displayed in the ListView</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.HideSelection">
        <short>
          If control looses focus, don't paint selection background for selected item(s)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.HoverTime">
        <short>
          Time (in msec) for which the mouse cursor must hover over an item before its tooltip is shown
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.LargeImages">
        <short>
          ImageList object, which contains "big" icons for one if ListView layouts
        </short>
        <descr>
          <p>
            A typical application might have two ImageLists: one of<var>LargeImages</var> and one of <var>SmallImages</var> containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list.
        </p>
        <p>
          SmallImages could be displayed beside the text strings in the list view and the programmer would supply code to ensure that when an item with its associated SmallImage was selected, the corresponding LargeImage would be displayed in another window.
        </p>
        <p>
          A <var>TImageList</var> control needs to be selected and pasted on to the Form Designer and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.
        </p>
        </descr>
      </element>

      <element name="TCustomListView.LargeImagesWidth">
        <short/>
        <descr>
          LargeImagesWidth is an Integer property used to access the width for large images in the list view. Reading and writing a value to the property accesses an internal array with width values for the image list using the TListViewImageList enumeration value. The default value for the property is zero (<b>0</b>).
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.OwnerDraw">
        <short>
          Use owner-draw mode. It means that program must paint ListView items, using OnCustomDraw* or OnAdvancedCustomDraw* events
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ScrollBars">
        <short>
          Kind of scrollbars in control: vertical, horizontal, none or both. Auto* mean that scrollbars hide automatically
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ShowColumnHeaders">
        <short>Show header area in ListView, which shows captions of columns</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ShowWorkAreas">
        <short>
        </short>
        <descr>
          The WorkAreas property sets the work areas in the ListView. This property allows to highlight each work area with its own color and show with own caption.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.SmallImages">
        <short>
          ImageList object, which contains "small" icons for one if ListView layouts
        </short>
        <descr>
          <p>
            A typical application might have two ImageLists: one of<var>LargeImages</var> and one of <var>SmallImages</var> containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list.
          </p>
          <p>
            SmallImages could be displayed beside the text strings in the list view and the programmer would supply code to ensure that when an item with its associated SmallImage was selected, the corresponding LargeImage would be displayed in another window.
          </p>
          <p>
            A <var>TImageList</var> control needs to be selected and pasted on to the Form Designer and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.SmallImagesWidth">
        <short/>
        <descr>
          SmallImagesWidth is an Integer property that indicates the width used for small images displayed in the list view. The default value for the property is zero (0).
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.SortType">
        <short>
          Sets sorting order for current sorting column: by text, by Data of items, both or none
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.SortColumn">
        <short>Index of column, by which ListView was last sorted. -1 for none.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.SortDirection">
        <short>Sets sorting direction for current sorting column.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.StateImages">
        <short>
          ImageList object, which contains "state" icons, for item states: selected, normal, etc
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.StateImagesWidth">
        <short/>
        <descr>
          StateImagesWidth is an Integer property the represents width used for state images displayed in the list view. The default value for the property is zero (0).
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.ToolTips">
        <short>
          Automatically show hints (tooltips) for ListView items, when mouse is over items
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ViewStyle">
        <short>
          Sets one of ListView layouts: List (simple column), Report (few columns with full width), Icon (big icons), Small Icon (small icons, 16x16)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnChange">
        <short>Called when content of list collection changes.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnColumnClick">
        <short>Called when user clicks on column's header area.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCompare">
        <short>Called during sorting of list, by one of columns, to compare items.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCreateItemClass">
        <short>
          Event handler signalled to get the class used to create new list view items
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnData">
        <short>Called for owner-data mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDataFind">
        <short>Called for owner-data mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDataHint">
        <short>Called for owner-data mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDataStateChange">
        <short>Called for owner-data mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDeletion">
        <short>Called when items are deleted by code.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnEdited">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnEditing">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnInsert">
        <short>Called when items are inserted by code</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnItemChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnSelectItem">
        <short>Called when items are selected or selection changes</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCustomDraw">
        <short>Called for owner-draw mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCustomDrawItem">
        <short>Called for owner-draw mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnCustomDrawSubItem">
        <short>Called for owner-draw mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnDrawItem">
        <short>event handler signalled to render an owner drawn item</short>
        <descr>
          <p>
            OnDrawItem is a TLVDrawItemEvent  property which is the event handler signalled to render an owner drawn item. The event is triggered (when assigned) in the DrawItem method only when OwnerDraw is set to True and ViewStyle contains vsReport.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.OwnerDraw"/>
          <link id="TCustomListView.ViewStyle"/>
          <link id="TCustomListView.DrawItem"/>
        </seealso>
      </element>

      <element name="TCustomListView.OnAdvancedCustomDraw">
        <short>Called for owner-draw mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnAdvancedCustomDrawItem">
        <short>Called for owner-draw mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OnAdvancedCustomDrawSubItem">
        <short>Called for owner-draw mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Create">
        <short>
          <var>Create</var> - constructor for TCustomListView: calls inherited <var>Create</var> then initializes columns, the list of items, the canvas and properties and some formats and styles
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomListView.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomListView.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomListView</var>: frees Canvas, calls inherited <var>Destroy</var> and frees columns, links and list items
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomListView.AddItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.AddItem.Item">
        <short/>
      </element>
      <element name="TCustomListView.AddItem.AObject">
        <short/>
      </element>

      <element name="TCustomListView.AlphaSort">
        <short/>
        <descr>
        Always sorts column 0 in sdAscending order.
      </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.AlphaSort.Result">
        <short/>
      </element>

      <element name="TCustomListView.Sort">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.CustomSort">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.CustomSort.Result">
        <short/>
      </element>
      <element name="TCustomListView.CustomSort.ASortProc">
        <short/>
      </element>
      <element name="TCustomListView.CustomSort.AOptionalParam">
        <short/>
      </element>

      <element name="TCustomListView.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start updating the list view
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Clear">
        <short>
          <var>Clear</var> - the stringlist
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish updating the list view
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Repaint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.FindCaption">
        <short>
          <var>FindCaption</var>- search for and return the list item that contains the nominated caption
        </short>
        <descr>
          <p>
            <var>FindCaption</var>- search for and return the list item that contains the nominated caption.
          </p>
          <p>
            Starting from item at <var>StartIndex</var>
          </p>
          <p>
            Looking for the string with the content in <var>Value</var>
          </p>
          <p>
            <var>Partial, Inclusive, Wrap, PartStart</var>: Boolean arguments that allow matches with part of the string, permitting the string to wrap over a line, etc.
          </p>
        </descr>
      </element>

      <element name="TCustomListView.FindData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.FindData.Result">
        <short/>
      </element>
      <element name="TCustomListView.FindData.StartIndex">
        <short/>
      </element>
      <element name="TCustomListView.FindData.Value">
        <short/>
      </element>
      <element name="TCustomListView.FindData.Inclusive">
        <short/>
      </element>
      <element name="TCustomListView.FindData.Wrap">
        <short/>
      </element>

      <element name="TCustomListView.GetHitTestInfoAt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListView.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TCustomListView.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TCustomListView.GetItemAt">
        <short>
          <var>GetItemAt</var> - find and return the list item at the specified coordinates
        </short>
      </element>
      <element name="TCustomListView.GetItemAt.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetItemAt.x">
        <short/>
      </element>
      <element name="TCustomListView.GetItemAt.y">
        <short/>
      </element>

      <element name="TCustomListView.GetNearestItem">
        <short/>
        <descr>
          <p>
            GetNearestItem is used to locate a list item from a position specified in pixel coordinates relative to the top left corner of the list view. It starts looking at the position specified by the Point parameter, and moves in the direction indicated by the Direction parameter until it locates a list item.If no item is found Nil is returned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.GetNearestItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetNearestItem.APoint">
        <short/>
      </element>
      <element name="TCustomListView.GetNearestItem.Direction">
        <short/>
      </element>

      <element name="TCustomListView.GetNextItem">
        <short/>
        <descr>
          <p>
            GetNextItem is a TListItem function used to find the next list item after StartItem in the direction given by the Direction parameter. Only items in the state indicated by the States parameter are considered. If no item is found Nil is returned.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.GetNextItem.Result">
        <short/>
      </element>
      <element name="TCustomListView.GetNextItem.StartItem">
        <short/>
      </element>
      <element name="TCustomListView.GetNextItem.Direction">
        <short/>
      </element>
      <element name="TCustomListView.GetNextItem.States">
        <short/>
      </element>

      <element name="TCustomListView.ClearSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.SelectAll">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.IsEditing">
        <short/>
        <descr>
          Delphi compatible function which returns if our listview editor is active.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.IsEditing.Result">
        <short/>
      </element>

      <element name="TCustomListView.BoundingRect">
        <short>Coordinates of the rectangle containing the ListView</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>

      <element name="TCustomListView.Canvas">
        <short>TCanvas object, defines the area on which all graphic is drawn</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Checkboxes">
        <short>
          Show the check-boxes column, at the side of usual lines. Allows to check/uncheck items
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Column">
        <short>Property of ListView columns.</short>
        <descr>
          <p>
            This property can be used to read the information of a column.
          </p>
          <p>
            The column whose information is to be retrieved is determined by an index (AIndex). As with nearly all indexes, this index is 0 based. In column[0] the caption of the listitem is show, in subsequent column the subitems of the listitem are shown.
          </p>
          <p>
            To add, change or delete a column use the Columns property.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListView.Column.AIndex">
        <short>
          Integer to determine the column of the ListView to retrieve information on
        </short>
      </element>

      <element name="TCustomListView.ColumnCount">
        <short/>
        <descr>
          ColumnCount is a read-only Integer property which indicates the number of columns displayed for the list view.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.DropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.FlatScrollBars">
        <short>
          Show ListView scrollbars in "flat" style (default off, not for all widgetsets)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.FullDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.GridLines">
        <short>Show 1-pixel lines, as a grid, between rows and columns.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.HotTrack">
        <short>
          Allow to highlight/underline current ListView item, which is under mouse cursor
        </short>
        <descr>
          <p>
            <var>HotTrack</var> is the name given to the feature whereby, as the mouse pointer moves over some graphic item (e.g. a tab, an entry in a list, a button or other control in a form), that item becomes emphasized in some way.
          </p>
          <p>
            The default list of emphasis possibilities is given by the definition.
          </p>
          <code>TListHotTrackStyle = (htHandPoint, htUnderlineCold, htUnderlineHot)</code>
          <p>In other words:</p>
          <ul>
            <li>
              It may be indicated by a hand pointer
            </li>
            <li>
              It may be underlined even when Cold (i.e. the pointer has covered it and moved on but the underlining remains)
            </li>
            <li>
              It may be underlined when Hot (i.e. when the pointer is directly on the item)
            </li>
          </ul>
          <p>
            This feature can be used in List Views and in TabControls.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListView.HotTrack"/>
        </seealso>
      </element>

      <element name="TCustomListView.HotTrackStyles">
        <short>More options for HotTrack property.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.IconOptions">
        <short>
          Options for layouts, which show icons. Sets arrangement of icons, text-wrapping state
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ItemFocused">
        <short>ListView item, which is shown as focused.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Items">
        <short>Collection of items in ListView.</short>
        <descr>
          <p>
            <var>Items</var> - the list of entries in the list. Held as a linked list with a cached index of the last accessed item.
          </p>
          <p>
            <var>Items</var> is of type <var>TListitems</var> which has a built-in cache of the last accessed item. This speeds up interface updates since <var>Item.Index</var> is often used for the same item updating more properties. If <var>FCacheIndex</var> = -1 then the cache is not valid.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomListView.MultiSelect">
        <short>
          Allow to select several Listview items at a time, using Ctrl+click (select one item more)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.OwnerData">
        <short>
          Use owner-data mode for ListView. It means, that ListView don't contain items, you must supply them using OnData* events.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ReadOnly">
        <short>Don't allow user to change item captions, by click with a delay.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.RowSelect">
        <short>
          In Report view, this allows to highlight entire selected row, until right edge of ListView
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.SelCount">
        <short>Number of currently selected items.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.Selected">
        <short>Listview item, which is 1st selected.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.LastSelected">
        <short>Listview item, which is last selected, in MultiSelect mode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.TopItem">
        <short>Listview item, which is shown at the top edge of ListView.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.ViewOrigin">
        <short>
          Coordinate of the left/top visible point in ListView, updates when Listview scrolls
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListView.VisibleRowCount">
        <short>
          Number of rows, which is currently shown with current Listview position/size/layout
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TListView">
        <short>
          <var>TListView </var> - a window showing a list of <var>Items</var> which may or may not have associated icons
        </short>
        <descr>
          <p>
            <var>TListView </var>- a window showing a list of items which may or may not have associated icons.
          </p>
          <p>
            At first this control looks very like <link id="#lcl.stdctrls.TListBox">TListBox</link> but it has a much higher degree of complexity. It is capable of displaying Items in <var>Columns</var> of <var>Rows</var> and it can have images associated with the list <var>Items</var>.
          </p>
          <p>
            The important information is held in <var>Items</var>, a string-list that can be created using the string-list editor obtained by right-clicking on the ListView in the Form Editor or by clicking on the ellipsis (<b>...</b>) next to the <var>Items</var> entry in the Object Inspector.
          </p>
          <p>
            A typical application might have two ImageLists: one of<var>LargeImages</var> and one of <var>SmallImages</var>, containing two versions of the same collection of images, in large and small format; the index numbers of the first list would correspond with those in the second list.
          </p>
          <p>
            <var>SmallImages</var> (if assigned to a string-list) can be displayed beside the text strings in the list view and the programmer would supply code to ensure that when an item with its associated Small Image was selected, the corresponding Large Image would be displayed in another window.
          </p>
          <p>
            One or more <var>TImageList</var> controls need to be selected and pasted on to the Form Designer and the ImageList Editor can be opened from the pop-up menu obtained by right-clicking on <var>TImageList</var> icon in the Form Designer. The image list can be populated by reading from files. Then in the StringList editor for <var>Items</var> the correct <var>ImageIndex</var> must be allocated to each entry in the list.
          </p>
        </descr>
      </element>

      <element name="TListView.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TListView.AllocBy" link="#lcl.comctrls.TCustomListView.AllocBy"/>
      <element name="TListView.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TListView.AutoSort" link="#lcl.comctrls.TCustomListView.AutoSort"/>
      <element name="TListView.AutoSortIndicator" link="#lcl.comctrls.TCustomListView.AutoSortIndicator"/>
      <element name="TListView.AutoWidthLastColumn" link="#lcl.comctrls.TCustomListView.AutoWidthLastColumn"/>
      <element name="TListView.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TListView.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TListView.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="TListView.Checkboxes" link="#lcl.comctrls.TCustomListView.Checkboxes"/>
      <element name="TListView.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TListView.Columns" link="#lcl.comctrls.TCustomListView.Columns"/>
      <element name="TListView.ColumnClick" link="#lcl.comctrls.TCustomListView.ColumnClick"/>
      <element name="TListView.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TListView.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TListView.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TListView.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TListView.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TListView.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TListView.GridLines" link="#lcl.comctrls.TCustomListView.GridLines"/>
      <element name="TListView.HideSelection" link="#lcl.comctrls.TCustomListView.HideSelection"/>
      <element name="TListView.IconOptions" link="#lcl.comctrls.TCustomListView.IconOptions"/>
      <element name="TListView.Items" link="#lcl.comctrls.TCustomListView.Items"/>
      <element name="TListView.LargeImages" link="#lcl.comctrls.TCustomListView.LargeImages"/>
      <element name="TListView.LargeImagesWidth" link="#lcl.comctrls.TCustomListView.LargeImagesWidth"/>
      <element name="TListView.MultiSelect" link="#lcl.comctrls.TCustomListView.MultiSelect"/>
      <element name="TListView.OwnerData" link="#lcl.comctrls.TCustomListView.OwnerData"/>
      <element name="TListView.OwnerDraw" link="#lcl.comctrls.TCustomListView.OwnerDraw"/>
      <element name="TListView.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TListView.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TListView.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TListView.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TListView.ReadOnly" link="#lcl.comctrls.TCustomListView.ReadOnly"/>
      <element name="TListView.RowSelect" link="#lcl.comctrls.TCustomListView.RowSelect"/>
      <element name="TListView.ScrollBars"  link="#lcl.comctrls.TCustomListView.ScrollBars"/>
      <element name="TListView.ShowColumnHeaders"  link="#lcl.comctrls.TCustomListView.ShowColumnHeaders"/>
      <element name="TListView.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TListView.SmallImages"  link="#lcl.comctrls.TCustomListView.SmallImages"/>
      <element name="TListView.SmallImagesWidth" link="#lcl.comctrls.TCustomListView.SmallImagesWidth"/>
      <element name="TListView.SortColumn" link="#lcl.comctrls.TCustomListView.SortColumn"/>
      <element name="TListView.SortDirection" link="#lcl.comctrls.TCustomListView.SortDirection"/>
      <element name="TListView.SortType" link="#lcl.comctrls.TCustomListView.SortType"/>
      <element name="TListView.StateImages" link="#lcl.comctrls.TCustomListView.StateImages"/>
      <element name="TListView.StateImagesWidth" link="#lcl.comctrls.TCustomListView.StateImagesWidth"/>
      <element name="TListView.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TListView.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TListView.ToolTips" link="#lcl.comctrls.TCustomListView.ToolTips"/>
      <element name="TListView.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TListView.ViewStyle" link="#lcl.comctrls.TCustomListView.ViewStyle"/>
      <element name="TListView.OnAdvancedCustomDraw" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDraw"/>
      <element name="TListView.OnAdvancedCustomDrawItem" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDrawItem"/>
      <element name="TListView.OnAdvancedCustomDrawSubItem" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDrawSubItem"/>
      <element name="TListView.OnChange" link="#lcl.comctrls.TCustomListView.OnChange"/>
      <element name="TListView.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TListView.OnColumnClick" link="#lcl.comctrls.TCustomListView.OnColumnClick"/>
      <element name="TListView.OnCompare" link="#lcl.comctrls.TCustomListView.OnCompare"/>
      <element name="TListView.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TListView.OnCreateItemClass" link="#lcl.comctrls.TCustomListView.OnCreateItemClass"/>
      <element name="TListView.OnCustomDraw" link="#lcl.comctrls.TCustomListView.OnCustomDraw"/>
      <element name="TListView.OnCustomDrawItem" link="#lcl.comctrls.TCustomListView.OnCustomDrawItem"/>
      <element name="TListView.OnCustomDrawSubItem" link="#lcl.comctrls.TCustomListView.OnCustomDrawSubItem"/>
      <element name="TListView.OnData" link="#lcl.comctrls.TCustomListView.OnData"/>
      <element name="TListView.OnDataFind" link="#lcl.comctrls.TCustomListView.OnDataFind"/>
      <element name="TListView.OnDataHint" link="#lcl.comctrls.TCustomListView.OnDataHint"/>
      <element name="TListView.OnDataStateChange" link="#lcl.comctrls.TCustomListView.OnDataStateChange"/>
      <element name="TListView.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TListView.OnDeletion" link="#lcl.comctrls.TCustomListView.OnDeletion"/>
      <element name="TListView.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TListView.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TListView.OnDrawItem" link="#lcl.comctrls.TCustomListView.OnDrawItem"/>
      <element name="TListView.OnEdited" link="#lcl.comctrls.TCustomListView.OnEdited"/>
      <element name="TListView.OnEditing" link="#lcl.comctrls.TCustomListView.OnEditing"/>
      <element name="TListView.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TListView.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TListView.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TListView.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TListView.OnInsert" link="#lcl.comctrls.TCustomListView.OnInsert"/>
      <element name="TListView.OnItemChecked" link="#lcl.comctrls.TCustomListView.OnItemChecked"/>
      <element name="TListView.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TListView.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TListView.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TListView.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TListView.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TListView.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TListView.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TListView.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TListView.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TListView.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TListView.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TListView.OnMouseWheelHorz" link="#LCL.Controls.TControl.OnMouseWheelHorz"/>
      <element name="TListView.OnMouseWheelLeft" link="#LCL.Controls.TControl.OnMouseWheelLeft"/>
      <element name="TListView.OnMouseWheelRight" link="#LCL.Controls.TControl.OnMouseWheelRight"/>
      <element name="TListView.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TListView.OnSelectItem" link="#lcl.comctrls.TCustomListView.OnSelectItem"/>
      <element name="TListView.OnShowHint" link="#LCL.Controls.TControl.OnShowHint"/>
      <element name="TListView.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TListView.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TListView.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>

      <element name="TProgressBarOrientation">
        <short>
          <var>TProgressBarOrientation</var> - enumerated type with a series of constants denoting the orientation of the progress bar
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TProgressBarOrientation.pbHorizontal">
        <short/>
      </element>
      <element name="TProgressBarOrientation.pbVertical">
        <short/>
      </element>
      <element name="TProgressBarOrientation.pbRightToLeft">
        <short/>
      </element>
      <element name="TProgressBarOrientation.pbTopDown">
        <short/>
      </element>

      <element name="TProgressBarStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TProgressBarStyle.pbstNormal">
        <short/>
      </element>
      <element name="TProgressBarStyle.pbstMarquee">
        <short/>
      </element>

      <element name="TCustomProgressBar">
        <short>
          The ancestor class for <var>TProgressBar</var>
        </short>
        <descr>
          <p>
            <var>TCustomProgressBar</var> is the ancestor for <var>TProgressBar</var>. If you want to define your own ProgressBar class, you should derive it from this class.
          </p>
        </descr>
      </element>

      <element name="TCustomProgressBar.FMin"/>
      <element name="TCustomProgressBar.FMax"/>
      <element name="TCustomProgressBar.FStep"/>
      <element name="TCustomProgressBar.FPosition"/>
      <element name="TCustomProgressBar.FSmooth"/>
      <element name="TCustomProgressBar.FBarShowText"/>
      <element name="TCustomProgressBar.FBarTextFormat"/>
      <element name="TCustomProgressBar.FOrientation"/>
      <element name="TCustomProgressBar.FStyle"/>

      <element name="TCustomProgressBar.GetMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.GetMin.Result">
        <short/>
      </element>

      <element name="TCustomProgressBar.GetMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.GetMax.Result">
        <short/>
      </element>

      <element name="TCustomProgressBar.GetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.GetPosition.Result">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetParams">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetParams.AMin">
        <short/>
      </element>
      <element name="TCustomProgressBar.SetParams.AMax">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetMin.Value">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetMax.Value">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetPosition.Value">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetStep">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetStep.Value">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetSmooth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetSmooth.Value">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetBarShowText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetBarShowText.Value">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetOrientation.Value">
        <short/>
      </element>

      <element name="TCustomProgressBar.SetStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.SetStyle.AValue">
        <short/>
      </element>

      <element name="TCustomProgressBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomProgressBar.ApplyChanges">
        <short>
          <var>ApplyChanges</var> - apply any changes that have occurred
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.InitializeWnd">
        <short>
          <var>InitializeWnd</var> calls inherited method then applies changes
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Loaded">
        <short>
          <var>Loaded</var> calls inherited method then applies changes
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>

      <element name="TCustomProgressBar.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>

      <element name="TCustomProgressBar.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomProgressBar</var>: calls inherited <var>Create</var>, initializes position, orientation and size
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomProgressBar.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomProgressBar.StepIt">
        <short>
          <var>StepIt</var> - move indicator to new position (current position plus Step)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.StepBy">
        <short>
          <var>StepBy</var> - move indicator by amount specified in Delta
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomProgressBar.StepBy.Delta">
        <short/>
      </element>

      <element name="TCustomProgressBar.Max">
        <short>
          <var>Max</var> - maximum value for progressbar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.Min">
        <short>
          <var>Min</var> - minimum value of progressbar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.Orientation">
        <short>
          <var>Orientation</var> - horizontal or vertical
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.Position">
        <short>
          <var>Position</var> of indicator along progressbar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.Smooth">
        <short>Whether <var>Smooth</var> display (True) or stepped</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.Step">
        <short>
          <var>Step</var> - size of increment for display
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.Style">
        <short/>
        <descr>
          The default value for the property is pbstNormal.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomProgressBar.BarShowText">
        <short>
          <var>BarShowText</var> - some widgetsets allow text to be displayed on the bar to indicate its position (e.g. 32%)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TProgressBar">
        <short>
          <var>TProgress Bar</var> - a bar that depicts what proportion of a process has been completed
        </short>
        <descr>
          <p>
            <var>TProgress Bar</var> is a <var>TCustomProgressBar</var> descendant that implements a control which depicts the progress of a process, or the proportion of the process that has been completed. A series of colored rectangles appears in the control filling it from left to right or from top to bottom to represent the progress for the process.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <element name="TProgressBar.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TProgressBar.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TProgressBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TProgressBar.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="TProgressBar.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TProgressBar.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TProgressBar.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TProgressBar.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TProgressBar.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TProgressBar.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TProgressBar.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TProgressBar.Hint" link="#LCL.Controls.TControl.Hint"/>
      <element name="TProgressBar.Max" link="#LCL.ComCtrls.TCustomProgressBar.Max"/>
      <element name="TProgressBar.Min" link="#LCL.ComCtrls.TCustomProgressBar.Min"/>
      <element name="TProgressBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TProgressBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TProgressBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TProgressBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TProgressBar.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TProgressBar.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TProgressBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TProgressBar.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TProgressBar.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TProgressBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TProgressBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TProgressBar.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TProgressBar.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TProgressBar.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TProgressBar.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TProgressBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TProgressBar.Orientation" link="#LCL.ComCtrls.TCustomProgressBar.Orientation"/>
      <element name="TProgressBar.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TProgressBar.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TProgressBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TProgressBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TProgressBar.Position" link="#LCL.ComCtrls.TCustomProgressBar.Position"/>
      <element name="TProgressBar.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TProgressBar.Smooth" link="#LCL.ComCtrls.TCustomProgressBar.Smooth"/>
      <element name="TProgressBar.Step" link="#LCL.ComCtrls.TCustomProgressBar.Step"/>
      <element name="TProgressBar.Style" link="#LCL.ComCtrls.TCustomProgressBar.Style"/>
      <element name="TProgressBar.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TProgressBar.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TProgressBar.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TProgressBar.BarShowText" link="#LCL.ComCtrls.TCustomProgressBar.BarShowText"/>

      <element name="TUDAlignButton">
        <short>
          <var>TUDAlignButton</var> - enumerated type contains constants for alignment of an UpDown button
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDAlignButton.udLeft">
        <short/>
      </element>
      <element name="TUDAlignButton.udRight">
        <short/>
      </element>
      <element name="TUDAlignButton.udTop">
        <short/>
      </element>
      <element name="TUDAlignButton.udBottom">
        <short/>
      </element>

      <element name="TUDOrientation">
        <short>
          <var>TUDOrientation</var> - enumerated type with constants for orientation of UpDown button (Horizontal or Vertical)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDOrientation.udHorizontal">
        <short/>
      </element>
      <element name="TUDOrientation.udVertical">
        <short/>
      </element>

      <element name="TUpDownDirection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TUpDownDirection.updNone">
        <short/>
      </element>
      <element name="TUpDownDirection.updUp">
        <short/>
      </element>
      <element name="TUpDownDirection.updDown">
        <short/>
      </element>

      <element name="TUDBtnType">
        <short>
          <var>TUDBtnType</var> - enumerated type with constants describing the buttons of an UpDown control: Next or Previous
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDBtnType.btNext">
        <short/>
      </element>
      <element name="TUDBtnType.btPrev">
        <short/>
      </element>

      <element name="TUDClickEvent">
        <short>
          <var>TUDClickEvent</var> - generic event handling procedure for clicking on an UpDown button
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDClickEvent.Sender">
        <short/>
      </element>
      <element name="TUDClickEvent.Button">
        <short/>
      </element>

      <element name="TUDChangingEvent">
        <short>
          <var>TUDChangingEvent</var> - generic event handling procedure for changes in UpDown button
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDChangingEvent.Sender">
        <short/>
      </element>
      <element name="TUDChangingEvent.AllowChange">
        <short/>
      </element>

      <element name="TUDChangingEventEx">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TUDChangingEventEx.Sender">
        <short/>
      </element>
      <element name="TUDChangingEventEx.AllowChange">
        <short/>
      </element>
      <element name="TUDChangingEventEx.NewValue">
        <short/>
      </element>
      <element name="TUDChangingEventEx.Direction">
        <short/>
      </element>

      <element name="TCustomUpDown">
        <short>
          <var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display
        </short>
        <descr>
          <p>
            <var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display.
          </p>
          <p>
            The control definition itself does not specify the variable upon which the buttons operate. The application programmer is responsible for supplying an event handler for <var>OnClick</var> to determine which button has been selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing or decrementing the variable in the control with which the UpDown is associated.
          </p>
          <p>
            The amount by which the variable is changed is set by the integer property <var>Increment</var> with the optional multiplier <var>Thousands</var> (a boolean property).
          </p>
          <p>
            For example the UpDown control may be used to move a slider up and down a scale by a specified amount for each click; alternatively a number may be displayed in a text box and clicking the buttons of the UpDown control may increment or decrement the number displayed by a specified amount.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomUpDown.FAlignButton"/>
      <element name="TCustomUpDown.FArrowKeys"/>
      <element name="TCustomUpDown.FAssociate"/>
      <element name="TCustomUpDown.FCanChangeDir"/>
      <element name="TCustomUpDown.FCanChangePos"/>
      <element name="TCustomUpDown.FIncrement"/>
      <element name="TCustomUpDown.FMax"/>
      <element name="TCustomUpDown.FMaxBtn"/>
      <element name="TCustomUpDown.FMin"/>
      <element name="TCustomUpDown.FMinBtn"/>
      <element name="TCustomUpDown.FMinRepeatInterval"/>
      <element name="TCustomUpDown.FMouseDownBounds"/>
      <element name="TCustomUpDown.FMouseTimerEvent"/>
      <element name="TCustomUpDown.FMouseInsideComp"/>
      <element name="TCustomUpDown.FOnChanging"/>
      <element name="TCustomUpDown.FOnChangingEx"/>
      <element name="TCustomUpDown.FOnClick"/>
      <element name="TCustomUpDown.FOrientation"/>
      <element name="TCustomUpDown.FPosition"/>
      <element name="TCustomUpDown.FThousands"/>
      <element name="TCustomUpDown.FWrap"/>

      <element name="TCustomUpDown.FUseWS">
        <short>Indicates if the control depends on access to its WidgetSet class</short>
        <descr>
          <p>
            FUseWS is a private Boolean member used to indicate if the control depends on  access to its WidgetSet class instance. The value in FUseWS is set in the constructor for the class instance.
          </p>
          <p>
            FUseWS is used in the constructor to ensure that buttons are created for Prev and Next values when they are not part of the widgetset class implementation.
          </p>
          <p>
            FUseWS is used in the InitializeWnd method to determine if the property values must be set in the widgetset class, including: MinPosition, MaxPosition, Position, Increment, Wrap, Orientation, and UseArrowKeys.
          </p>
          <p>
            FUseWS is used in the UpdateOrientation method to determine whether the action is implemented in the widgetset class, or handled in TCustomUpDown.
          </p>
          <p>
            FUseWS is used in the AdjustPos method to determine whether a change in the control value using its buttons is handled in the current class instance, or forwarded to the appropriate button click method in the widgetset class. Similarly, handling for mouse wheel events are determined using the FUseWS member.
          </p>
        </descr>
        <version>Introduced in LCL version 2.1.0.</version>
        <seealso/>
      </element>

      <element name="TCustomUpDown.CheckMouseEntering">
        <short>Indicates if the mouse pointer has entered the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CheckMouseEntering.Result">
        <short>True when the mouse pointer in within the bounds for the control</short>
      </element>

      <element name="TCustomUpDown.CheckMouseLeaving">
        <short>Indicates if the mouse pointer has exited the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CheckMouseLeaving.Result">
        <short>True when the mouse pointer is not in the client rectangle for the control</short>
      </element>

      <element name="TCustomUpDown.GetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.GetPosition.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.BTimerExec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.BTimerExec.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.GetFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.GetFlat.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.SetAlignButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetAlignButton.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetArrowKeys">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetArrowKeys.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetAssociate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetAssociate.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetIncrement">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetIncrement.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetMax.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetMin.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetMinRepeatInterval">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetMinRepeatInterval.AValue">
        <short/>
      </element>

      <element name="TCustomUpDown.SetOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetOrientation.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetPosition.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetThousands">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetThousands.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetFlat.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.SetWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetWrap.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.UpdateAlignButtonPos">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.UpdateOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.UpdateUpDownPositionText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomUpDown.AdjustPos">
        <short>
          Applies changes to the control value using its increment and decrement buttons
        </short>
        <descr>
          <p>
            AdjustPos is a method used to apply changes to the value for the control when the increment or decrement buttons are clicked. AdjustPos uses the value in the FUseWS member to determine if the change in value is handled in the widgetset class, or handled in TCustomUpDown.
          </p>
        </descr>
        <version>Introduced in LCL version 2.1.0.</version>
        <seealso>
          <link id="TCustomUpDown.AssociateKeyDown"/>
          <link id="TCustomUpDown.AssociateMouseWheel"/>
        </seealso>
      </element>
      <element name="TCustomUpDown.AdjustPos.incPos">
        <short>
          True when the position value is being incremented. False when being decremented.
        </short>
      </element>

      <element name="TCustomUpDown.InitializeWnd">
        <short/>
        <descr>
          <p>
            InitializeWnd is an overridden method used to initialize the widgetset class  for the control. InitializeWnd calls the inherited method. When the FUseWS member contains False, no additional actions are performed in the method. When it contains True, methods in its widgetset class are called to synchronize values in the Min, Max, Position, Increment, Wrap, Orientation, and UseArrowKeys properties.
          </p>
        </descr>
        <version>Introduced in LCL version 2.1.0.</version>
        <seealso/>
      </element>

      <element name="TCustomUpDown.AssociateKeyDown">
        <short>
          <var>AssociateKeyDown</var> - protected procedure for dealing with action to be taken if an associate key (Shift, Ctrl or Alt) is pressed while the control is active
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.AssociateKeyDown.Sender">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateKeyDown.Key">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateKeyDown.ShiftState">
        <short/>
      </element>

      <element name="TCustomUpDown.AssociateMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.Sender">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.WheelDelta">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.MousePos">
        <short/>
      </element>
      <element name="TCustomUpDown.AssociateMouseWheel.Handled">
        <short/>
      </element>

      <element name="TCustomUpDown.OnAssociateChangeBounds">
        <short>
          <var>OnAssociateChangeBounds</var> - event handler for a change in bounds of the associate control
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.OnAssociateChangeBounds.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.OnAssociateChangeEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.OnAssociateChangeEnabled.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.OnAssociateChangeVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.OnAssociateChangeVisible.Sender">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelDown.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelDown.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelDown.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelUp.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelUp.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelUp.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelLeft.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelLeft.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelLeft.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.DoMouseWheelRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelRight.Result">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelRight.Shift">
        <short/>
      </element>
      <element name="TCustomUpDown.DoMouseWheelRight.MousePos">
        <short/>
      </element>

      <element name="TCustomUpDown.MouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.MouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.DoSetBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.ALeft">
        <short/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.ATop">
        <short/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.AWidth">
        <short/>
      </element>
      <element name="TCustomUpDown.DoSetBounds.AHeight">
        <short/>
      </element>

      <element name="TCustomUpDown.SetEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.SetEnabled.Value">
        <short/>
      </element>

      <element name="TCustomUpDown.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values
        </short>
        <seealso>
          <link id="#LCL.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.CalculatePreferredSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomUpDown.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomUpDown.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TCustomUpDown.CanChange">
        <short>
          <var>CanChange</var> - if True, control can be changed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomUpDown.CanChange.Result">
        <short/>
      </element>

      <element name="TCustomUpDown.Notification">
        <short>
          <var>Notification</var> calls inherited method; if the operation requires removal of the associate control, this is performed
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomUpDown.Notification.Operation">
        <short/>
      </element>

      <element name="TCustomUpDown.Click">
        <short>
          <var>Click</var> - calls <var>OnClick</var> event handler if it is assigned
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.Click">TControl.Click</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.Click.Button">
        <short/>
      </element>

      <element name="TCustomUpDown.AlignButton">
        <short>
          <var>AlignButton</var> - how to align the button: left or right
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.ArrowKeys">
        <short>
          <var>ArrowKeys</var> - if True, the control can be operated by the keyboard's arrow keys which would simulate a click on the Next or Previous button
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Associate">
        <short>
          <var>Associate</var> - the associated control whose properties (controlled variable) are to be changed by the UpDown control
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Increment">
        <short>
          The amount by which the controlled variable is to be increased or decreased on each click
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Max">
        <short>
          <var>Max</var> - greatest value of controlled variable
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Min">
        <short>
          <var>Min</var> - least value of controlled variable
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.MinRepeatInterval">
        <short/>
        <descr>
          MinRepeatInterval is a Byte property.
          The default value for the property is 100.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomUpDown.OnChanging">
        <short>
          <var>OnChanging</var> - event handler for a change in the value of the controlled variable
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.OnChangingEx">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.OnClick">
        <short>
          <var>OnClick</var> - special event handler for a click on up or down button
        </short>
        <descr>
          <p>
            <var>OnClick</var> - special event handler for a click on up or down button.
          </p>
          <p>
            The event handler must determine whether the [next] or [prev] button was clicked and therefore whether to increment or decrement the controlled variable and adjust the display.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Orientation">
        <short>Whether horizontal or vertical</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Position">
        <short>The <var>Position</var> of the UpDown control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Thousands">
        <short>If True, multiply all displayed values and the Increment by 1000</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Flat">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Wrap">
        <short>
          If True, displayed control or value starts again from minimum or maximum value if  clicking a button would cause incrementing or decrementing beyond the extreme value
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomUpDown.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomUpDown</var>: calls inherited <var>Create</var>, initializes orientation, max and min, bounds, size and alignment
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
          <link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomUpDown.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomUpDown.Destroy">
        <short>
          <var>Destroy</var>  - destructor for <var>TCustomUpDown</var>: removes connection with associate control and calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TUpDown">
        <short>
          <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display
        </short>
        <descr>
          <p>
            <var>TUpDown</var> - a pair of arrow-like buttons which are used to increment or decrement some controlled variable; often attached to a scroll-bar but can also control a digital numeric display
          </p>
          <p>
            The control definition itself does not specify the variable upon which the buttons operate. The application programmer is responsible for supplying an event handler for <var>OnClick</var> to determine which button has been selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing or decrementing the variable in the control with which the UpDown is associated.
          </p>
          <p>
            The amount by which the variable is changed is set by the integer property <var>Increment</var> with the optional multiplier <var>Thousands</var> (a boolean property).
          </p>
          <p>
            For example the UpDown control may be used to move a slider up and down a scale by a specified amount for each click; alternatively a number may be displayed in a text box and clicking the buttons of the UpDown control may increment or decrement the number displayed by a specified amount.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TUpDown.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TUpDown.AlignButton" link="#LCL.ComCtrls.TCustomUpDown.AlignButton"/>
      <element name="TUpDown.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TUpDown.ArrowKeys" link="#LCL.ComCtrls.TCustomUpDown.ArrowKeys"/>
      <element name="TUpDown.Associate" link="#LCL.ComCtrls.TCustomUpDown.Associate"/>
      <element name="TUpDown.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TUpDown.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TUpDown.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TUpDown.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TUpDown.Hint" link="#LCL.Controls.TControl.Hint"/>
      <element name="TUpDown.Increment" link="#LCL.ComCtrls.TCustomUpDown.Increment"/>
      <element name="TUpDown.Max" link="#LCL.ComCtrls.TCustomUpDown.Max"/>
      <element name="TUpDown.Min" link="#LCL.ComCtrls.TCustomUpDown.Min"/>
      <element name="TUpDown.MinRepeatInterval" link="#lcl.comctrls.TCustomUpDown.MinRepeatInterval"/>
      <element name="TUpDown.OnChanging" link="#lcl.comctrls.TCustomUpDown.OnChanging"/>
      <element name="TUpDown.OnChangingEx" link="#lcl.comctrls.TCustomUpDown.OnChangingEx"/>
      <element name="TUpDown.OnClick" link="#LCL.ComCtrls.TCustomUpDown.OnClick"/>
      <element name="TUpDown.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TUpDown.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TUpDown.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TUpDown.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TUpDown.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TUpDown.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TUpDown.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TUpDown.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TUpDown.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TUpDown.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TUpDown.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TUpDown.OnMouseWheelHorz" link="#LCL.Controls.TControl.OnMouseWheelHorz"/>
      <element name="TUpDown.OnMouseWheelLeft" link="#LCL.Controls.TControl.OnMouseWheelLeft"/>
      <element name="TUpDown.OnMouseWheelRight" link="#LCL.Controls.TControl.OnMouseWheelRight"/>
      <element name="TUpDown.Orientation" link="#LCL.ComCtrls.TCustomUpDown.Orientation"/>
      <element name="TUpDown.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TUpDown.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TUpDown.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TUpDown.Position" link="#LCL.ComCtrls.TCustomUpDown.Position"/>
      <element name="TUpDown.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TUpDown.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TUpDown.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TUpDown.Thousands" link="#LCL.ComCtrls.TCustomUpDown.Thousands"/>
      <element name="TUpDown.Flat" link="#LCL.ComCtrls.TCustomUpDown.Flat"/>
      <element name="TUpDown.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TUpDown.Wrap" link="#LCL.ComCtrls.TCustomUpDown.Wrap"/>

      <element name="CN_DROPDOWNCLOSED">
        <short>Message constant</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButtonStyle">
        <short>
          <var>TToolButtonStyle</var> - enumerated type that determines the style of the tool buttons.
        </short>
        <descr>
          <p>These are the possible values of Style:</p>
          <ul>
            <li>
              <b>tbsButton</b> - The button appears and functions like a normal button.
            </li>
            <li>
              <b>tbsCheck</b> - Clicking the button toggles the Down property. Once selected, the button remains selected until clicked again.
            </li>
            <li>
              <b>tbsDivider</b> - The button appears as a vertical line on the toolbar (used to separate other controls).
            </li>
            <li>
              <b>tbsDropDown</b> - The button displays a downwards-pointing arrow (suitable for accessing a drop-down menu).
            </li>
            <li>
              <b>tbsSeparator</b> - The button appears as an empty space on the toolbar (used to separate other controls).
            </li>
          </ul>
        </descr>
        <seealso>
          <link id="TToolButton"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <element name="TToolButtonStyle.tbsButton">
        <descr>The button appears and functions like a normal button.</descr>
      </element>
      <element name="TToolButtonStyle.tbsCheck">
        <descr>Clicking the button toggles the Down property. Once selected, the button remains selected until clicked again.</descr>
      </element>
      <element name="TToolButtonStyle.tbsDropDown">
        <descr>The button displays a downwards-pointing arrow (suitable for accessing a drop-down menu).</descr>
      </element>
      <element name="TToolButtonStyle.tbsSeparator">
        <descr>The button appears as an empty space on the toolbar (used to separate other controls).</descr>
      </element>
      <element name="TToolButtonStyle.tbsDivider">
        <descr>The button appears as a vertical line on the toolbar (used to separate other controls).</descr>
      </element>

      <element name="TToolButtonFlag">
        <short>
          <var>TToolButtonFlag</var> - a series of flags that can be set by pressing the mouse on the control
        </short>
        <descr>
          <p>tbfPressed,     // set while mouse is pressed on button</p>
          <p>tbfArrowPressed // set while mouse is pressed on arrow button</p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolButtonFlag.tbfPressed">
        <short/>
      </element>

      <element name="TToolButtonFlags">
        <short>
          <var>TToolButtonFlags</var> - set of <var>TToolButtonFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButtonActionLink">
        <short>
          <var>TToolButtonActionLink</var> - links a ToolButton on the ToolBar to an Action on an ActionList
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButtonActionLink.AssignClient">
        <short>
          <var>AssignClient</var> calls inherited method then sets client as ToolButton
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TBasicActionLink.AssignClient">TBasicActionLink.AssignClient</link>
        </seealso>
      </element>
      <element name="TToolButtonActionLink.AssignClient.AClient">
        <short/>
      </element>

      <element name="TToolButtonActionLink.SetChecked">
        <short>
          <var>SetChecked</var> - stores the Checked status (True or False)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.SetChecked.Value">
        <short/>
      </element>

      <element name="TToolButtonActionLink.SetImageIndex">
        <short>
          <var>SetImageIndex</var> - stores the index value of the associated image
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.SetImageIndex.Value">
        <short/>
      </element>

      <element name="TToolButtonActionLink.IsCheckedLinked" link="#LCL.ActnList.TActionLink.IsCheckedLinked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.IsCheckedLinked.Result">
        <short/>
      </element>

      <element name="TToolButtonActionLink.IsImageIndexLinked" link="#LCL.ActnList.TActionLink.IsImageIndexLinked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButtonActionLink.IsImageIndexLinked.Result">
        <short/>
      </element>

      <element name="TToolButtonActionLinkClass">
        <short>
          <var>TToolButtonActionLinkClass</var> - class of <var>TToolButtonActionLink</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton">
        <short>
          <var>TToolButton</var> is a button control in a <var>TToolBar</var> object
        </short>
        <descr>
          <p>
            Use <var>TToolButton</var> to implement buttons on a toolbar. While other controls (including <var>TButton</var> and <var>TSpeedButton</var>) can be placed on toolbars, <var>TToolButton</var> utilizes special toolbar features to simplify the configuration of buttons and offers added display options such as pop-up borders and transparency.
          </p>
          <p>
            To place tool buttons on a toolbar at design time, select the toolbar, right-click, and choose New Button.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar"/>
          <link id="#lcl.stdctrls.TButton">TButton</link>
          <link id="#lcl.buttons.TSpeedButton">TSpeedButton</link>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>

      <element name="TToolButton.FAllowAllUp"/>
      <element name="TToolButton.FDown"/>
      <element name="TToolButton.FDropdownMenu"/>
      <element name="TToolButton.FGrouped"/>
      <element name="TToolButton.FImageIndex"/>
      <element name="TToolButton.FIndeterminate"/>
      <element name="TToolButton.FMarked"/>
      <element name="TToolButton.FMenuItem"/>
      <element name="TToolButton.FMouseInControl"/>
      <element name="TToolButton.FOnArrowClick"/>
      <element name="TToolButton.FShowCaption"/>
      <element name="TToolButton.FStyle"/>
      <element name="TToolButton.FToolButtonFlags"/>
      <element name="TToolButton.FUpdateCount"/>
      <element name="TToolButton.FWrap"/>
      <element name="TToolButton.FLastDropDownTick"/>
      <element name="TToolButton.FLastDown"/>

      <element name="TToolButton.GetGroupBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.GetGroupBounds.StartIndex">
        <short/>
      </element>
      <element name="TToolButton.GetGroupBounds.EndIndex">
        <short/>
      </element>

      <element name="TToolButton.GetIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.GetIndex.Result">
        <short/>
      </element>

      <element name="TToolButton.GetTextSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.GetTextSize.Result">
        <short/>
      </element>

      <element name="TToolButton.IsCheckedStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.IsCheckedStored.Result">
        <short/>
      </element>

      <element name="TToolButton.IsHeightStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.IsHeightStored.Result">
        <short/>
      </element>

      <element name="TToolButton.IsImageIndexStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.IsImageIndexStored.Result">
        <short/>
      </element>

      <element name="TToolButton.IsWidthStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.IsWidthStored.Result">
        <short/>
      </element>

      <element name="TToolButton.SetDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetDown.Value">
        <short/>
      </element>

      <element name="TToolButton.SetDropdownMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetDropdownMenu.Value">
        <short/>
      </element>

      <element name="TToolButton.SetGrouped">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetGrouped.Value">
        <short/>
      </element>

      <element name="TToolButton.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetImageIndex.Value">
        <short/>
      </element>

      <element name="TToolButton.SetIndeterminate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetIndeterminate.Value">
        <short/>
      </element>

      <element name="TToolButton.SetMarked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetMarked.Value">
        <short/>
      </element>

      <element name="TToolButton.SetMenuItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetMenuItem.Value">
        <short/>
      </element>

      <element name="TToolButton.SetShowCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetShowCaption.AValue">
        <short/>
      </element>

      <element name="TToolButton.SetStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetStyle.Value">
        <short/>
      </element>

      <element name="TToolButton.SetWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetWrap.Value">
        <short/>
      </element>

      <element name="TToolButton.SetMouseInControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetMouseInControl.NewMouseInControl">
        <short/>
      </element>

      <element name="TToolButton.CMEnabledChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.CMEnabledChanged.Message">
        <short/>
      </element>

      <element name="TToolButton.CMVisibleChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.CMVisibleChanged.Message">
        <short/>
      </element>

      <element name="TToolButton.CMHitTest">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.CMHitTest.Message">
        <short/>
      </element>

      <element name="TToolButton.cDefSeparatorWidth">
        <short/>
      </element>
      <element name="TToolButton.cDefDividerWidth">
        <short/>
      </element>
      <element name="TToolButton.cDefButtonDropDecArrowWidth">
        <short/>
      </element>

      <element name="TToolButton.FToolBar">
        <short>
          <var>FToolBar</var> - local variable indicating in which toolbar this button lives
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TToolButton.CopyPropertiesFromMenuItem">
        <short>
          <var>CopyPropertiesFromMenuItem</var> - method for copying the properties of the corresponding Menu Item, to ensure that ToolButton and MenuItem produce the same behavior
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.CopyPropertiesFromMenuItem.Value">
        <short/>
      </element>

      <element name="TToolButton.GetActionLinkClass">
        <short>
          <var>GetActionLinkClass</var> - returns the Class of the ActionLink for this ToolButton
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.GetActionLinkClass">TControl.GetActionLinkClass</link>
        </seealso>
      </element>
      <element name="TToolButton.GetActionLinkClass.Result">
        <short/>
      </element>

      <element name="TToolButton.ActionChange">
        <short>
          <var>ActionChange</var> -  a method for changing the action associated with the Button
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.ActionChange">TControl.ActionChange</link>
        </seealso>
      </element>
      <element name="TToolButton.ActionChange.Sender">
        <short/>
      </element>
      <element name="TToolButton.ActionChange.CheckDefaults">
        <short/>
      </element>

      <element name="TToolButton.AssignTo">
        <short>
          <var>AssignTo</var> calls inherited method: if the destination is of correct type, copies <var>ImageIindex</var> to destination and sets the Checked property
        </short>
        <descr/>
        <seealso>
          <!-- Protected method excluded in RTL docs.... for some reason.-->
          <link id="#rtl.classes.TPersistent.AssignTo">TPersistent.AssignTo</link>
          <link id="#lcl.controls.TControl.AssignTo">TControl.AssignTo</link>
        </seealso>
      </element>
      <element name="TToolButton.AssignTo.Dest">
        <short/>
      </element>

      <element name="TToolButton.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.MouseMove" link="#LCL.Controls.TControl.MouseMove">
          <short/>
          <descr/>
          <seealso>
            <link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
          </seealso>
        </element>
      <element name="TToolButton.MouseMove.Shift"/>
      <element name="TToolButton.MouseMove.X"/>
      <element name="TToolButton.MouseMove.Y"/>

      <element name="TToolButton.MouseDown" link="#LCL.Controls.TControl.MouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.MouseDown.Button">
        <short/>
      </element>
      <element name="TToolButton.MouseDown.Shift">
        <short/>
      </element>
      <element name="TToolButton.MouseDown.X">
        <short/>
      </element>
      <element name="TToolButton.MouseDown.Y">
        <short/>
      </element>

      <element name="TToolButton.MouseUp" link="#LCL.Controls.TControl.MouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.MouseUp.Button">
        <short/>
      </element>
      <element name="TToolButton.MouseUp.Shift">
        <short/>
      </element>
      <element name="TToolButton.MouseUp.X">
        <short/>
      </element>
      <element name="TToolButton.MouseUp.Y">
        <short/>
      </element>

      <element name="TToolButton.MouseEnter" link="#LCL.Controls.TControl.MouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.MouseLeave" link="#LCL.Controls.TControl.MouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.Notification" link="#rtl.Classes.TComponent.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.Notification.AComponent">
        <short/>
      </element>
      <element name="TToolButton.Notification.Operation">
        <short/>
      </element>

      <element name="TToolButton.Paint" link="#LCL.Controls.TGraphicControl.Paint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.TextChanged" link="#LCL.Controls.TControl.TextChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.CalculatePreferredSize" link="#LCL.Controls.TControl.CalculatePreferredSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> returns its own defaults, overriding inherited values
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>

      <element name="TToolButton.Loaded" link="#LCL.Controls.TControl.Loaded">
        <short/>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TComponent.Loaded">TComponent.Loaded</link>
        </seealso>
      </element>

      <element name="TToolButton.RefreshControl">
        <short>
          <var>RefreshControl</var> - refreshes the drawing of the tool in case changes have been made
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.SetToolBar">
        <short>
          <var>SetToolBar</var> - records the existence of a new toolbar
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetToolBar.NewToolBar">
        <short/>
      </element>

      <element name="TToolButton.UpdateControl">
        <short>
          <var>UpdateControl</var> - brings the control up to date
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.GetButtonDrawDetail">
        <short>
          <var>GetButtonDrawDetail</var> - find theme information for Windows XP implementations
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.SetParent" link="#LCL.Controls.TControl.SetParent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetParent.AParent">
        <short/>
      </element>

      <element name="TToolButton.UpdateVisibleToolbar">
        <short>
          <var>UpdateVisibleToolbar</var> - updates just the visible part of the toolbar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.GroupAllUpAllowed">
        <short>
          <var>GroupAllUpAllowed</var> returns True if all buttons in a group are allowed to be 'Up'
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.GroupAllUpAllowed.Result">
        <short/>
      </element>

      <element name="TToolButton.DialogChar" link="#LCL.Controls.TControl.DialogChar"/>

      <element name="TToolButton.SetAutoSize" link="#LCL.Controls.TControl.SetAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.SetAutoSize.Value">
        <short/>
      </element>

      <element name="TToolButton.RealSetText" link="#LCL.Controls.TControl.RealSetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.RealSetText.AValue">
        <short/>
      </element>

      <element name="TToolButton.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TToolButton</var>. It calls the inherited <var>Create</var> method, and sets the initial values for the bounds and style properties.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TGraphicControl.Create">TGraphicControl.Create</link>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TToolButton.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TToolButton.CheckMenuDropdown">
        <short>
          <var>CheckMenuDropdown</var> - returns True if there is a  checked dropdown menu
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.CheckMenuDropdown.Result">
        <short/>
      </element>

      <element name="TToolButton.Click" link="#LCL.Controls.TControl.Click"/>

      <element name="TToolButton.ArrowClick">
        <short>Invokes the OnArrowClick event handler</short>
        <descr>
          <p>
            Executed automatically when the user clicks the arrow for the DropDown-style control (<var>Style</var> is set to <var>tbsDropDown</var>) , and no value has been assigned to <var>DropDownMenu</var>.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Style"/>
          <link id="TToolButton.DropDownMenu"/>
        </seealso>
      </element>

      <element name="TToolButton.GetCurrentIcon">
        <short>
          <var>GetCurrentIcon</var> - finds the icon for the current button
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.GetCurrentIcon.ImageList">
        <short/>
      </element>
      <element name="TToolButton.GetCurrentIcon.TheIndex">
        <short/>
      </element>
      <element name="TToolButton.GetCurrentIcon.TheEffect">
        <short/>
      </element>

      <element name="TToolButton.GetPreferredSize" link="#LCL.Controls.TControl.GetPreferredSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.GetPreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TToolButton.GetPreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TToolButton.GetPreferredSize.Raw">
        <short/>
      </element>
      <element name="TToolButton.GetPreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TToolButton.Index">
        <short>
          <var>Index </var>- is the sequence number for the current button in the list of buttons
        </short>
        <descr>
          <p>
            <var>Index</var> is a read-only <var>Integer</var> property with the sequence number for the current button in the list of buttons. When the internal toolbar button list has been assigned, its <var>IndexOf</var> method is called to get the position for the current class instance in the toolbar control. When the internal toolbar is unassigned (contains <b>Nil</b>), the value <b>-1</b> is used as the return value.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="TToolBar.ButtonList"/>
        </seealso>
      </element>

      <element name="TToolButton.PointInArrow">
        <short>
          Indicates if the specified position is within the bounds for the arrow drawn on a drop- down-style control
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolButton.PointInArrow.Result">
        <short>True when the coordinates are within the arrow for the drop-down</short>
      </element>
      <element name="TToolButton.PointInArrow.X">
        <short>Horizontal coordinate examined in the method</short>
      </element>
      <element name="TToolButton.PointInArrow.Y">
        <short>Vertical coordinate examined in the method</short>
      </element>

      <element name="TToolButton.Action" link="#LCL.Controls.TControl.Action"/>

      <element name="TToolButton.AllowAllUp">
        <short>
        </short>
        <descr>
          <p>
            <var>AllowAllUp</var>, when True, indicates that all buttons are allowed to be  'Up' at the same time. The default value for the property is False, and indicates that one of the buttons must be in the 'Down' state.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolButton.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.Caption" link="#LCL.Controls.TControl.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.Down">
        <short>Is this button <var>Down</var> (i.e. has it been selected)? Default false</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.DragKind" link="#LCL.Controls.TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.DropdownMenu">
        <short>A <var>DropDownMenu</var> that appears when this button is selected</short>
        <descr>
          <p>
            A <var>DropDownMenu</var> that appears when this button is selected.
          </p>
          <p>
            It uses the same code as a <link id="#lcl.menus.TPopupMenu">TPopupMenu</link> and offers a series of additional menu choices.
        </p>
        </descr>
      </element>

      <element name="TToolButton.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.Grouped">
        <short>Is this button a member of a group? Default false</short>
        <descr>
          <p>Is this button a member of a group?</p>
          <p>
            This would mean behavior similar to the radio buttons in a <link id="#lcl.extctrls.TRadioGroup">TRadioGroup</link> where only one button in the group can be selected, or the check boxes in a <link id="#lcl.extctrls.TCheckGroup">TCheckGroup</link> where more than one item can be selected but the members of the group interact in some way.
          </p>
        </descr>
      </element>

      <element name="TToolButton.Height" link="#LCL.Controls.TControl.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.ImageIndex">
        <short>
          <var>ImageIndex </var>- the index value of the image from the imagelist to be used with this button
        </short>
      </element>

      <element name="TToolButton.Indeterminate">
        <short>
          <var>Indeterminate</var> - if True, this button is in an unspecified state. Default False
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.Marked">
        <short>Is this button <var>Marked</var> (i.e. has it been selected)? Default false
      </short>
      <descr/>
      <seealso/>
      </element>

      <element name="TToolButton.MenuItem">
        <short>The item on the Main Menu with which this tool button is associated</short>
        <descr>
          <p>The item on the Main Menu with which this tool button is associated.</p>
          <p>Typically the buttons on the toolbar would each point to an entry on the menu action list which could also be accessed by using the Main Menu.</p>
        </descr>
      </element>

      <element name="TToolButton.OnArrowClick">
        <short>Executed when user clicked the arrow part for Style=tbsDropDown.</short>
        <descr>It is not executed if DropDownMenu is assigned.</descr>
      </element>

      <element name="TToolButton.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolButton.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TToolButton.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TToolButton.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TToolButton.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TToolButton.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TToolButton.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TToolButton.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TToolButton.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TToolButton.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TToolButton.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TToolButton.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TToolButton.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TToolButton.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TToolButton.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TToolButton.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TToolButton.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TToolButton.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>

      <element name="TToolButton.ShowCaption">
        <short>Show/Hide caption</short>
        <descr>The ToolBar.ShowCaptions has precedence. Hiding will only work if ToolBar.List is true.
        </descr>
      </element>

      <element name="TToolButton.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>

      <element name="TToolButton.Style">
        <short>Determines the style of the tool button.</short>
        <descr>See TToolButtonStyle for the possible Style values.</descr>
        <seealso>
          <link id="TToolButtonStyle"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>

      <element name="TToolButton.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TToolButton.Width" link="#LCL.Controls.TControl.Width"/>

      <element name="TToolButton.Wrap">
        <short>Has this button been wrapped to the next row?</short>
      </element>

      <element name="TToolBarEnumerator">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBarEnumerator.FToolBar"/>
      <element name="TToolBarEnumerator.FPosition"/>

      <element name="TToolBarEnumerator.GetCurrent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarEnumerator.GetCurrent.Result">
        <short/>
      </element>

      <element name="TToolBarEnumerator.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarEnumerator.Create.AToolBar">
        <short/>
      </element>

      <element name="TToolBarEnumerator.MoveNext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarEnumerator.MoveNext.Result">
        <short/>
      </element>

      <element name="TToolBarEnumerator.Current">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBarOnPaintButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarOnPaintButton.Sender">
        <short/>
      </element>
      <element name="TToolBarOnPaintButton.State">
        <short/>
      </element>

      <element name="TToolBarFlag">
        <short>
          <var>TToolBarFlag</var> - enumerated type for flags denoting status of ToolBar
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBarFlag.tbfUpdateVisibleBarNeeded">
        <short/>
      </element>
      <element name="TToolBarFlag.tbfPlacingControls">
        <short/>
      </element>

      <element name="TToolBarFlags">
        <short>
          <var>TToolBarFlags</var> - set of <var>TToolBarFlag</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.FOnPaint"/>
      <element name="TToolBar.FOnPaintButton"/>
      <element name="TToolBar.FButtonHeight"/>
      <element name="TToolBar.FRealizedButtonHeight"/>
      <element name="TToolBar.FRealizedButtonWidth"/>
      <element name="TToolBar.FRealizedDropDownWidth"/>
      <element name="TToolBar.FRealizedButtonDropWidth"/>
      <element name="TToolBar.FButtons"/>
      <element name="TToolBar.FButtonWidth"/>
      <element name="TToolBar.FDisabledImageChangeLink"/>
      <element name="TToolBar.FDisabledImages"/>
      <element name="TToolBar.FDropDownWidth"/>
      <element name="TToolBar.FThemeDropDownWidth"/>
      <element name="TToolBar.FThemeButtonDropWidth"/>
      <element name="TToolBar.FDropDownButton"/>
      <element name="TToolBar.FFlat"/>
      <element name="TToolBar.FHotImageChangeLink"/>
      <element name="TToolBar.FHotImages"/>
      <element name="TToolBar.FImageChangeLink"/>
      <element name="TToolBar.FImages"/>
      <element name="TToolBar.FIndent"/>
      <element name="TToolBar.FList"/>
      <element name="TToolBar.FNewStyle"/>
      <element name="TToolBar.FRowCount"/>
      <element name="TToolBar.FShowCaptions"/>
      <element name="TToolBar.FCurrentMenu"/>
      <element name="TToolBar.FCurrentMenuAutoFree"/>
      <element name="TToolBar.FSrcMenu"/>
      <element name="TToolBar.FSrcMenuItem"/>
      <element name="TToolBar.FToolBarFlags"/>
      <element name="TToolBar.FWrapable"/>
      <element name="TToolBar.FImagesWidth"/>

      <element name="TToolBar.ApplyFontForButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.CloseCurrentMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.GetButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetButton.Result">
        <short/>
      </element>
      <element name="TToolBar.GetButton.Index">
        <short/>
      </element>

      <element name="TToolBar.GetButtonCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetButtonCount.Result">
        <short/>
      </element>

      <element name="TToolBar.GetButtonDropWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetButtonDropWidth.Result">
        <short/>
      </element>

      <element name="TToolBar.GetButtonWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetButtonWidth.Result">
        <short/>
      </element>

      <element name="TToolBar.GetButtonHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetButtonHeight.Result">
        <short/>
      </element>

      <element name="TToolBar.GetDropDownWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetDropDownWidth.Result">
        <short/>
      </element>

      <element name="TToolBar.GetTransparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetTransparent.Result">
        <short/>
      </element>

      <element name="TToolBar.SetButtonHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetButtonHeight.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetButtonWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetButtonWidth.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetDisabledImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetDisabledImages.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetDropDownWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetDropDownWidth.ADropDownWidth">
        <short/>
      </element>

      <element name="TToolBar.SetFlat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetFlat.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetHotImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetHotImages.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetImages.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetImagesWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetImagesWidth.AImagesWidth">
        <short/>
      </element>

      <element name="TToolBar.SetIndent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetIndent.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetList.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetShowCaptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetShowCaptions.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetTransparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetTransparent.AValue">
        <short/>
      </element>

      <element name="TToolBar.SetWrapable">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetWrapable.AValue">
        <short/>
      </element>

      <element name="TToolBar.ToolButtonDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ToolButtonDown.AButton">
        <short/>
      </element>
      <element name="TToolBar.ToolButtonDown.NewDown">
        <short/>
      </element>

      <element name="TToolBar.ImageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ImageListChange.Sender">
        <short/>
      </element>

      <element name="TToolBar.DisabledImageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.DisabledImageListChange.Sender">
        <short/>
      </element>

      <element name="TToolBar.HotImageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.HotImageListChange.Sender">
        <short/>
      </element>

      <element name="TToolBar.UpdateVisibleBar">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.MoveSubMenuItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.MoveSubMenuItems.SrcMenuItem">
        <short/>
      </element>
      <element name="TToolBar.MoveSubMenuItems.DestMenuItem">
        <short/>
      </element>

      <element name="TToolBar.AddButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.AddButton.Button">
        <short/>
      </element>

      <element name="TToolBar.RemoveButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.RemoveButton.Button">
        <short/>
      </element>

      <element name="TToolBar.cDefButtonWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.cDefButtonHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.FPrevVertical">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.IsVertical">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.IsVertical.Result">
        <short/>
      </element>

      <element name="TToolBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TToolBar.AdjustClientRect" link="#LCL.Controls.TWinControl.AdjustClientRect"/>

      <element name="TToolBar.ButtonHeightIsStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ButtonHeightIsStored.Result">
        <short/>
      </element>

      <element name="TToolBar.ButtonWidthIsStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ButtonWidthIsStored.Result">
        <short/>
      </element>

      <element name="TToolBar.DropDownWidthIsStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.DropDownWidthIsStored.Result">
        <short/>
      </element>

      <element name="TToolBar.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults, overriding the inherited values
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>

      <element name="TToolBar.DoAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.CalculatePreferredSize" link="#LCL.Controls.TControl.CalculatePreferredSize"/>

      <element name="TToolBar.CheckMenuDropdown">
        <short>
          <var>CheckMenuDropdown</var> - returns True if there is a  checked dropdown menu
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.CheckMenuDropdown.Result">
        <short/>
      </element>
      <element name="TToolBar.CheckMenuDropdown.Button">
        <short/>
      </element>

      <element name="TToolBar.ClickButton">
        <short>
          <var>ClickButton</var> - software emulation of the <var>OnClick</var> event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.ClickButton.Button">
        <short/>
      </element>

      <element name="TToolBar.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.AlignControls" link="#LCL.Controls.TWinControl.AlignControls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.AlignControls.AControl">
        <short/>
      </element>
      <element name="TToolBar.AlignControls.RemainingClientRect">
        <short/>
      </element>

      <element name="TToolBar.FindButtonFromAccel">
        <short>
          <var>FindButtonFromAccel</var> - returns the Button corresponding to the specified accelerator key
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.FindButtonFromAccel.Result">
        <short/>
      </element>
      <element name="TToolBar.FindButtonFromAccel.Accel">
        <short/>
      </element>

      <element name="TToolBar.FontChanged">
        <short>
          Performs actions needed when the Font has changed for the control
        </short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden procedure which performs action needed when the <var>Font</var> for the control has been changed. FontChanged calls the inherited FontChanged method, and applies the new font to the Buttons in the tool bar. Values are reset in internal members used to track the realized height and width for buttons and drop downs in the tool bar.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short>
          Performs actions needed when the control has finished loading from the LCL streaming mechanism
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.Notification.AComponent">
        <short/>
      </element>
      <element name="TToolBar.Notification.Operation">
        <short/>
      </element>

      <element name="TToolBar.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short>Displays the tool bar</short>
        <descr>
          <p>
            <var>Paint</var> is an overridden procedure used to display the tool bar.  At design-time, a Red rectangle is drawn as a frame for the control. Paint calls the inherited Paint method to draw the inner and outer borders defined for the control. Paint signals the <var>OnPaint</var> event handler (when assigned) to perform drawing operations required for the tool bar.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.RepositionButton">
        <short>
          <var>RepositionButton</var> - method for re-positioning a button
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.RepositionButton.Index">
        <short/>
      </element>

      <element name="TToolBar.RepositionButtons">
        <short>
          <var>RepositionButtons</var> - method for re-positioning several buttons
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.RepositionButtons.Index">
        <short/>
      </element>

      <element name="TToolBar.WrapButtons">
        <short>
          <var>WrapButtons</var> - returns True if changing to NewHeight and NewWidth causes wrapping of buttons
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.WrapButtons.Result">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.UseSize">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.NewWidth">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.NewHeight">
        <short/>
      </element>
      <element name="TToolBar.WrapButtons.Simulate">
        <short/>
      </element>

      <element name="TToolBar.CNDropDownClosed">
        <short>Handles the CN_DROPDOWNCLOSED control notification message</short>
        <descr>
          <p>
            Calls <var>CloseCurrentMenu</var> to hide an active menu displayed for the control.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TToolBar.CNDropDownClosed.Message">
        <short>
          The CN_DROPDOWNCLOSED message and parameters handled in the method
        </short>
      </element>

      <element name="TToolBar.DoAutoAdjustLayout" link="#LCL.Controls.TControl.DoAutoAdjustLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TToolBar.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TToolBar.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TToolBar.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TToolBar</var>: calls inherited <var>Create</var> and sets many formatting and size defaults.
          </p>
          <p>
            Among the variables initialized and defaults set are the list of buttons, button width and height, style, indentation, alignment, links for image change, the bounds and the edge borders.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TToolBar.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TToolBar.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TToolBar</var>: frees buttons and links then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TToolBar.EndUpdate">
        <short>
          <var>EndUpdate</var> - finishes the update process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.FlipChildren" link="#LCL.Controls.TWinControl.FlipChildren">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.FlipChildren.AllLevels">
        <short/>
      </element>

      <element name="TToolBar.GetEnumerator">
        <short>Gets a TToolBarEnumerator enumerator for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.GetEnumerator.Result">
        <short>Enumerator class instance created in the method</short>
      </element>

      <element name="TToolBar.SetButtonSize">
        <short>
          <var>SetButtonSize</var> - stores new values for height and width
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToolBar.SetButtonSize.NewButtonWidth">
        <short/>
      </element>
      <element name="TToolBar.SetButtonSize.NewButtonHeight">
        <short/>
      </element>

      <element name="TToolBar.CanFocus" link="#LCL.Controls.TWinControl.CanFocus">
        <short>Always returns False for TToolBar</short>
      </element>
      <element name="TToolBar.CanFocus.Result">
        <short>Always returns False for TToolBar</short>
      </element>

      <element name="TToolBar.ButtonCount">
        <short>
          <var>ButtonCount</var> - the number of buttons on the ToolBar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Buttons">
        <short>Lists the tool buttons (<var>TToolButton</var>) in the toolbar.</short>
        <descr>
          <p>
            <var>Buttons</var> maintains a list of <var>TToolButton</var> instances. All tool buttons that share a <var>TToolBar</var> parent have the same height and (except for separators and dividers) the same width. Other controls on a toolbar are held in place by invisible separators, which are automatically created and destroyed.
          </p>
          <p>
            To add tool buttons to the toolbar at design time, select the toolbar, right-click, and choose New Button. To create a space (separator) between one button and the next, select New Separator. To create a divider between buttons, add a button and set its <var>Style</var> property to <var>tbsDivider</var>. Other controls may be added to the toolbar directly from the Component palette.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Style"/>
        </seealso>
        <example file="comctrls/ttoolbutton.pas"/>
      </element>
      <element name="TToolBar.Buttons.Index">
        <short/>
      </element>

      <element name="TToolBar.ButtonList">
        <short>
          <var>ButtonList</var> - the list of Buttons (as a <var>TList</var>)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.RowCount">
        <short>
          <var>RowCount</var> - the number of Rows of Buttons
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.ButtonDropWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TToolBar.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TToolBar.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TToolBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TToolBar.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>

      <element name="TToolBar.ButtonHeight">
        <short>
          <var>ButtonHeight</var> - the height of the buttons
        </short>
        <descr>
          <p>Use 0 for auto-sized value.</p>
          <p>
            An internal member with the real height for buttons is maintained when reading or writing the value for the property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.ButtonWidth">
        <short>
          <var>ButtonWidth</var> - the width of the buttons
        </short>
        <descr>
          <p>Use 0 for auto-sized value</p>
          <p>
            An internal member is maintained when reading or writing the value for the property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TToolBar.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TToolBar.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TToolBar.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TToolBar.Color" link="#LCL.Controls.TControl.Color"/>

      <element name="TToolBar.DisabledImages">
        <short>The Images on the Image List that are NOT selected for display</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TToolBar.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TToolBar.DragMode" link="#LCL.Controls.TControl.DragMode"/>

      <element name="TToolBar.DropDownWidth">
        <short>Width of the drop down arrow button.</short>
        <descr>
          <p>Use 0 for auto-sized value.</p>
        </descr>
      </element>

      <element name="TToolBar.EdgeBorders">
        <short>
          <var>EdgeBorders</var> - which borders form the edge
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.EdgeInner">
        <short>
          <var>EdgeInner</var> - this toolbar has an inner edge
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.EdgeOuter">
        <short>
          <var>EdgeOuter</var> - this toolbar has an outer edge
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Flat">
        <short>
          Indicates if the control is drawn with a flat appearance
        </short>
        <descr>
          <p>
            <var>Flat</var> is a <var>Boolean</var> property which indicates if the control is drawn using a flat appearance (when <b>True</b>), or a raised drawing style (when <b>False</b>). The default value for the property is <b>True</b>.
         </p>
         <p>
           Changing the value for the property causes the inherited <var>Invalidate</var> method to be called to refresh the control.
         </p>
        </descr>
        <seealso>
          <link id="#lcl.Controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
        </seealso>
      </element>

      <element name="TToolBar.Font" link="#LCL.Controls.TControl.Font"/>

      <element name="TToolBar.Height" link="#LCL.Controls.TControl.Height">
        <descr>
          The default value for the property is 32 (pixels).
        </descr>
      </element>

      <element name="TToolBar.HotImages">
        <short>The Images on the Image list that are selected for display</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Images">
        <short>The <var>Images</var> to be displayed on the buttons</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.ImagesWidth">
        <short>Width for images displayed on the tool bar</short>
        <descr>
          <p>
            <var>ImagesWidth</var> is an <var>Integer</var> property which indicates the width  for images displayed on the tool bar.  The default value for the property is zero (0).
          </p>
          <p>
            Changing the value in the property causes the <var>UpdateVisibleBar</var> method to be called to update control flags, and to resize both the control and its <var>Buttons</var>.
          </p>
        </descr>
        <seealso>
          <link id="TToolBar.Buttons"/>
          <link id="TToolButton"/>
        </seealso>
      </element>

      <element name="TToolBar.Indent">
        <short>
          <var>Indent</var> - the amount by which the buttons should be indented Default is 1
        </short>
      </element>

      <element name="TToolBar.List">
        <short>
          Should the contents of the toolbar be displayed as a <var>List</var>? Default false
        </short>
      </element>

      <element name="TToolBar.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.ShowCaptions">
        <short>
          <var>ShowCaptions</var> - should the captions be shown for the buttons? (Default False)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Transparent">
        <short>Is the ToolBar to be <var>Transparent</var>? Default False</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.Wrapable">
        <short>
          <var>Wrapable</var> - enables wrapping buttons to the next row if there are too many for the current row
        </short>
      </element>

      <element name="TToolBar.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnDblClick" link="#LCL.Controls.TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnPaintButton">
        <short>Event handler signalled to draw a button on the tool bar</short>
        <descr>
          <p>
            <var>OnPaintButton</var> is a <var>TToolBarOnPaintButton</var> property which contains the event handler signalled when one of the <var>Buttons</var> on the tool bar is drawn.
          </p>
        </descr>
        <seealso>
          <link id="TToolButton.Paint"/>
          <link id="TToolBar.Paint"/>
          <link id="TToolBar.OnPaint"/>
        </seealso>
      </element>

      <element name="TToolBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TToolBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TGrabStyle">
        <short>Represent drawing styles available for a grab bar in TCustomCoolBar</short>
        <descr>
          <p>
            <var>TGrabStyle</var> is an enumeration type with values used to represent drawing styles available for use with the grab bar in <var>TCustomCoolBar</var>. TGrabStyle is the type used to implement the <var>GrabStyle</var> property in TCustomCoolBar.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCoolBar.GrabStyle"/>
        </seealso>
      </element>
      <element name="TGrabStyle.gsSimple">
        <short/>
      </element>
      <element name="TGrabStyle.gsDouble">
        <short/>
      </element>
      <element name="TGrabStyle.gsHorLines">
        <short/>
      </element>
      <element name="TGrabStyle.gsVerLines">
        <short/>
      </element>
      <element name="TGrabStyle.gsGripper">
        <short/>
      </element>
      <element name="TGrabStyle.gsButton">
        <short/>
      </element>

      <element name="TDragBand">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TDragBand.dbNone">
        <short/>
      </element>
      <element name="TDragBand.dbMove">
        <short/>
      </element>
      <element name="TDragBand.dbResize">
        <short/>
      </element>

      <element name="TCoolBand">
        <short/>
        <descr>
          TCoolBand is a TCollectionItem descendant.
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBand.FCoolBar"/>
      <element name="TCoolBand.FControl"/>
      <element name="TCoolBand.FBitmap"/>
      <element name="TCoolBand.FBorderStyle"/>
      <element name="TCoolBand.FBreak"/>
      <element name="TCoolBand.FColor"/>
      <element name="TCoolBand.FFixedBackground"/>
      <element name="TCoolBand.FFixedSize"/>
      <element name="TCoolBand.FHeight"/>
      <element name="TCoolBand.FHorizontalOnly"/>
      <element name="TCoolBand.FImageIndex"/>
      <element name="TCoolBand.FMinHeight"/>
      <element name="TCoolBand.FMinWidth"/>
      <element name="TCoolBand.FParentBitmap"/>
      <element name="TCoolBand.FParentColor"/>
      <element name="TCoolBand.FRealLeft"/>
      <element name="TCoolBand.FRealWidth"/>
      <element name="TCoolBand.FText"/>
      <element name="TCoolBand.FVisible"/>
      <element name="TCoolBand.FWidth"/>
      <element name="TCoolBand.FLeft"/>
      <element name="TCoolBand.FTop"/>

      <element name="TCoolBand.IsBitmapStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.IsBitmapStored.Result">
        <short/>
      </element>

      <element name="TCoolBand.IsColorStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.IsColorStored.Result">
        <short/>
      </element>

      <element name="TCoolBand.GetRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.GetRight.Result">
        <short/>
      </element>

      <element name="TCoolBand.GetVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.GetVisible.Result">
        <short/>
      </element>

      <element name="TCoolBand.SetBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetBitmap.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetBorderStyle.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetBreak">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetBreak.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetColor.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetControl.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetFixedBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetFixedBackground.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetHorizontalOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetHorizontalOnly.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetImageIndex.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetMinHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetMinHeight.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetMinWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetMinWidth.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetParentBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetParentBitmap.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetParentColor.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetText.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetVisible.AValue">
        <short/>
      </element>

      <element name="TCoolBand.SetWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.SetWidth.AValue">
        <short/>
      </element>

      <element name="TCoolBand.cDefMinHeight">
        <short/>
      </element>

      <element name="TCoolBand.cDefMinWidth">
        <short/>
      </element>

      <element name="TCoolBand.cDefWidth">
        <short/>
      </element>

      <element name="TCoolBand.cGrabIndent">
        <short/>
      </element>

      <element name="TCoolBand.FControlLeft">
        <short/>
      </element>

      <element name="TCoolBand.FControlTop">
        <short/>
      </element>

      <element name="TCoolBand.FTextWidth">
        <short/>
      </element>

      <element name="TCoolBand.CalcControlLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcControlLeft.Result">
        <short/>
      </element>

      <element name="TCoolBand.CalcPreferredHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcPreferredHeight.Result">
        <short/>
      </element>

      <element name="TCoolBand.CalcPreferredWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcPreferredWidth.Result">
        <short/>
      </element>

      <element name="TCoolBand.CalcTextWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.CalcTextWidth.Result">
        <short/>
      </element>

      <element name="TCoolBand.GetDisplayName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.GetDisplayName.Result">
        <short/>
      </element>

      <element name="TCoolBand.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.Create.ACollection">
        <short>Collection which owns the items in the class instance</short>
      </element>

      <element name="TCoolBand.Destroy">
        <short>Destructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Assign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.Assign.ASource">
        <short/>
      </element>

      <element name="TCoolBand.AutosizeWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.InvalidateCoolBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBand.InvalidateCoolBar.Sender">
        <short/>
      </element>

      <element name="TCoolBand.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Right">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Bitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Break">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.FixedBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.FixedSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.HorizontalOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.MinHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.MinWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.ParentBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBand.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBands">
        <short/>
        <descr>
          TCoolBands is a TCollection descendant.
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBands.FCoolBar"/>

      <element name="TCoolBands.GetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.GetItem.Result">
        <short/>
      </element>
      <element name="TCoolBands.GetItem.Index">
        <short/>
      </element>

      <element name="TCoolBands.SetItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.SetItem.Index">
        <short/>
      </element>
      <element name="TCoolBands.SetItem.Value">
        <short/>
      </element>

      <element name="TCoolBands.GetOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.GetOwner.Result">
        <short/>
      </element>

      <element name="TCoolBands.Update">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.Update.AItem">
        <short/>
      </element>

      <element name="TCoolBands.Notify">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.Notify.AItem">
        <short/>
      </element>
      <element name="TCoolBands.Notify.AAction">
        <short/>
      </element>

      <element name="TCoolBands.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.Create.ACoolBar">
        <short>Control which owns the class instance</short>
      </element>

      <element name="TCoolBands.Add">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.Add.Result">
        <short/>
      </element>

      <element name="TCoolBands.FindBand">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.FindBand.Result">
        <short/>
      </element>
      <element name="TCoolBands.FindBand.AControl">
        <short/>
      </element>

      <element name="TCoolBands.FindBandIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.FindBandIndex.Result">
        <short/>
      </element>
      <element name="TCoolBands.FindBandIndex.AControl">
        <short/>
      </element>

      <element name="TCoolBands.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCoolBands.Items.Index">
        <short>Default property for the collection</short>
      </element>

      <element name="TCoolBandMaximize">
        <short/>
        <descr>
          BandMaximize is not used now but is needed for Delphi compatibility.
          It is not used in Delphi's TCoolBar implementation either.
        </descr>
        <seealso/>
      </element>
      <element name="TCoolBandMaximize.bmNone">
        <short/>
      </element>
      <element name="TCoolBandMaximize.bmClick">
        <short/>
      </element>
      <element name="TCoolBandMaximize.bmDblClick">
        <short/>
      </element>

      <element name="TCustomCoolBar">
        <short/>
        <descr>
          TCustomCoolBar is a TToolWindow descendant.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.FBands"/>
      <element name="TCustomCoolBar.FBandBorderStyle"/>
      <element name="TCustomCoolBar.FBandMaximize"/>
      <element name="TCustomCoolBar.FBitmap"/>
      <element name="TCustomCoolBar.FFixedSize"/>
      <element name="TCustomCoolBar.FFixedOrder"/>
      <element name="TCustomCoolBar.FGrabStyle"/>
      <element name="TCustomCoolBar.FGrabWidth"/>
      <element name="TCustomCoolBar.FHorizontalSpacing"/>
      <element name="TCustomCoolBar.FImages"/>
      <element name="TCustomCoolBar.FImageChangeLink"/>
      <element name="TCustomCoolBar.FOnChange"/>
      <element name="TCustomCoolBar.FShowText"/>
      <element name="TCustomCoolBar.FThemed"/>
      <element name="TCustomCoolBar.FVertical"/>
      <element name="TCustomCoolBar.FVerticalSpacing"/>
      <element name="TCustomCoolBar.FImagesWidth"/>

      <element name="TCustomCoolBar.GetAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.GetAlign.Result">
        <short/>
      </element>

      <element name="TCustomCoolBar.RowEndHelper">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.RowEndHelper.Result">
        <short/>
      </element>
      <element name="TCustomCoolBar.RowEndHelper.ALeft">
        <short/>
      </element>
      <element name="TCustomCoolBar.RowEndHelper.AVisibleIdx">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetBandBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetBandBorderStyle.AValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetBands">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetBands.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetBitmap.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetGrabStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetGrabStyle.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetGrabWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetGrabWidth.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetHorizontalSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetHorizontalSpacing.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetImages.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetImagesWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetImagesWidth.AImagesWidth">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetShowText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetShowText.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetThemed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetThemed.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetVertical">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetVertical.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetVerticalSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetVerticalSpacing.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.cDefGrabStyle">
        <short/>
      </element>
      <element name="TCustomCoolBar.cDefGrabWidth">
        <short/>
      </element>
      <element name="TCustomCoolBar.cDefHorSpacing">
        <short/>
      </element>
      <element name="TCustomCoolBar.cDefVerSpacing">
        <short/>
      </element>
      <element name="TCustomCoolBar.cNewRowBelow">
        <short/>
      </element>
      <element name="TCustomCoolBar.cNewRowAbove">
        <short/>
      </element>

      <element name="TCustomCoolBar.FBorderEdges">
        <short/>
      </element>
      <element name="TCustomCoolBar.FBorderLeft">
        <short/>
      </element>
      <element name="TCustomCoolBar.FBorderTop">
        <short/>
      </element>
      <element name="TCustomCoolBar.FBorderRight">
        <short/>
      </element>
      <element name="TCustomCoolBar.FBorderBottom">
        <short/>
      </element>
      <element name="TCustomCoolBar.FBorderWidth">
        <short/>
      </element>
      <element name="TCustomCoolBar.FCursorBkgnd">
        <short/>
      </element>
      <element name="TCustomCoolBar.FDragBand">
        <short/>
      </element>
      <element name="TCustomCoolBar.FDraggedBandIndex">
        <short>
          -1 indicates the space below the last row; other negative values are an invalid area
        </short>
      </element>
      <element name="TCustomCoolBar.FDragInitPos">
        <short>Initial mouse X - position (for resizing Bands)</short>
      </element>
      <element name="TCustomCoolBar.FLockCursor">
        <short/>
      </element>
      <element name="TCustomCoolBar.FRightToLeft">
        <short/>
      </element>
      <element name="TCustomCoolBar.FTextHeight">
        <short/>
      </element>
      <element name="TCustomCoolBar.FVisiBands">
        <short/>
      </element>

      <element name="TCustomCoolBar.AlignControls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.AlignControls.AControl">
        <short/>
      </element>
      <element name="TCustomCoolBar.AlignControls.RemainingClientRect">
        <short/>
      </element>

      <element name="TCustomCoolBar.BitmapOrImageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.BitmapOrImageListChange.Sender">
        <short/>
      </element>

      <element name="TCustomCoolBar.CalculatePreferredSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomCoolBar.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomCoolBar.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TCustomCoolBar.CalculateAndAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.CalculateRealIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.CalculateRealIndex.Result">
        <short/>
      </element>
      <element name="TCustomCoolBar.CalculateRealIndex.AVisibleIndex">
        <short/>
      </element>

      <element name="TCustomCoolBar.ChangeCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.ChangeCursor.ABand">
        <short/>
      </element>
      <element name="TCustomCoolBar.ChangeCursor.AGrabber">
        <short/>
      </element>

      <element name="TCustomCoolBar.CMBiDiModeChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.CMBiDiModeChanged.Message">
        <short/>
      </element>

      <element name="TCustomCoolBar.CreateWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.DoFontChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.DrawTiledBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.DrawTiledBitmap.ARect">
        <short/>
      </element>
      <element name="TCustomCoolBar.DrawTiledBitmap.ABitmap">
        <short/>
      </element>

      <element name="TCustomCoolBar.FontChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.FontChanged.Sender">
        <short/>
      </element>

      <element name="TCustomCoolBar.IsFirstAtRow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.IsFirstAtRow.Result">
        <short/>
      </element>
      <element name="TCustomCoolBar.IsFirstAtRow.ABand">
        <short/>
      </element>

      <element name="TCustomCoolBar.IsRowEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.IsRowEnd.Result">
        <short/>
      </element>
      <element name="TCustomCoolBar.IsRowEnd.ALeft">
        <short/>
      </element>
      <element name="TCustomCoolBar.IsRowEnd.AVisibleIndex">
        <short/>
      </element>

      <element name="TCustomCoolBar.MouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.MouseDown.Button">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseDown.Shift">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseDown.X">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseDown.Y">
        <short/>
      </element>

      <element name="TCustomCoolBar.MouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.MouseMove.Shift">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseMove.X">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseMove.Y">
        <short/>
      </element>

      <element name="TCustomCoolBar.MouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.MouseUp.Button">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseUp.Shift">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseUp.X">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseUp.Y">
        <short/>
      </element>

      <element name="TCustomCoolBar.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomCoolBar.Notification.Operation">
        <short/>
      </element>

      <element name="TCustomCoolBar.Paint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.SetAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetAlign.aValue">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetAutoSize.Value">
        <short/>
      </element>

      <element name="TCustomCoolBar.SetCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.SetCursor.Value">
        <short/>
      </element>

      <element name="TCustomCoolBar.WMSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.WMSize.Message">
        <short/>
      </element>

      <element name="TCustomCoolBar.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomCoolBar.Destroy">
        <short>Destructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.AutosizeBands">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.EndUpdate">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Invalidate">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.InsertControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.InsertControl.AControl">
        <short/>
      </element>
      <element name="TCustomCoolBar.InsertControl.Index">
        <short/>
      </element>

      <element name="TCustomCoolBar.MouseToBandPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.X">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.Y">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.ABand">
        <short/>
      </element>
      <element name="TCustomCoolBar.MouseToBandPos.AGrabber">
        <short/>
      </element>

      <element name="TCustomCoolBar.RemoveControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCoolBar.RemoveControl.AControl">
        <short/>
      </element>

      <element name="TCustomCoolBar.Align">
        <short/>
        <descr>
          <p>
            <var>Align</var> is a <var>TAlign</var> property which is re-introduced in <var>TCustomCoolBar</var> to change its default value. The default value for the property is <var>alTop</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.BandBorderStyle">
        <short/>
        <descr>
          The default value for the property is <var>bsSingle</var>.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.BandMaximize">
        <short/>
        <descr>
          The default value for the property is <var>bmClick</var>.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Bands">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Bitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.FixedSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.FixedOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.GrabStyle">
        <short/>
        <descr>
          GrabStyle is a TGrabStyle property.
          The default value for the property is <var>cDefGrabStyle</var>.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.GrabWidth">
        <short/>
        <descr>
          GrabWidth is an Integer property.
          The default value for the property is <var>cDefGrabWidth</var>.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.HorizontalSpacing">
        <short/>
        <descr>
          HorizontalSpacing is an Integer property.
          The default value for the property is cDefHorSpacing.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Images">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.ImagesWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.ShowText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Themed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.Vertical">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.VerticalSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCoolBar.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCoolBar">
        <short/>
        <descr>
          TCoolBar is a TCustomCoolBar descendant.
        </descr>
        <seealso/>
      </element>

      <element name="TCoolBar.Align"/>
      <element name="TCoolBar.Anchors"/>
      <element name="TCoolBar.AutoSize"/>
      <element name="TCoolBar.BandBorderStyle"/>
      <element name="TCoolBar.BandMaximize"/>
      <element name="TCoolBar.Bands"/>
      <element name="TCoolBar.BiDiMode"/>
      <element name="TCoolBar.BorderStyle"/>
      <element name="TCoolBar.BorderWidth"/>
      <element name="TCoolBar.Color"/>
      <element name="TCoolBar.Constraints"/>
      <element name="TCoolBar.DockSite"/>
      <element name="TCoolBar.DragCursor"/>
      <element name="TCoolBar.DragKind"/>
      <element name="TCoolBar.DragMode"/>
      <element name="TCoolBar.EdgeBorders"/>
      <element name="TCoolBar.EdgeInner"/>
      <element name="TCoolBar.EdgeOuter"/>
      <element name="TCoolBar.Enabled"/>
      <element name="TCoolBar.FixedSize"/>
      <element name="TCoolBar.FixedOrder"/>
      <element name="TCoolBar.Font"/>
      <element name="TCoolBar.GrabStyle"/>
      <element name="TCoolBar.GrabWidth"/>
      <element name="TCoolBar.HorizontalSpacing"/>
      <element name="TCoolBar.Images"/>
      <element name="TCoolBar.ImagesWidth"/>
      <element name="TCoolBar.ParentColor"/>
      <element name="TCoolBar.ParentFont"/>
      <element name="TCoolBar.ParentShowHint"/>
      <element name="TCoolBar.Bitmap"/>
      <element name="TCoolBar.PopupMenu"/>
      <element name="TCoolBar.ShowHint"/>
      <element name="TCoolBar.ShowText"/>
      <element name="TCoolBar.Themed"/>
      <element name="TCoolBar.Vertical"/>
      <element name="TCoolBar.VerticalSpacing"/>
      <element name="TCoolBar.Visible"/>
      <element name="TCoolBar.OnChange"/>
      <element name="TCoolBar.OnClick"/>
      <element name="TCoolBar.OnContextPopup"/>
      <element name="TCoolBar.OnDblClick"/>
      <element name="TCoolBar.OnDockDrop"/>
      <element name="TCoolBar.OnDockOver"/>
      <element name="TCoolBar.OnDragDrop"/>
      <element name="TCoolBar.OnDragOver"/>
      <element name="TCoolBar.OnEndDock"/>
      <element name="TCoolBar.OnEndDrag"/>
      <element name="TCoolBar.OnGetSiteInfo"/>
      <element name="TCoolBar.OnMouseDown"/>
      <element name="TCoolBar.OnMouseEnter"/>
      <element name="TCoolBar.OnMouseLeave"/>
      <element name="TCoolBar.OnMouseMove"/>
      <element name="TCoolBar.OnMouseUp"/>
      <element name="TCoolBar.OnMouseWheel"/>
      <element name="TCoolBar.OnMouseWheelDown"/>
      <element name="TCoolBar.OnMouseWheelUp"/>
      <element name="TCoolBar.OnResize"/>
      <element name="TCoolBar.OnStartDock"/>
      <element name="TCoolBar.OnStartDrag"/>
      <element name="TCoolBar.OnUnDock"/>

      <element name="TTrackBarOrientation">
        <short>
          <var>TTrackBarOrientation</var> - enumerated type denoting horizontal or vertical orientation for TrackBar
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBarOrientation.trHorizontal">
        <short/>
      </element>
      <element name="TTrackBarOrientation.trVertical">
        <short/>
      </element>

      <element name="TTickMark">
        <short>
          <var>TTickMark</var> - enumerated type denoting position of tick marks relative to the TrackBar
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTickMark.tmBottomRight">
        <short/>
      </element>
      <element name="TTickMark.tmTopLeft">
        <short/>
      </element>
      <element name="TTickMark.tmBoth">
        <short/>
      </element>

      <element name="TTickStyle">
        <short>
          <var>TTickStyle</var> - enumerated type denoting style of tick marks
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTickStyle.tsNone">
        <short/>
      </element>
      <element name="TTickStyle.tsAuto">
        <short/>
      </element>
      <element name="TTickStyle.tsManual">
        <short/>
      </element>

      <element name="TTrackBarScalePos">
        <short>
          <var>TTrackBarScalePos</var> - enumerated type denoting position of the scale for a TrackBar
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTrackBarScalePos.trLeft">
        <short/>
      </element>
      <element name="TTrackBarScalePos.trRight">
        <short/>
      </element>
      <element name="TTrackBarScalePos.trTop">
        <short/>
      </element>
      <element name="TTrackBarScalePos.trBottom">
        <short/>
      </element>

      <element name="TCustomTrackBar">
        <short>
          <var>TCustomTrackBar</var> - the base class for <var>TTrackBar</var>
        </short>
        <descr>
          <p>
            <var>TCustomTrackBar</var> defines many of the properties inherited by <var>TTrackBar</var>, a device that allows the user to determine the value of a variable using a quasi-analog slider.
          </p>
        </descr>
      </element>

      <element name="TCustomTrackBar.FOrientation"/>
      <element name="TCustomTrackBar.FReversed"/>
      <element name="TCustomTrackBar.FSelEnd"/>
      <element name="TCustomTrackBar.FSelStart"/>
      <element name="TCustomTrackBar.FShowSelRange"/>
      <element name="TCustomTrackBar.FTickMarks"/>
      <element name="TCustomTrackBar.FTickStyle"/>
      <element name="TCustomTrackBar.FLineSize"/>
      <element name="TCustomTrackBar.FPageSize"/>
      <element name="TCustomTrackBar.FMin"/>
      <element name="TCustomTrackBar.FMax"/>
      <element name="TCustomTrackBar.FFrequency"/>
      <element name="TCustomTrackBar.FPosition"/>
      <element name="TCustomTrackBar.FScalePos"/>
      <element name="TCustomTrackBar.FScaleDigits"/>
      <element name="TCustomTrackBar.FOnChange"/>

      <element name="TCustomTrackBar.SetFrequency">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetFrequency.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetLineSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetLineSize.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetMax.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetMin.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetOrientation.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetPageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetPageSize.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetParams">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetParams.APosition">
        <short/>
      </element>
      <element name="TCustomTrackBar.SetParams.AMin">
        <short/>
      </element>
      <element name="TCustomTrackBar.SetParams.AMax">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetPosition.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetReversed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetReversed.aValue">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetScalePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetScalePos.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetSelEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetSelEnd.aValue">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetSelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetSelStart.AValue">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetShowSelRange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetShowSelRange.AValue">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetTickMarks">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetTickMarks.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetTickStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.SetTickStyle.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.UpdateSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomTrackBar.ApplyChanges">
        <short>
          <var>ApplyChanges</var> - implement any pending changes
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.Changed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.DoChange">
        <short>
          <var>DoChange</var> - system message to implement changes
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.DoChange.msg">
        <short/>
      </element>

      <element name="TCustomTrackBar.FixParams">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.FixParams.APosition">
        <short/>
      </element>
      <element name="TCustomTrackBar.FixParams.AMin">
        <short/>
      </element>
      <element name="TCustomTrackBar.FixParams.AMax">
        <short/>
      </element>

      <element name="TCustomTrackBar.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults, overriding the inherited values
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomTrackBar.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomTrackBar.InitializeWnd" link="#LCL.Controls.TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.ShouldAutoAdjust">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTrackBar.ShouldAutoAdjust.AWidth">
        <short/>
      </element>
      <element name="TCustomTrackBar.ShouldAutoAdjust.AHeight">
        <short/>
      </element>

      <element name="TCustomTrackBar.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTrackBar</var>: calls inherited <var>Create</var> then initializes style, position, size and bounds
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TCustomTrackBar.Create.AOwner">
        <short/>
      </element>

      <element name="TCustomTrackBar.SetTick">
        <short>
          <var>SetTick</var> - set the interval for ticks on the taskbar (integer)
        </short>
      </element>
      <element name="TCustomTrackBar.SetTick.Value">
        <short/>
      </element>

      <element name="TCustomTrackBar.Frequency">
        <short>
          <var>Frequency </var>- how frequently the position of the slider is to be read and updated (currently unsupported)
        </short>
      </element>

      <element name="TCustomTrackBar.LineSize">
        <short>
          <var>Line-Size </var>- increment for slider position when an arrow key is pressed
        </short>
      </element>

      <element name="TCustomTrackBar.Max">
        <short>
          <var>Max </var>- the value corresponding to full movement of the slider. Default = 10
        </short>
      </element>

      <element name="TCustomTrackBar.Min">
        <short>
          <var>Min</var>  - the value associated with the minimum slider position. Default = 0
        </short>
      </element>

      <element name="TCustomTrackBar.OnChange">
        <short>
          <var>OnChange</var> - action to be taken on change in the slider position
        </short>
      </element>

      <element name="TCustomTrackBar.Orientation">
        <short>
          <var>Orientation</var>  - horizontal or vertical
        </short>
      </element>

      <element name="TCustomTrackBar.PageSize">
        <short>
          <var>PageSize</var> - increment for slider position when PageUp or PageDown key is pressed
        </short>
      </element>

      <element name="TCustomTrackBar.Position">
        <short>
          <var>Position </var>- the location of the slider along the track bar. Represents the Return value from the control
        </short>
      </element>

      <element name="TCustomTrackBar.Reversed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.ScalePos">
        <short>
          <var>ScalePos </var>- whether scaling label appears at top, bottom, left or right
        </short>
      </element>

      <element name="TCustomTrackBar.SelEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.SelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.ShowSelRange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTrackBar.TickMarks">
        <short>
          <var>Tickmarks </var>- whether the ticks are above/left, below/right, or both
        </short>
        <descr>
          <var>Tickmarks </var>- where the ticks appear relative to the bar: above/left, below/right, or both
        </descr>
      </element>

      <element name="TCustomTrackBar.TickStyle">
        <short>
          <var>TickStyle </var>- none, produced automatically or calculated manually
        </short>
      </element>

      <element name="TTrackBar">
        <short>
          <var>TTrackBar</var>: a device which allows the user to determine the value of a variable using a quasi-analog slider
        </short>
        <descr>
          <p>
            <var>TTrackBar</var>: a device which allows the user to determine the value of a variable using a quasi-analog slider.
          </p>
          <p>
            The device looks like a slider-potentiometer control on a hi-fi amplifier and consists of a slider which can be moved along a bar using the mouse. Tick marks can be displayed along one or both edges, giving an indication of the proportion of the maximum value of the controlled variable that is being selected.
          </p>
          <p>
            The <var>Position</var> property indicates the distance along the bar that the slider has been placed, either by the program or by mouse capture and movement.
          </p>
          <p>
            In the example, movement of the slider is detected and shown in the associated <link id="#lcl.comctrls.TProgressBar">TProgressBar</link>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
        <example file="comctrls/TrackBarEx.pas"/>
      </element>

      <element name="TTrackBar.Align" link="#LCL.Controls.TControl.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Anchors" link="#LCL.Controls.TControl.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Color" link="#LCL.Controls.TControl.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Constraints" link="#LCL.Controls.TControl.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.DragCursor" link="#LCL.Controls.TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.DragKind" link="#LCL.Controls.TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.DragMode" link="#LCL.Controls.TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Enabled" link="#LCL.Controls.TControl.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Font" link="#LCL.Controls.TControl.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Frequency" link="#LCL.ComCtrls.TCustomTrackBar.Frequency">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Hint" link="#LCL.Controls.TControl.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.LineSize" link="#LCL.ComCtrls.TCustomTrackBar.LineSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Max" link="#LCL.ComCtrls.TCustomTrackBar.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Min" link="#LCL.ComCtrls.TCustomTrackBar.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnChange" link="#LCL.ComCtrls.TCustomTrackBar.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnClick" link="#LCL.Controls.TControl.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>

      <element name="TTrackBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnEnter" link="#LCL.Controls.TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnExit" link="#LCL.Controls.TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TTrackBar.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TTrackBar.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TTrackBar.OnMouseWheelHorz" link="#LCL.Controls.TControl.OnMouseWheelHorz"/>
      <element name="TTrackBar.OnMouseWheelLeft" link="#LCL.Controls.TControl.OnMouseWheelLeft"/>
      <element name="TTrackBar.OnMouseWheelRight" link="#LCL.Controls.TControl.OnMouseWheelRight"/>

      <element name="TTrackBar.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>

      <element name="TTrackBar.Orientation" link="#LCL.ComCtrls.TCustomTrackBar.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.PageSize" link="#LCL.ComCtrls.TCustomTrackBar.PageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.ParentColor" link="#LCL.Controls.TControl.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.ParentFont" link="#LCL.Controls.TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Position" link="#LCL.ComCtrls.TCustomTrackBar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Reversed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.ScalePos" link="#LCL.ComCtrls.TCustomTrackBar.ScalePos">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.SelEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.SelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.ShowHint" link="#LCL.Controls.TControl.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.ShowSelRange">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.TabOrder" link="#LCL.Controls.TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.TickMarks" link="#LCL.ComCtrls.TCustomTrackBar.TickMarks">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.TickStyle" link="#LCL.ComCtrls.TCustomTrackBar.TickStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTrackBar.Visible" link="#LCL.Controls.TControl.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeState">
        <short>
          <var>TNodeState</var> - enumerated type denoting the status of a TreeNode
        </short>
        <descr>
          <p>
            Cut, DropHilited, Focused, Selected, MultiSelected, Expanded, HasChildren, Deleting, Bound.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TNodeState.nsCut">
        <short/>
      </element>
      <element name="TNodeState.nsDropHilited">
        <short/>
      </element>
      <element name="TNodeState.nsFocused">
        <short/>
      </element>
      <element name="TNodeState.nsSelected">
        <short/>
      </element>
      <element name="TNodeState.nsMultiSelected">
        <short/>
      </element>
      <element name="TNodeState.nsExpanded">
        <short/>
      </element>
      <element name="TNodeState.nsHasChildren">
        <short/>
      </element>

      <element name="TNodeStates">
        <short>
          <var>TNodeStates</var> - set of <var>TNodeState</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TAddMode">
        <short>
          <var>TAddMode</var> - enumerated type containing a series of constants to determine the place where a node should be placed in a tree
        </short>
        <descr>
          <p>
            This set is used in <var>TTreeNode.InternalMove</var> and <var>TTreeNodes.InternalAddObject</var>.
          </p>
        </descr>
      </element>
      <element name="TAddMode.taAddFirst">
        <short>Adds the node as the first child</short>
      </element>
      <element name="TAddMode.taAdd">
        <short>Adds the node as the last child</short>
      </element>
      <element name="TAddMode.taInsert">
        <short>Adds the node in front another node</short>
      </element>

      <element name="TMultiSelectStyles">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TMultiSelectStyles.msControlSelect">
        <short>Allow to select one additional item by Ctrl+click.</short>
      </element>
      <element name="TMultiSelectStyles.msShiftSelect">
        <short>
          Allows selection of a range of items (from previous current item to clicked one) using  Shift+Click.
        </short>
      </element>
      <element name="TMultiSelectStyles.msVisibleOnly">
        <short>
          When selecting a range with Shift+click, select only visible (unfolded) items.
        </short>
      </element>
      <element name="TMultiSelectStyles.msSiblingOnly">
        <short>
          When selecting a range with Shift+click, touch only siblings of previous current item.
        </short>
      </element>

      <element name="TMultiSelectStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeArray">
        <short>
          <var>TTreeNodeArray</var> - pointer to a <var>TTreeNode</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="ETreeNodeError">
        <short>
          <var>ETreeNodeError</var> - exception type for errors arising from the code of <var>TTreeNode</var>
        </short>
      </element>

      <element name="ETreeViewError">
        <short>
          <var>ETreeViewError</var> - exception type for errors arising from the code of <var>TTreeView</var>
        </short>
      </element>

      <element name="TTreeNodeChangeReason">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeChangeReason.ncTextChanged">
        <short>The Node's Text has changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncDataChanged">
        <short>The Node's Data has changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncHeightChanged">
        <short>The Node's Height has changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncImageEffect">
        <short>The Node's Image Effect has changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncImageIndex">
        <short>The Node's Image Index has changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncParentChanged">
        <short>The Node's Parent has changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncVisibility">
        <short>The Node's Visibility has changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncOverlayIndex">
        <short>The Node's Overlay Index has Changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncStateIndex">
        <short>The Node's State Index has Changed</short>
      </element>
      <element name="TTreeNodeChangeReason.ncSelectedIndex">
        <short>The Node's Selected Index has Changed</short>
      </element>

      <element name="LCLStreamID">
        <short>A constant for the identifier of a LCL stream</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTVChangingEvent">
        <short>
          <var>TTVChangingEvent</var> - a generic event handling method for changing a specified Tree Node if <var>AllowChange</var> is True
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVChangingEvent.Sender">
        <short/>
      </element>
      <element name="TTVChangingEvent.Node">
        <short/>
      </element>
      <element name="TTVChangingEvent.AllowChange">
        <short/>
      </element>

      <element name="TTVChangedEvent">
        <short>
          <var>TTVChangedEvent</var> - generic event handling method for a changed Tree Node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVChangedEvent.Sender">
        <short/>
      </element>
      <element name="TTVChangedEvent.Node">
        <short/>
      </element>

      <element name="TTVNodeChangedEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVNodeChangedEvent.Sender">
        <short/>
      </element>
      <element name="TTVNodeChangedEvent.Node">
        <short/>
      </element>
      <element name="TTVNodeChangedEvent.ChangeReason">
        <short/>
      </element>

      <element name="TTVEditingEvent">
        <short>
          <var>TTVEditingEvent</var> - generic event handling method for editing a specified node if <var>AllowEdit</var> is True
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVEditingEvent.Sender">
        <short/>
      </element>
      <element name="TTVEditingEvent.Node">
        <short/>
      </element>
      <element name="TTVEditingEvent.AllowEdit">
        <short/>
      </element>

      <element name="TTVEditingEndEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVEditingEndEvent.Sender">
        <short/>
      </element>
      <element name="TTVEditingEndEvent.Node">
        <short/>
      </element>
      <element name="TTVEditingEndEvent.Cancel">
        <short/>
      </element>

      <element name="TTVEditedEvent">
        <short>
          <var>TTVEditedEvent</var> - generic event handling method for a node that has been edited
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVEditedEvent.Sender">
        <short/>
      </element>
      <element name="TTVEditedEvent.Node">
        <short/>
      </element>
      <element name="TTVEditedEvent.S">
        <short/>
      </element>

      <element name="TTVExpandingEvent">
        <short>
          <var>TTVExpandingEvent</var> - generic event handling method for expanding a tree node if <var>AllowExpansion</var> is True
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVExpandingEvent.Sender">
        <short/>
      </element>
      <element name="TTVExpandingEvent.Node">
        <short/>
      </element>
      <element name="TTVExpandingEvent.AllowExpansion">
        <short/>
      </element>

      <element name="TTVCollapsingEvent">
        <short>
          <var>TTVCollapsingEvent</var> - generic event handling method for collapsing a Tree Node if AllowCollapse is True
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCollapsingEvent.Sender">
        <short/>
      </element>
      <element name="TTVCollapsingEvent.Node">
        <short/>
      </element>
      <element name="TTVCollapsingEvent.AllowCollapse">
        <short/>
      </element>

      <element name="TTVExpandedEvent">
        <short>
          <var>TTVExpandedEvent</var> - generic event handling method for a Tree Node that has been expanded
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVExpandedEvent.Sender">
        <short/>
      </element>
      <element name="TTVExpandedEvent.Node">
        <short/>
      </element>

      <element name="TTVCompareEvent">
        <short>
          <var>TTVCompareEvent</var> - generic event handling method for comparing two Tree Nodes
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCompareEvent.Sender">
        <short/>
      </element>
      <element name="TTVCompareEvent.Node1">
        <short/>
      </element>
      <element name="TTVCompareEvent.Node2">
        <short/>
      </element>
      <element name="TTVCompareEvent.Compare">
        <short/>
      </element>

      <element name="TTVCustomDrawEvent">
        <short>
          <var>TTVCustomDrawEvent</var> - generic event handling method for Tree View custom drawing
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TTVCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVCustomDrawItemEvent">
        <short>
          <var>TTVCustomDrawItemEvent</var> - generic event handling method for Tree View Item custom drawing
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomDrawItemEvent.Node">
        <short/>
      </element>
      <element name="TTVCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TTVCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVCustomDrawArrowEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCustomDrawArrowEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomDrawArrowEvent.ARect">
        <short/>
      </element>
      <element name="TTVCustomDrawArrowEvent.ACollapsed">
        <short/>
      </element>

      <element name="TTVAdvancedCustomDrawEvent">
        <short>
          <var>TTVAdvancedCustomDrawEvent</var> - generic event handler method for Tree View advanced custom drawing
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.Sender">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.ARect">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.Stage">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVAdvancedCustomDrawItemEvent">
        <short>
          <var>TTVAdvancedCustomDrawItemEvent</var> - generic event handler method for Tree View Item advanced custom drawing
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.Sender">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.Node">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.State">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.Stage">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.PaintImages">
        <short/>
      </element>
      <element name="TTVAdvancedCustomDrawItemEvent.DefaultDraw">
        <short/>
      </element>

      <element name="TTVCustomCreateNodeEvent">
        <short>
          <var>TTVCustomCreateNodeEvent</var> - generic event handling method for Tree View node creation
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCustomCreateNodeEvent.Sender">
        <short/>
      </element>
      <element name="TTVCustomCreateNodeEvent.ATreeNode">
        <short/>
      </element>

      <element name="TTVCreateNodeClassEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVCreateNodeClassEvent.Sender">
        <short/>
      </element>
      <element name="TTVCreateNodeClassEvent.NodeClass">
        <short/>
      </element>

      <element name="TTreeNodeCompare">
        <short>
          <var>TTreeNodeCompare</var> - generic function to compare Tree Nodes: returns -1 if Node1 is less than Node2, zero if equal, +1 if Node1 is greater
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeCompare.Result">
        <short/>
      </element>
      <element name="TTreeNodeCompare.Node1">
        <short/>
      </element>
      <element name="TTreeNodeCompare.Node2">
        <short/>
      </element>

      <element name="TOldTreeNodeInfo">
        <short>
          <var>TOldTreeNodeInfo</var> - record type (old version) for Tree Node information
        </short>
      </element>

      <element name="TOldTreeNodeInfo.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.SelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.OverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.Expanded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TOldTreeNodeInfo.TextLen">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo">
        <short>
          <var>TTreeNodeInfo</var> - record structure for (new) Tree Node information
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.SelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.OverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.Expanded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeInfo.TextLen">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="PDelphiNodeInfo">
        <short>
          A pointer to <var>TDelphiNodeInfo</var>
        </short>
      </element>

      <element name="TDelphiNodeInfo">
        <short>
          <var>TDelphiNodeInfo</var> - record structure for Tree Node information (for Delphi compatibility)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.SelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.StateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.OverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TDelphiNodeInfo.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode">
        <short>
          <var>TTreeNode</var> is a single item that holds data in <var>TTreeView</var>
        </short>
        <descr>
          <p>
            A <var>TTreeNode</var> is part of a <var>TTreeView</var> and is used for storing data. This can be done by using the <var>Caption</var> property or for more complex data the <var>Data</var> property can be used. Each node can have sibling or child items associated with it.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <element name="TTreeNode.FOwner"/>
      <element name="TTreeNode.FCapacity"/>
      <element name="TTreeNode.FCount"/>
      <element name="TTreeNode.FData"/>
      <element name="TTreeNode.FHeight"/>
      <element name="TTreeNode.FNodeEffect"/>
      <element name="TTreeNode.FImageIndex"/>
      <element name="TTreeNode.FIndex"/>
      <element name="TTreeNode.FItems"/>
      <element name="TTreeNode.FNextBrother"/>
      <element name="TTreeNode.FNextMultiSelected"/>
      <element name="TTreeNode.FOverlayIndex"/>
      <element name="TTreeNode.FParent"/>
      <element name="TTreeNode.FPrevBrother"/>
      <element name="TTreeNode.FPrevMultiSelected"/>
      <element name="TTreeNode.FSelectedIndex"/>
      <element name="TTreeNode.FStateIndex"/>
      <element name="TTreeNode.FStates"/>
      <element name="TTreeNode.FSubTreeCount"/>
      <element name="TTreeNode.FText"/>
      <element name="TTreeNode.FTop"/>

      <element name="TTreeNode.AreParentsExpandedAndVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.AreParentsExpandedAndVisible.Result">
        <short/>
      </element>

      <element name="TTreeNode.BindToMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.CompareCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.CompareCount.Result">
        <short/>
      </element>
      <element name="TTreeNode.CompareCount.CompareMe">
        <short/>
      </element>

      <element name="TTreeNode.DoCanExpand">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DoCanExpand.Result">
        <short/>
      </element>
      <element name="TTreeNode.DoCanExpand.ExpandIt">
        <short/>
      </element>

      <element name="TTreeNode.DoExpand">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DoExpand.ExpandIt">
        <short/>
      </element>

      <element name="TTreeNode.ExpandItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.ExpandItem.ExpandIt">
        <short/>
      </element>
      <element name="TTreeNode.ExpandItem.Recurse">
        <short/>
      </element>

      <element name="TTreeNode.GetAbsoluteIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetAbsoluteIndex.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetDeleting">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetDeleting.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetHasChildren">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetHasChildren.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetCount.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetCut">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetCut.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetDropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetDropTarget.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetExpanded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetExpanded.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetFocused">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetFocused.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetHeight.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetIndex.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetItems.Result">
        <short/>
      </element>
      <element name="TTreeNode.GetItems.AnIndex">
        <short/>
      </element>

      <element name="TTreeNode.GetLevel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLevel.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetMultiSelected.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetSelected.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetState.Result">
        <short/>
      </element>
      <element name="TTreeNode.GetState.NodeState">
        <short/>
      </element>

      <element name="TTreeNode.GetTreeNodes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetTreeNodes.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetTreeView">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetTreeView.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetTop.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetVisible.Result">
        <short/>
      </element>

      <element name="TTreeNode.InternalMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.InternalMove.ANode">
        <short/>
      </element>
      <element name="TTreeNode.InternalMove.AddMode">
        <short/>
      </element>

      <element name="TTreeNode.IsEqual">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.IsEqual.Result">
        <short/>
      </element>
      <element name="TTreeNode.IsEqual.Node">
        <short/>
      </element>

      <element name="TTreeNode.IsNodeVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.IsNodeVisible.Result">
        <short/>
      </element>

      <element name="TTreeNode.IsNodeHeightFullVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.IsNodeHeightFullVisible.Result">
        <short/>
      </element>

      <element name="TTreeNode.ReadData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.ReadData.Stream">
        <short/>
      </element>
      <element name="TTreeNode.ReadData.StreamVersion">
        <short/>
      </element>
      <element name="TTreeNode.ReadData.Info">
        <short/>
      </element>

      <element name="TTreeNode.ReadDelphiData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.ReadDelphiData.Stream">
        <short/>
      </element>
      <element name="TTreeNode.ReadDelphiData.Info">
        <short/>
      </element>

      <element name="TTreeNode.SetCut">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetCut.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetData.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetDropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetDropTarget.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetExpanded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetExpanded.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetFocused">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetFocused.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetHasChildren">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetHasChildren.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetHeight.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetImageEffect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetImageEffect.AValue">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.SetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetImageIndex.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetItems.AnIndex">
        <short/>
      </element>
      <element name="TTreeNode.SetItems.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetMultiSelected.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetOverlayIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetOverlayIndex.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetSelected.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetSelectedIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetSelectedIndex.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetStateIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetStateIndex.AValue">
        <short/>
      </element>

      <element name="TTreeNode.SetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetText.S">
        <short/>
      </element>

      <element name="TTreeNode.SetVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.SetVisible.AValue">
        <short/>
      </element>

      <element name="TTreeNode.Unbind">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.UnbindFromMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.WriteData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.WriteData.Stream">
        <short/>
      </element>
      <element name="TTreeNode.WriteData.Info">
        <short/>
      </element>

      <element name="TTreeNode.WriteDelphiData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.WriteDelphiData.Stream">
        <short/>
      </element>
      <element name="TTreeNode.WriteDelphiData.Info">
        <short/>
      </element>

      <element name="TTreeNode.Changed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.Changed.ChangeReason">
        <short/>
      </element>

      <element name="TTreeNode.GetOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetOwner.Result">
        <short/>
      </element>

      <element name="TTreeNode.Create">
        <short>
          <var>Create</var> - constructor for TTreeNode: calls inherited <var>Create</var> then initializes indexes and sets subtree count to 1
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTreeNode.Create.AnOwner">
        <short/>
      </element>

      <element name="TTreeNode.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTreeNode</var>: unbinds all references, frees data and calls inherited Destroy
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TTreeNode.AlphaSort">
        <short>
          <var>AlphaSort</var> - if True, sorted alphabetically
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.AlphaSort.Result">
        <short/>
      </element>

      <element name="TTreeNode.Bottom">
        <short>
          <var>Bottom</var> - returns the position of the displayed tree structure (whether or not it is expanded)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.Bottom.Result">
        <short/>
      </element>

      <element name="TTreeNode.BottomExpanded">
        <short>
          <var>BottomExpanded</var> - returns the position of the bottom of the fully expanded tree structure
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.BottomExpanded.Result">
        <short/>
      </element>

      <element name="TTreeNode.CustomSort">
        <short><var>CustomSort</var> - Sorts the child nodes using SortProc.</short>
        <descr>
          <p>
            The child nodes (not the grand children) are sorted. If SortProc is nil the method DefaultTreeViewSort is used. The default implementation always returns true.
         </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.CustomSort.Result">
        <short/>
      </element>
      <element name="TTreeNode.CustomSort.SortProc">
        <short/>
      </element>

      <element name="TTreeNode.DefaultTreeViewSort">
        <short>
          <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2
        </short>
        <descr>
          <p>
            <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2.
          </p>
          <p>
            <var>DefaultTreeViewSort</var> compares the text of two TreeNodes and returns the following result:
          </p>
          <dl>
            <dt>&lt; 0</dt>
            <dd>if <var>Node1.Text&lt;Node2.Text</var>.</dd>
            <dt>0</dt>
            <dd>if <var>Node1.Text=Node2.Text</var>.</dd>
            <dt>&gt; 0</dt>
            <dd>if <var>Node1.Text&gt;Node2.Text</var>.</dd>
          </dl>
          <p>
            The comparison takes into account ANSI characters, i.e. it takes care of strange accented characters. Contrary to AnsiCompareText, the comparison is case sensitive.
           </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.DefaultTreeViewSort.Result">
        <short/>
      </element>
      <element name="TTreeNode.DefaultTreeViewSort.Node1">
        <short/>
      </element>
      <element name="TTreeNode.DefaultTreeViewSort.Node2">
        <short/>
      </element>

      <element name="TTreeNode.DisplayExpandSignLeft">
        <short>
          <var>DisplayExpandSignLeft</var> - returns the position of the left edge of the expand sign
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayExpandSignLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayExpandSignRect">
        <short>
          <var>DisplayExpandSignRect</var> - returns the coordinates of the rectangle within which the expand sign are displayed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayExpandSignRect.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayExpandSignRight">
        <short>
          <var>DisplayExpandSignRight</var> - returns the position of the right edge of the expand sign (i.e. takes into account the width of the icon etc)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayExpandSignRight.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayIconLeft">
        <short>
          <var>DisplayIconLeft</var> - returns the position of the actual icon for the expand sign (usually 1 pixel greater than <var>DisplayExpandSignLeft</var>)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayIconLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayRect">
        <short>
          <var>DisplayRect</var> - returns the coordinates of the rectangle containing the current entry; if <var>TextOnly </var>is True, returns the coordinates for the text
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayRect.Result">
        <short/>
      </element>
      <element name="TTreeNode.DisplayRect.TextOnly">
        <short/>
      </element>

      <element name="TTreeNode.DisplayStateIconLeft">
        <short>
          <var>DisplayStateIconLeft</var> - returns the position of the State Icon
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayStateIconLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayTextLeft">
        <short>
          <var>DisplayTextLeft</var> - returns the position of the left edge of the text
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayTextLeft.Result">
        <short/>
      </element>

      <element name="TTreeNode.DisplayTextRight">
        <short>
          <var>DisplayTextRight</var> - returns the position of the right edge of the text
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.DisplayTextRight.Result">
        <short/>
      </element>

      <element name="TTreeNode.EditText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.EditText.Result">
        <short/>
      </element>

      <element name="TTreeNode.FindNode">
        <short>
          <var>FindNode</var> - returns the node containing the specified text string
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.FindNode.Result">
        <short/>
      </element>
      <element name="TTreeNode.FindNode.NodeText">
        <short/>
      </element>

      <element name="TTreeNode.GetFirstChild">
        <short>
          <var>GetFirstChild</var> - returns the first child node of this parent
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetFirstChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetFirstSibling">
        <short>Gets the first tree node at the same level in the tree</short>
        <descr>
          <p>
            <var>GetFirstSibling</var> is a <var>TTreeNode</var> function which returns the first tree node at the same <var>Level</var> in the tree node hierarchy. The return value may be the same as the current class instance when it is the first (or only) node at the current Level.
          </p>
          <p>
            When a <var>Parent</var> node has been assigned, its <var>GetFirstChild</var> method is used to get the return value. Otherwise, the internal linked list for the sub-tree is used to get the previous tree node as the return value.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNode.Level"/>
          <link id="TTreeNode.Parent"/>
          <link id="TTreeNode.GetFirstChild"/>
        </seealso>
      </element>
      <element name="TTreeNode.GetFirstSibling.Result">
        <short>First tree node at the same level</short>
      </element>

      <element name="TTreeNode.GetFirstVisibleChild">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetFirstVisibleChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetHandle">
        <short>
          <var>GetHandle</var> - returns the operating system Handle for the current node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetHandle.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetLastChild">
        <short>
          <var>GetLastChild</var> - returns the last child node of this parent
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetLastSibling">
        <short>
          <var>GetLastSibling</var> - returns the last node at the same level as the current node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetLastSubChild">
        <short>
          <var>GetLastSubChild</var> - returns the last sub-child node of this parent
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastSubChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetLastVisibleChild">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetLastVisibleChild.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNext">
        <short>
          <var>GetNext</var> - returns the next node in the list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNext.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextChild">
        <short>
          <var>GetNextChild</var> - returns the next child node of the parent specified by <var>AValue</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextChild.Result">
        <short/>
      </element>
      <element name="TTreeNode.GetNextChild.AValue">
        <short/>
      </element>

      <element name="TTreeNode.GetNextExpanded">
        <short>
          <var>GetNextExpanded</var> - returns the next expanded node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextExpanded.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextMultiSelected">
        <short>
          <var>GetNextMultiSelected</var> - returns the next node in a multiselection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextMultiSelected.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextSibling">
        <short>
          <var>GetNextSibling</var> - returns the next node in the same level as the current node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextSkipChildren">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextSkipChildren.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextVisible">
        <short>
          <var>GetNextVisible</var> - returns the next visible (i.e. not hidden) node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextVisible.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetNextVisibleSibling">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetNextVisibleSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel">
        <short>
          <var>GetParentNodeOfAbsoluteLevel</var> - returns the parent of all nodes at this absolute level
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel.Result">
        <short/>
      </element>
      <element name="TTreeNode.GetParentNodeOfAbsoluteLevel.TheAbsoluteLevel">
        <short/>
      </element>

      <element name="TTreeNode.GetPrev">
        <short>
          <var>GetPrev</var> - returns the previous node in the list
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrev.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevChild">
        <short>
          <var>GetPrevChild</var> - returns the previous child node of the parent specified by <var>AValue</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevChild.Result">
        <short/>
      </element>
      <element name="TTreeNode.GetPrevChild.AValue">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevExpanded">
        <short>
          <var>GetPrevExpanded</var> - returns the previous expanded node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevExpanded.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevMultiSelected">
        <short>
          <var>GetPrevMultiSelected</var> - returns the previous node in a multi-selection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevMultiSelected.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevSibling">
        <short>
          <var>GetPrevSibling</var> - returns the previous node in the same level as the current node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevVisible">
        <short>
          <var>GetPrevVisible</var> - returns the previous visible (not hidden) node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevVisible.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetPrevVisibleSibling">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.GetPrevVisibleSibling.Result">
        <short/>
      </element>

      <element name="TTreeNode.GetTextPath">
        <short>
          <var>GetTextPath</var> - returns a string containing the path to the current node delimited by slash
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.HasAsParent">
        <short>
          <var>HasAsParent</var> - returns True if the node specified by <var>AValue </var>has a parent
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.HasAsParent.Result">
        <short/>
      </element>
      <element name="TTreeNode.HasAsParent.AValue">
        <short/>
      </element>

      <element name="TTreeNode.IndexOf">
        <short>
          <var>IndexOf</var> - returns the index of the node specified by <var>AValue</var>
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.IndexOf.Result">
        <short/>
      </element>
      <element name="TTreeNode.IndexOf.AValue">
        <short/>
      </element>

      <element name="TTreeNode.IndexOfText">
        <short>
          <var>IndexOfText</var> - returns the index of the node containing the specified Text string
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.IndexOfText.Result">
        <short/>
      </element>
      <element name="TTreeNode.IndexOfText.NodeText">
        <short/>
      </element>

      <element name="TTreeNode.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies details directly, otherwise calls inherited <var>Assign</var> which probably raises an exception
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TTreeNode.Assign.Source">
        <short/>
      </element>

      <element name="TTreeNode.Collapse">
        <short>
          <var>Collapse</var> - method for collapsing tree view to show only the main stems. Apply recursively if <var>Recurse</var> is True
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.Collapse.Recurse">
        <short/>
      </element>

      <element name="TTreeNode.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - makes sure all references to and from the node are consistent
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Delete">
        <short>
          <var>Delete</var> the current TreeNode
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.DeleteChildren">
        <short>
          <var>DeleteChildren</var> - remove the descendent Nodes in the tree structure
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.EndEdit">
        <short>
          <var>EndEdit</var> (to be implemented)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.EndEdit.Cancel">
        <short/>
      </element>

      <element name="TTreeNode.Expand">
        <short>
          <var>Expand</var> - method for expanding the current node. If Recurse is True, also expand all descendent nodes
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.Expand.Recurse">
        <short/>
      </element>

      <element name="TTreeNode.ExpandParents">
        <short>
          <var>ExpandParents</var> - apply expansion to the parents of the current node
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.FreeAllNodeData">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.MakeVisible">
        <short>
          <var>MakeVisible</var> - method for rendering a node visible
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.MoveTo">
        <short>
          <var>MoveTo</var> - method for relocating a node to the specified <var>Destination</var> using the specified mode of attachment
        </short>
        <descr>
          <p>
            <var>MoveTo</var> - method for relocating a node to the specified <var>Destination</var> using the specified mode of attachment.
          </p>
          <p>
            Definition of the modes of attachment:
          </p>
          <dl>
            <dt>naAdd</dt>
            <dd>Add as last sibling of Destination</dd>
            <dt>naAddFirst</dt>
            <dd>Add as first sibling of Destination</dd>
            <dt>naAddChild</dt>
            <dd>Add as last child of Destination</dd>
            <dt>naAddChildFirst</dt>
            <dd>Add as first child of Destination</dd>
            <dt>naInsert</dt>
            <dd>Insert in front of Destination</dd>
            <dt>naInsertBehind</dt>
            <dd>Insert behind Destination</dd>
          </dl>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNode.MoveTo.Destination">
        <short/>
      </element>
      <element name="TTreeNode.MoveTo.Mode">
        <short/>
      </element>

      <element name="TTreeNode.MultiSelectGroup">
        <short>
          <var>MultiSelectGroup</var> - method for multi-selecting a group of nodes
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Update">
        <short>
          <var>Update</var> the contents and appearance of the current node
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - for debugging. If <var>Recurse</var> is True, report for all descendants as well
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.WriteDebugReport.Prefix">
        <short/>
      </element>
      <element name="TTreeNode.WriteDebugReport.Recurse">
        <short/>
      </element>

      <element name="TTreeNode.AbsoluteIndex">
        <short>
          <var>AbsoluteIndex</var> - the absolute index of the current node, i.e. without taking into account the level of ancestry
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Count">
        <short>
          <var>Count</var> - the number of nodes
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Cut">
        <short>
          <var>Cut</var> - whether the node has been Cut
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Data">
        <descr>
          Property of type pointer used to store custom data in a node.
        </descr>
        <example file="comctrls/ttreenode_data.pas"/>
        <short>
          <var>Data</var> - pointer to the Node's data
        </short>
      </element>

      <element name="TTreeNode.Deleting">
        <short>
          <var>Deleting</var> - if True, the node is being deleted
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.DropTarget">
        <short>
          <var>DropTarget</var> - if True, the current node is a target for a drop process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Expanded">
        <short>
          <var>Expanded</var> - if True, the node has been expanded
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Focused">
        <short>
          <var>Focused</var> - if True, the node has received focus
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Handle">
        <short>
          <var>Handle</var> - the operating system handle for this node
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.HasChildren">
        <short>
          <var>HasChildren</var> - if true, this node has descendent nodes
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Height">
        <short>
          The <var>Height</var> of the current node<var/>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.ImageIndex">
        <short>
          <var>ImageIndex</var> - the image index of the current node if not selected. Default -1 for no image
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.comctrls.TTreeNode.SelectedIndex">TTreeNode.SelectedIndex</link>
        </seealso>
      </element>

      <element name="TTreeNode.Index">
        <short>
          The <var>Index</var> value of the current node
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.IsFullHeightVisible">
        <short>
          <var>IsFullHeightVisible</var> - if True, the full height of the TreeNode is visible within the display window
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.IsVisible">
        <short>
          <var>IsVisible</var> - if True, the current node is visible (not hidden)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Items">
        <short>
          <var>Items</var> - the index of the current node within the list of items
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNode.Items.ItemIndex">
        <short/>
      </element>

      <element name="TTreeNode.Level">
        <short>The <var>Level</var> of descendance of indentation of the current node</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.MultiSelected">
        <short>
          <var>MultiSelected</var> - if True, several nodes have been selected simultaneously (e.g. using the Shift or Ctrl key while selecting)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.NodeEffect">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.OverlayIndex">
        <short>
          <var>OverlayIndex</var> - the index of the overlay
        </short>
        <descr>
          This icon is drawn above the normal icon. If Images.HasOverlays then it is fetched from Images via Images.Overlay(Node.Overlay) for Delphi compatibility.
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.Owner">
        <short>The <var>Owner</var> control of the current TreeNode</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Parent">
        <short>The <var>Parent</var> of the current node</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Selected">
        <short>
          <var>Selected</var> - if True, the current node has been selected
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.SelectedIndex">
        <short>
          <var>SelectedIndex</var> - the image index of the current node if selected. Default -1 for no image
        </short>
        <descr/>
        <seealso>
          <link id="TTreeNode.ImageIndex"/>
        </seealso>
      </element>

      <element name="TTreeNode.StateIndex">
        <short>
          <var>StateIndex</var> the index of the state (within an enumerated type)
        </short>
        <descr>
          <p>
            <var>StateIndex</var> the index of the state (within an enumerated type).
          </p>
          <p>Definition of enumerated type NodeState:</p>
          <p>
            nsCut, nsDropHilited, nsFocused, nsSelected, nsMultiSelected, nsExpanded, nsHasChildren, nsDeleting, nsBound
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TTreeNode.States">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.SubTreeCount">
        <short>
          <var>SubTreeCount</var> -  the number of sub-trees
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Text">
        <short>The <var>Text</var> string of the current node</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Top">
        <short>The position of the <var>Top</var> of the current node</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.TreeNodes">
        <short>the collection of  <var>TreeNodes</var>  to which this node belongs</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.TreeView">
        <short>The <var>TreeView</var> to which this node belongs</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNode.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodesEnumerator">
        <short>Implements an enumerator for items in the TTreeNodes collection</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodesEnumerator.FNodes"/>
      <element name="TTreeNodesEnumerator.FPosition"/>

      <element name="TTreeNodesEnumerator.GetCurrent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodesEnumerator.GetCurrent.Result">
        <short/>
      </element>

      <element name="TTreeNodesEnumerator.Create">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodesEnumerator.Create.ANodes">
        <short/>
      </element>

      <element name="TTreeNodesEnumerator.MoveNext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodesEnumerator.MoveNext.Result">
        <short/>
      </element>

      <element name="TTreeNodesEnumerator.Current">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="PNodeCache">
        <short>
          <var>PNodeCache</var> - pointer to <var>TNodeCache</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeCache">
        <short>
          <var>TNodeCache</var> - a cache (temporary storage record) for a <var>TTreeNode</var> and its index
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeCache.CacheNode">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TNodeCache.CacheIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes">
        <short>
          A collection or list of <var>TTreeNode</var> instances
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.FCount"/>
      <element name="TTreeNodes.FSelection"/>
      <element name="TTreeNodes.FStartMultiSelected"/>
      <element name="TTreeNodes.FFirstMultiSelected"/>
      <element name="TTreeNodes.FLastMultiSelected"/>
      <element name="TTreeNodes.FKeepCollapsedNodes"/>
      <element name="TTreeNodes.FNodeCache"/>
      <element name="TTreeNodes.FOwner"/>
      <element name="TTreeNodes.FTopLvlCapacity"/>
      <element name="TTreeNodes.FTopLvlCount"/>
      <element name="TTreeNodes.FTopLvlItems"/>
      <element name="TTreeNodes.FUpdateCount"/>
      <element name="TTreeNodes.FNewNodeToBeAdded"/>

      <element name="TTreeNodes.ClearCache">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.GetHandle">
        <short>Gets the handle for the TreeView component using the collection of nodes</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetHandle.Result">
        <short>The handle for the TreeView, or 0 when TreeView is unassigned</short>
      </element>

      <element name="TTreeNodes.GetNodeFromIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetNodeFromIndex.Result">
        <short/>
      </element>
      <element name="TTreeNodes.GetNodeFromIndex.Index">
        <short/>
      </element>

      <element name="TTreeNodes.GetSelectionCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetSelectionCount.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetTopLvlItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetTopLvlItems.Result">
        <short/>
      </element>
      <element name="TTreeNodes.GetTopLvlItems.Index">
        <short/>
      </element>

      <element name="TTreeNodes.GrowTopLvlItems">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.IndexOfTopLvlItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.IndexOfTopLvlItem.Result">
        <short/>
      </element>
      <element name="TTreeNodes.IndexOfTopLvlItem.Node">
        <short/>
      </element>

      <element name="TTreeNodes.MoveTopLvlNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.MoveTopLvlNode.TopLvlFromIndex">
        <short/>
      </element>
      <element name="TTreeNodes.MoveTopLvlNode.TopLvlToIndex">
        <short/>
      </element>
      <element name="TTreeNodes.MoveTopLvlNode.Node">
        <short/>
      </element>

      <element name="TTreeNodes.ReadData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.ReadData.Stream">
        <short/>
      </element>

      <element name="TTreeNodes.ReadExpandedState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.ReadExpandedState.Stream">
        <short/>
      </element>

      <element name="TTreeNodes.Repaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.Repaint.ANode">
        <short/>
      </element>

      <element name="TTreeNodes.ShrinkTopLvlItems">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.SetTopLvlItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.SetTopLvlItems.Index">
        <short/>
      </element>
      <element name="TTreeNodes.SetTopLvlItems.AValue">
        <short/>
      </element>

      <element name="TTreeNodes.WriteData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.WriteData.Stream">
        <short/>
      </element>
      <element name="TTreeNodes.WriteData.WriteDataPointer">
        <short/>
      </element>

      <element name="TTreeNodes.WriteExpandedState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.WriteExpandedState.Stream">
        <short/>
      </element>

      <element name="TTreeNodes.InternalAddObject">
        <short>
          <var>InternalAddObject</var> - method for adding text of data within the structure of the current node; returns the value of the new updated node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.InternalAddObject.Result">
        <short/>
      </element>
      <element name="TTreeNodes.InternalAddObject.Node">
        <short/>
      </element>
      <element name="TTreeNodes.InternalAddObject.S">
        <short/>
      </element>
      <element name="TTreeNodes.InternalAddObject.Data">
        <short/>
      </element>
      <element name="TTreeNodes.InternalAddObject.AddMode">
        <short/>
      </element>

      <element name="TTreeNodes.DefineProperties" link="#rtl.Classes.TPersistent.DefineProperties">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.DefineProperties.Filer">
        <short/>
      </element>

      <element name="TTreeNodes.GetCount">
        <short>
          <var>GetCount</var> - returns the number of nodes in the collection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetCount.Result">
        <short>Value for the Count property</short>
      </element>

      <element name="TTreeNodes.GetOwner">
        <short>Gets the TPersistent instance which owns the collection and its nodes</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetOwner.Result">
        <short>Owner of the collection</short>
      </element>

      <element name="TTreeNodes.SetItem">
        <short>
          <var>SetItem</var> - method for recording details of specified node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.SetItem.Index">
        <short/>
      </element>
      <element name="TTreeNodes.SetItem.AValue">
        <short/>
      </element>

      <element name="TTreeNodes.SetUpdateState">
        <short>Sets the update state in the TreeView which owns the node tree</short>
        <descr>
          <p>
            <var>SetUpdateState</var> is a procedure used to set the update state in the TreeView which owns the class instance. <var>Updating</var> indicates the <var>TTreeViewState</var> value(s) that are included in or excluded from the States property in the <var>Owner</var>.
          </p>
          <p>
            When <var>Updating</var> is <b>True</b>, the value <var>tvsUpdating</var> is included in the <var>States</var> property in Owner.
          </p>
          <p>
            When Updating is <b>False</b>, <var>tvsUpdating</var> is excluded from and <var>tvsScrollbarChanged</var> is included in the States property in Owner. This also causes the TreeView to update its scrollbars and repaint the control .
          </p>
          <p>
            SetUpdateState is used to implement the <var>BeginUpdate</var> and <var>EndUpdate</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TTreeNodes.Owner"/>
          <link id="TTreeNodes.BeginUpdate"/>
          <link id="TTreeNodes.EndUpdate"/>
          <link id="TCustomTreeView.States"/>
          <link id="TTreeViewState"/>
        </seealso>
      </element>
      <element name="TTreeNodes.SetUpdateState.Updating">
        <short>True when the tree nodes are being updated, False when the update has been completed</short>
      </element>

      <element name="TTreeNodes.Create">
        <short>
          <var>Create</var> - constructor for <var>TTreeNodes</var>: calls inherited <var>Create</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.system.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TTreeNodes.Create.AnOwner">
        <short>Owner for the class instance</short>
      </element>

      <element name="TTreeNodes.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TTreeNodes</var>: calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TTreeNodes.Add">
        <short>
          <var>Add</var> - adds a sibling node with specified text string and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.Add.Result">
        <short/>
      </element>
      <element name="TTreeNodes.Add.SiblingNode">
        <short/>
      </element>
      <element name="TTreeNodes.Add.S">
        <short/>
      </element>

      <element name="TTreeNodes.AddChild">
        <short>
          <var>AddChild</var> - adds a child node with specified text to the parent node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChild.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddChild.ParentNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddChild.S">
        <short/>
      </element>

      <element name="TTreeNodes.AddChildFirst">
        <short>
          <var>AddChildFirst</var> - adds a node with specified text as the first child of the parent node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChildFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildFirst.ParentNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildFirst.S">
        <short/>
      </element>

      <element name="TTreeNodes.AddChildObject">
        <short>
          <var>AddChildObject</var> - adds a child node with specified text and data-pointer to the parent node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChildObject.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObject.ParentNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObject.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObject.Data">
        <short/>
      </element>

      <element name="TTreeNodes.AddChildObjectFirst">
        <short>
          <var>AddChildObjectFirst</var> - adds a node with specified text and data as the first child of the parent node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.ParentNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddChildObjectFirst.Data">
        <short/>
      </element>

      <element name="TTreeNodes.AddFirst">
        <short>
          <var>AddFirst</var> - adds a node with specified text as the first node in the same level as <var>SiblingNode.</var> and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddFirst.SiblingNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddFirst.S">
        <short/>
      </element>

      <element name="TTreeNodes.AddNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddNode.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddNode.Node">
        <short/>
      </element>
      <element name="TTreeNodes.AddNode.Relative">
        <short/>
      </element>
      <element name="TTreeNodes.AddNode.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddNode.Ptr">
        <short/>
      </element>
      <element name="TTreeNodes.AddNode.Method">
        <short/>
      </element>

      <element name="TTreeNodes.AddObject">
        <short>
          <var>AddObject</var> - adds a node with specified text and data-pointer in the same level as <var>SiblingNode.</var> and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddObject.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddObject.SiblingNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddObject.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddObject.Data">
        <short/>
      </element>

      <element name="TTreeNodes.AddObjectFirst">
        <short>
          <var>AddObjectFirst</var> - adds a node with specified text and data-pointer as the first node in the same level as <var>SiblingNode.</var> and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.Result">
        <short/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.SiblingNode">
        <short/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.S">
        <short/>
      </element>
      <element name="TTreeNodes.AddObjectFirst.Data">
        <short/>
      </element>

      <element name="TTreeNodes.FindNodeWithData">
        <short>
          <var>FindNodeWithData</var> - returns a node containing the specified data pointer
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindNodeWithData.Result">
        <short/>
      </element>
      <element name="TTreeNodes.FindNodeWithData.NodeData">
        <short/>
      </element>

      <element name="TTreeNodes.FindNodeWithText">
        <short>
          <var>FindNodeWithText</var> - returns a node containing the specified text string
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindNodeWithText.Result">
        <short/>
      </element>
      <element name="TTreeNodes.FindNodeWithText.NodeText">
        <short/>
      </element>

      <element name="TTreeNodes.FindNodeWithTextPath">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindNodeWithTextPath.Result">
        <short/>
      </element>
      <element name="TTreeNodes.FindNodeWithTextPath.TextPath">
        <short/>
      </element>

      <element name="TTreeNodes.FindTopLvlNode">
        <short>
          <var>FindTopLvlNode</var> - returns a top level node containing the specified text string
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.FindTopLvlNode.Result">
        <short/>
      </element>
      <element name="TTreeNodes.FindTopLvlNode.NodeText">
        <short/>
      </element>

      <element name="TTreeNodes.GetEnumerator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetEnumerator.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetFirstNode">
        <short>
          <var>GetFirstNode</var> - returns the first node in the collection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetFirstNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetFirstVisibleNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetFirstVisibleNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastExpandedSubNode">
        <short>
          <var>GetLastExpandedSubNode</var> - absolute last node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastExpandedSubNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastNode">
        <short>
          <var>GetLastNode</var> - last top level node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastSubNode">
        <short>
          <var>GetLastSubNode</var> - absolute last node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastSubNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetLastVisibleNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetLastVisibleNode.Result">
        <short/>
      </element>

      <element name="TTreeNodes.GetSelections">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.GetSelections.Result">
        <short/>
      </element>
      <element name="TTreeNodes.GetSelections.AIndex">
        <short/>
      </element>

      <element name="TTreeNodes.Insert">
        <short>
          <var>Insert</var> a node with the specified text just before the specified Next node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.Insert.Result">
        <short/>
      </element>
      <element name="TTreeNodes.Insert.NextNode">
        <short/>
      </element>
      <element name="TTreeNodes.Insert.S">
        <short/>
      </element>

      <element name="TTreeNodes.InsertBehind">
        <short>
          <var>InsertBehind</var> - inserts a new node with specified text just behind specified Previous node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.InsertBehind.Result">
        <short/>
      </element>
      <element name="TTreeNodes.InsertBehind.PrevNode">
        <short/>
      </element>
      <element name="TTreeNodes.InsertBehind.S">
        <short/>
      </element>

      <element name="TTreeNodes.InsertObject">
        <short>
          <var>InsertObject</var> - inserts a new node with specified text and data just before the specified Next node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.InsertObject.Result">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObject.NextNode">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObject.S">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObject.Data">
        <short/>
      </element>

      <element name="TTreeNodes.InsertObjectBehind">
        <short>
          <var>InsertObjectBehind</var> - inserts a new node with specified text and data-pointer just behind specified Previous node and returns the new node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.Result">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.PrevNode">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.S">
        <short/>
      </element>
      <element name="TTreeNodes.InsertObjectBehind.Data">
        <short/>
      </element>

      <element name="TTreeNodes.IsMultiSelection">
        <short>
          <var>IsMultiSelection</var> - returns True if this node is part if a multi-selection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.IsMultiSelection.Result">
        <short/>
      </element>

      <element name="TTreeNodes.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies properties directly, otherwise calls inherited <var>Assign</var> which probably raises an exception
        </short>
        <descr/>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="TTreeNodes.Assign.Source">
        <short/>
      </element>

      <element name="TTreeNodes.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Clear">
        <short>
          <var>Clear</var> the current node
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.ClearMultiSelection">
        <short>
          <var>ClearMultiSelection</var> - clears a series of nodes in a multi-selection (provided the selection has not already been cleared)
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - makes sure all references to and from the nodes are consistent
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Delete">
        <short>
          <var>Delete</var> this node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.Delete.Node">
        <short/>
      </element>

      <element name="TTreeNodes.EndUpdate">
        <short>
          <var>EndUpdate</var> - finish the update process
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.FreeAllNodeData">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.SelectionsChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.SelectionsChanged.ANode">
        <short/>
      </element>
      <element name="TTreeNodes.SelectionsChanged.AIsSelected">
        <short/>
      </element>

      <element name="TTreeNodes.SelectOnlyThis">
        <short>
          <var>SelectOnlyThis</var> - method for selecting only the indicated node
        </short>
      </element>
      <element name="TTreeNodes.SelectOnlyThis.Node">
        <short>Select Only This Node</short>
      </element>

      <element name="TTreeNodes.MultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.MultiSelect.Node">
        <short/>
      </element>
      <element name="TTreeNodes.MultiSelect.ClearWholeSelection">
        <short/>
      </element>

      <element name="TTreeNodes.SortTopLevelNodes">
        <short>
          <var>SortTopLevelNodes</var> - sorts the top level nodes using the specified comparison method
        </short>
      </element>
      <element name="TTreeNodes.SortTopLevelNodes.SortProc">
        <short/>
      </element>

      <element name="TTreeNodes.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - for debugging
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.WriteDebugReport.Prefix">
        <short/>
      </element>
      <element name="TTreeNodes.WriteDebugReport.AllNodes">
        <short/>
      </element>

      <element name="TTreeNodes.Count">
        <short>
          <var>Count</var> - the number of nodes in the collection
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Item">
        <short>
          <var>Item</var> - finds the node corresponding to the given index
        </short>
      </element>
      <element name="TTreeNodes.Item.Index">
        <short/>
      </element>

      <element name="TTreeNodes.KeepCollapsedNodes">
        <short>
          <var>KeepCollapsedNodes</var> - if True, preserves the nodes that have been collapsed
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.Owner">
        <short>
          <var>Owner</var> - the TTreeView that owns the collection of nodes
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.SelectionCount">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.TopLvlCount">
        <short>
          <var>TopLvlCount</var> - the number of nodes at the top level of the tree structure
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodes.TopLvlItems">
        <short>
          <var>TopLvlItems</var> - the list of nodes at the top level of the tree structure
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodes.TopLvlItems.Index">
        <short/>
      </element>

      <element name="TTreeViewState">
        <short>
          <var>TTreeViewState</var> - enumerated type containing the permissible values for state of a <var>TTreeView</var>
        </short>
        <descr>
          <p>
            <var>TTreeViewState</var> is an enumerated type containing the permissible state values for <var>TTreeView</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeViewState.tvsScrollbarChanged">
        <short/>
      </element>
      <element name="TTreeViewState.tvsMaxRightNeedsUpdate">
        <short/>
      </element>
      <element name="TTreeViewState.tvsTopsNeedsUpdate">
        <short/>
      </element>
      <element name="TTreeViewState.tvsMaxLvlNeedsUpdate">
        <short/>
      </element>
      <element name="TTreeViewState.tvsTopItemNeedsUpdate">
        <short/>
      </element>
      <element name="TTreeViewState.tvsBottomItemNeedsUpdate">
        <short/>
      </element>
      <element name="TTreeViewState.tvsCanvasChanged">
        <short/>
      </element>
      <element name="TTreeViewState.tvsDragged">
        <short/>
      </element>
      <element name="TTreeViewState.tvsIsEditing">
        <short/>
      </element>
      <element name="TTreeViewState.tvsStateChanging">
        <short/>
      </element>
      <element name="TTreeViewState.tvsManualNotify">
        <short/>
      </element>
      <element name="TTreeViewState.tvsUpdating">
        <short/>
      </element>
      <element name="TTreeViewState.tvsPainting">
        <short/>
      </element>
      <element name="TTreeViewState.tvsMouseCapture">
        <short/>
      </element>
      <element name="TTreeViewState.tvsWaitForDragging">
        <short/>
      </element>
      <element name="TTreeViewState.tvsDblClicked">
        <short/>
      </element>
      <element name="TTreeViewState.tvsTripleClicked">
        <short/>
      </element>
      <element name="TTreeViewState.tvsQuadClicked">
        <short/>
      </element>
      <element name="TTreeViewState.tvsSelectionChanged">
        <short/>
      </element>

      <element name="TTreeViewStates">
        <short>
          <var>TTreeViewStates</var> - set of <var>TTreeViewState</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeViewOption">
        <short>
          <var>TTreeViewOption</var> - enumerated type containing the permissible values for Options in TreeViews
        </short>
        <descr>
          <p>
            <var>TTreeViewOption</var> - enumerated type containing the permissible values for Options in TreeViews.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeViewOption.tvoAllowMultiselect">
        <short>
          Allows selection of several tree-items, e.g. using Ctrl+click and Shift+click. Has the same affect as setting the MultiSelect property to True.
        </short>
      </element>
      <element name="TTreeViewOption.tvoAutoExpand">
        <short>
          Automatically expands child nodes for a tree-item when user clicks it, or the item is activated by code. Has the same affect as setting the AutoExpand property to True.
        </short>
      </element>
      <element name="TTreeViewOption.tvoAutoInsertMark">
        <short>
          Allows painting a horizontal line below a tree-item under cursor when mouse moves. Good for drag-drop.
        </short>
      </element>
      <element name="TTreeViewOption.tvoAutoItemHeight">
        <short>Detect height of a tree-item based on current font and icons.</short>
      </element>
      <element name="TTreeViewOption.tvoHideSelection">
        <short>
          If a control looses focus, then don't paint selection for selected tree-item. Same as HideSelection property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoHotTrack">
        <short>Additionally highlight/underline a tree-item when mouse is over it. Same as HotTrack property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoKeepCollapsedNodes">
        <short>
          When some items change, keep previously folded tree-items in folded state.
        </short>
      </element>
      <element name="TTreeViewOption.tvoReadOnly">
        <short>
          Don't allow to change item captions by clicking on items with a delay. Same as ReadOnly property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoRightClickSelect">
        <short>
          Right-click also selects a tree-item. Otherwise it only calls PopupMenu. Same as RightClickSelect property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoRowSelect">
        <short>
          When a tree-item is selected, paint selection background with full width. Same as RowSelect property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowButtons">
        <short>
          Show expand/collapse (fold/unfold) icons at left side for nodes with sub-nodes. Same as ShowButtons property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowLines">
        <short>
          Show vertical lines at left side which paint tree structure for nested nodes. Same as ShowLines property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowRoot">
        <short>
          Show the root tree-item which is always present in code but may be hidden for user. Same as ShowRoot property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoShowSeparators">
        <short>Show horizontal lines below all tree-items.</short>
      </element>
      <element name="TTreeViewOption.tvoToolTips">
        <short>
          Show tooltip (hint) for a tree-item when the item is too long to fit by width and mouse is over it. Same as ToolTips property.
        </short>
      </element>
      <element name="TTreeViewOption.tvoNoDoubleClickExpand">
        <short>Prevents toggling the expanded state for the treeview item when it is double clicked</short>
      </element>
      <element name="TTreeViewOption.tvoThemedDraw">
        <short>Treeview item is drawn using settings from theme services</short>
      </element>
      <element name="TTreeViewOption.tvoEmptySpaceUnselect">
        <short>Indicates if empty space can be be drawn below unselected items in the treeview</short>
      </element>

      <element name="TTreeViewOptions">
        <short>
          <var>TTreeViewOptions</var> - set of <var>TTreeViewOption</var>
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="DefaultTreeViewOptions">
        <short>A set of TreeViewOptions which are set be default.</short>
        <descr>
          <p>
            A series of defaults used to set the options of a TreeView object when first placed on a form. This set consists of the following items:
          </p>
          <ul>
            <li>tvoShowRoot</li>
            <li>tvoShowLines</li>
            <li>tvoShowButtons</li>
            <li>tvoHideSelection</li>
            <li>tvoToolTips</li>
            <li>tvoKeepCollapsedNodes</li>
            <li>tvoAutoItemHeight</li>
          </ul>
          <p>
            For the meaning of these options, see the documentation of <var>TTreeView</var>.
          </p>
        </descr>
        <seealso>
          <link id="TTreeView"/>
        </seealso>
      </element>

      <element name="DefaultMultiSelectStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="DefaultTreeNodeHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="DefaultTreeNodeExpandSignSize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeViewExpandSignType">
        <short>
          <var>TTreeViewExpandSignType</var> is an enumerated type which specifies the symbol displayed in a Treeview to denote the expanded state for a given node.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeViewExpandSignType.tvestTheme">
        <short>Uses the value provided by Them Services</short>
      </element>
      <element name="TTreeViewExpandSignType.tvestPlusMinus">
        <short>Uses a Plus or Minus sign</short>
      </element>
      <element name="TTreeViewExpandSignType.tvestArrow">
        <short>Uses an unfilled Arrow</short>
      </element>
      <element name="TTreeViewExpandSignType.tvestArrowFill">
        <short>Uses a filled Arrow</short>
      </element>

      <element name="TTreeViewInsertMarkType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeViewInsertMarkType.tvimNone">
        <short/>
      </element>
      <element name="TTreeViewInsertMarkType.tvimAsFirstChild">
        <short/>
      </element>
      <element name="TTreeViewInsertMarkType.tvimAsNextSibling">
        <short/>
      </element>
      <element name="TTreeViewInsertMarkType.tvimAsPrevSibling">
        <short/>
      </element>

      <element name="TCustomTreeView">
        <short>
          Ancestor class for <var>TTreeView</var>
        </short>
        <descr>
          <p>
            <var>TCustomTreeView</var> - ancestor class for <var>TTreeView</var>, which displays a collection of items in a hierarchical tree form. This class defines many properties which are inherited by descendent classes, including loading the data from files or streams, saving to files or streams, updating, sorting alphabetically, editing, making visible or invisible, expanding or collapsing the tree display, and many more.
          </p>
          <p>
            Please note that Accessibility support in TCustomTreeView might make this control slower if there are a very large number of items, for example: 10,000+ items. If the performance impact is unacceptable, it is possible to turn accessibility off for tree view items by setting the <var>AccessibilityOn</var> property to <b>False</b>. The default value is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TTreeView"/>
        </seealso>
      </element>

      <element name="TCustomTreeView.FAccessibilityOn"/>
      <element name="TCustomTreeView.FBottomItem"/>
      <element name="TCustomTreeView.FCallingChange"/>
      <element name="TCustomTreeView.FEditingItem"/>
      <element name="TCustomTreeView.FExpandSignType"/>
      <element name="TCustomTreeView.FExpandSignSize"/>
      <element name="TCustomTreeView.FThemeExpandSignSize"/>
      <element name="TCustomTreeView.FDefItemHeight"/>
      <element name="TCustomTreeView.FDefItemSpace"/>
      <element name="TCustomTreeView.FDragImage"/>
      <element name="TCustomTreeView.FDragNode"/>
      <element name="TCustomTreeView.FIndent"/>
      <element name="TCustomTreeView.FImageChangeLink"/>
      <element name="TCustomTreeView.FImages"/>
      <element name="TCustomTreeView.FImagesWidth"/>
      <element name="TCustomTreeView.FInsertMarkNode"/>
      <element name="TCustomTreeView.FInsertMarkType"/>
      <element name="TCustomTreeView.FLastDropTarget"/>
      <element name="TCustomTreeView.FLastHorzScrollInfo"/>
      <element name="TCustomTreeView.FLastVertScrollInfo"/>
      <element name="TCustomTreeView.FMaxLvl"/>
      <element name="TCustomTreeView.FMaxRight"/>
      <element name="TCustomTreeView.FMouseDownPos"/>
      <element name="TCustomTreeView.FMultiSelectStyle"/>
      <element name="TCustomTreeView.FHotTrackColor"/>
      <element name="TCustomTreeView.FDisabledFontColor"/>
      <element name="TCustomTreeView.FOnAddition"/>
      <element name="TCustomTreeView.FOnAdvancedCustomDraw"/>
      <element name="TCustomTreeView.FOnAdvancedCustomDrawItem"/>
      <element name="TCustomTreeView.FOnChange"/>
      <element name="TCustomTreeView.FOnChanging"/>
      <element name="TCustomTreeView.FOnCollapsed"/>
      <element name="TCustomTreeView.FOnCollapsing"/>
      <element name="TCustomTreeView.FOnCompare"/>
      <element name="TCustomTreeView.FOnCreateNodeClass"/>
      <element name="TCustomTreeView.FOnCustomCreateItem"/>
      <element name="TCustomTreeView.FOnCustomDraw"/>
      <element name="TCustomTreeView.FOnCustomDrawItem"/>
      <element name="TCustomTreeView.FOnCustomDrawArrow"/>
      <element name="TCustomTreeView.FOnDeletion"/>
      <element name="TCustomTreeView.FOnEditing"/>
      <element name="TCustomTreeView.FOnEditingEnd"/>
      <element name="TCustomTreeView.FOnEdited"/>
      <element name="TCustomTreeView.FOnExpanded"/>
      <element name="TCustomTreeView.FOnExpanding"/>
      <element name="TCustomTreeView.FOnGetImageIndex"/>
      <element name="TCustomTreeView.FOnGetSelectedIndex"/>
      <element name="TCustomTreeView.FOnNodeChanged"/>
      <element name="TCustomTreeView.FOnSelectionChanged"/>
      <element name="TCustomTreeView.FOptions"/>
      <element name="TCustomTreeView.FRClickNode"/>
      <element name="TCustomTreeView.FSaveItems"/>
      <element name="TCustomTreeView.FScrollBars"/>
      <element name="TCustomTreeView.FScrolledLeft"/>
      <element name="TCustomTreeView.FScrolledTop"/>
      <element name="TCustomTreeView.FSBHorzShowing"/>
      <element name="TCustomTreeView.FSBVertShowing"/>
      <element name="TCustomTreeView.FSelectedColor"/>
      <element name="TCustomTreeView.FSelectedFontColor"/>
      <element name="TCustomTreeView.FSelectedFontColorUsed"/>
      <element name="TCustomTreeView.FSelectedNode"/>
      <element name="TCustomTreeView.FSelectionChangeEventLock"/>
      <element name="TCustomTreeView.FSeparatorColor"/>
      <element name="TCustomTreeView.FSortType"/>
      <element name="TCustomTreeView.FStateChangeLink"/>
      <element name="TCustomTreeView.FStateImages"/>
      <element name="TCustomTreeView.FStateImagesWidth"/>
      <element name="TCustomTreeView.FStates"/>
      <element name="TCustomTreeView.FTopItem"/>
      <element name="TCustomTreeView.FTreeLineColor"/>
      <element name="TCustomTreeView.FTreeLinePenStyle"/>
      <element name="TCustomTreeView.FTreeLinePenPattern"/>
      <element name="TCustomTreeView.FExpandSignColor"/>
      <element name="TCustomTreeView.FTreeNodes"/>
      <element name="TCustomTreeView.FHintWnd"/>
      <element name="TCustomTreeView.FNodeUnderCursor"/>
      <element name="TCustomTreeView.FPrevToolTips"/>
      <element name="TCustomTreeView.FDragScrollMargin"/>
      <element name="TCustomTreeView.FDragScrollTimer"/>

      <element name="TCustomTreeView.DragScrollTimerTick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DragScrollTimerTick.Sender">
        <short/>
      </element>

      <element name="TCustomTreeView.CanvasChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanvasChanged.Sender">
        <short/>
      </element>

      <element name="TCustomTreeView.GetAutoExpand">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetAutoExpand.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetBackgroundColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetBackgroundColor.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetBottomItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetBottomItem.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetDropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetDropTarget.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetExpandSignSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetExpandSignSize.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetHideSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetHideSelection.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetHotTrack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetHotTrack.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetIndent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetIndent.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetKeepCollapsedNodes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetKeepCollapsedNodes.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetMultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetMultiSelect.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetReadOnly.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetRightClickSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetRightClickSelect.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetRowSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetRowSelect.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetSelection.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetSelectionCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetSelectionCount.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetSelections">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetSelections.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetSelections.AIndex">
        <short/>
      </element>

      <element name="TCustomTreeView.GetShowButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetShowButtons.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetShowLines">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetShowLines.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetShowRoot">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetShowRoot.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetShowSeparators">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetShowSeparators.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetToolTips">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetToolTips.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetTopItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetTopItem.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.IsStoredBackgroundColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsStoredBackgroundColor.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.HintMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.HintMouseLeave.Sender">
        <short/>
      </element>

      <element name="TCustomTreeView.ImageListChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ImageListChange.Sender">
        <short/>
      </element>

      <element name="TCustomTreeView.NodeIsSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.NodeIsSelected.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.NodeIsSelected.ANode">
        <short/>
      </element>

      <element name="TCustomTreeView.OnChangeTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.OnChangeTimer.Sender">
        <short/>
      </element>

      <element name="TCustomTreeView.SetAutoExpand">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetAutoExpand.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetBackgroundColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetBackgroundColor.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetBottomItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetBottomItem.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetDefaultItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetDefaultItemHeight.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetExpandSignType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetExpandSignType.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetDropTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetDropTarget.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetHideSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetHideSelection.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetHotTrack">
        <short>
          <var>SetHotTrack</var> - specifies the status of HotTrack
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetHotTrack.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetIndent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetIndent.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetImages.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetImagesWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetImagesWidth.AImagesWidth">
        <short/>
      </element>

      <element name="TCustomTreeView.SetInsertMarkNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetInsertMarkNode.AValue">
        <short/>
      </element>

      <element name="TCustomTreeView.SetInsertMarkType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetInsertMarkType.AValue">
        <short/>
      </element>

      <element name="TCustomTreeView.SetKeepCollapsedNodes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetKeepCollapsedNodes.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetMultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetMultiSelect.AValue">
        <short/>
      </element>

      <element name="TCustomTreeView.SetMultiSelectStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetMultiSelectStyle.AValue">
        <short/>
      </element>

      <element name="TCustomTreeView.SetReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetReadOnly.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetRightClickSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetRightClickSelect.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetRowSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetRowSelect.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetScrollBars.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetScrolledLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetScrolledLeft.AValue">
        <short/>
      </element>

      <element name="TCustomTreeView.SetScrolledTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetScrolledTop.AValue">
        <short/>
      </element>

      <element name="TCustomTreeView.SetSelectedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetSelectedColor.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetSelectedFontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetSelectedFontColor.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetSelection.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetSeparatorColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetSeparatorColor.AValue">
        <short/>
      </element>

      <element name="TCustomTreeView.SetShowButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetShowButton.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetShowLines">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetShowLines.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetShowRoot">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetShowRoot.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetShowScrollbar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetShowScrollbar.Which">
        <short/>
      </element>
      <element name="TCustomTreeView.SetShowScrollbar.AShow">
        <short/>
      </element>

      <element name="TCustomTreeView.SetShowSeparators">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetShowSeparators.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetSortType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetSortType.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetStateImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetStateImages.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetStateImagesWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetStateImagesWidth.AStateImagesWidth">
        <short/>
      </element>

      <element name="TCustomTreeView.SetToolTips">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetToolTips.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetTreeLineColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetTreeLineColor.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetTreeNodes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetTreeNodes.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetTopItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetTopItem.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.UpdateAllTops">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UpdateBottomItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UpdateHotTrack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.UpdateHotTrack.X">
        <short/>
      </element>
      <element name="TCustomTreeView.UpdateHotTrack.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.UpdateMaxLvl">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UpdateMaxRight">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UpdateTopItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UpdateScrollbars">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UpdateTooltip">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.UpdateTooltip.X">
        <short/>
      </element>
      <element name="TCustomTreeView.UpdateTooltip.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.InternalSelectionChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.AllowMultiSelectWithCtrl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.AllowMultiSelectWithCtrl.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.AllowMultiSelectWithCtrl.AState">
        <short/>
      </element>

      <element name="TCustomTreeView.AllowMultiSelectWithShift">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.AllowMultiSelectWithShift.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.AllowMultiSelectWithShift.AState">
        <short/>
      </element>

      <element name="TCustomTreeView.SetExpandSignSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetExpandSignSize.AExpandSignSize">
        <short/>
      </element>

      <element name="TCustomTreeView.FChangeTimer">
        <short>
          <var>FChangeTimer</var> - local variable to act as timer for changes
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.FEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomTreeView.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.Added">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Added.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.EditorEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.EditorEditingDone.Sender">
        <short/>
      </element>

      <element name="TCustomTreeView.EditorKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.EditorKeyDown.Sender">
        <short/>
      </element>
      <element name="TCustomTreeView.EditorKeyDown.Key">
        <short/>
      </element>
      <element name="TCustomTreeView.EditorKeyDown.Shift">
        <short/>
      </element>

      <element name="TCustomTreeView.BeginAutoDrag" link="#LCL.Controls.TControl.BeginAutoDrag"/>

      <element name="TCustomTreeView.BeginEditing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.BeginEditing.ANode">
        <short/>
      </element>

      <element name="TCustomTreeView.DoDragMsg" link="Controls.TWinControl.DoDragMsg"/>
      <element name="TCustomTreeView.DoDragMsg.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.DoDragMsg.ADragMessage">
        <short/>
      </element>
      <element name="TCustomTreeView.DoDragMsg.APosition">
        <short/>
      </element>
      <element name="TCustomTreeView.DoDragMsg.ADragObject">
        <short/>
      </element>
      <element name="TCustomTreeView.DoDragMsg.ATarget">
        <short/>
      </element>
      <element name="TCustomTreeView.DoDragMsg.ADocking">
        <short/>
      </element>

      <element name="TCustomTreeView.CanChange">
        <short>
          <var>CanChange</var> - returns True if a given TreeNode can be changed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanChange.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CanChange.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.CanCollapse">
        <short>
          <var>CanCollapse</var> returns True if a given TreeNode is able to be collapsed
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanCollapse.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CanCollapse.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.CanEdit">
        <short>
          <var>CanEdit</var> - returns True if a Given TreeNode is allowed to be edited
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanEdit.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CanEdit.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.CanExpand">
        <short>
          <var>CanExpand</var> - returns True if the specified TreeNode can be expanded
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CanExpand.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CanExpand.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.CreateNode">
        <short>
          <var>CreateNode</var> - creates a new node in a TreeView and returns its content
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CreateNode.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.CreateNodes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CreateNodes.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.CustomDraw">
        <short>
          <var>CustomDraw</var> - returns True if Custom Drawing is proceeding in the specified Rectangle
        </short>
        <descr>
          <p>
            <var>CustomDraw</var> - returns True if Custom Drawing is proceeding in the specified Rectangle.
          </p>
          <p>
            Stage indicates whether PrePaint, PostPaint, PreErase or PostErase.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.graphics.Progress">Progress</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.CustomDraw.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDraw.ARect">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDraw.Stage">
        <short/>
      </element>

      <element name="TCustomTreeView.CustomDrawItem">
        <short>
          <var>CustomDrawItem</var> - returns True if Custom Image drawing is proceeding at the specified TreeNode
        </short>
        <descr>
          <p>
            <var>CustomDrawItem</var> - returns True if Custom Image drawing is proceeding at the specified TreeNode.
          </p>
          <p>
            State denotes one of <var>Selected, Grayed, Disabled, Checked, Focused, Default, Hot, Marked or Indeterminate</var>.
          </p>
          <p>Stage indicates whether PrePaint, PostPaint, PreErase or PostErase.</p>
          <p>If <var>PaintImages</var> is True, Images should be painted as well as text.</p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.Node">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.State">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.Stage">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomDrawItem.PaintImages">
        <short/>
      </element>

      <element name="TCustomTreeView.DefaultItemHeightIsStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DefaultItemHeightIsStored.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.DoAutoAdjustLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TCustomTreeView.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TCustomTreeView.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TCustomTreeView.ExpandSignSizeIsStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ExpandSignSizeIsStored.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetBuiltinIconSize">
        <short>Gets the size for built-in icons used for items in the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetBuiltinIconSize.Result">
        <short>TSize instance with the Width and Height for an icon</short>
      </element>

      <element name="TCustomTreeView.GetDragImages" link="#LCL.Controls.TControl.GetDragImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetDragImages.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetImageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetImageSize.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetMaxLvl">
        <short>
          <var>GetMaxLvl</var> - returns the maximum level of branching of the tree structure
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetMaxLvl.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetMaxScrollLeft">
        <short>
          <var>GetMaxScrollLeft</var> - returns maximal extent of scrolling to the left
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetMaxScrollLeft.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetMaxScrollTop">
        <short>
          <var>GetMaxScrollTop</var> - returns the maximal extent of scrolling upwards
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetMaxScrollTop.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeAtY">
        <short>
          <var>GetNodeAtY</var> - returns the node at the specified (absolute) Y coordinate
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeAtY.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeAtY.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeWithExpandSign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSign.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSign.X">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeWithExpandSign.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeDrawAreaHeight">
        <short>
          <var>GetNodeDrawAreaHeight</var> - returns the height for the area in which node is drawn
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeDrawAreaHeight.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeDrawAreaWidth">
        <short>
          <var>GetNodeDrawAreaWidth</var> - returns the width for the area in which node is drawn
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeDrawAreaWidth.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.IndentIsStored">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IndentIsStored.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.IsCustomDrawn">
        <short>
          <var>IsCustomDrawn</var> - returns True if the specified target node is custom drawn
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsCustomDrawn.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.IsCustomDrawn.Target">
        <short/>
      </element>
      <element name="TCustomTreeView.IsCustomDrawn.Stage">
        <short/>
      </element>

      <element name="TCustomTreeView.IsNodeVisible">
        <short>
          <var>IsNodeVisible</var> - returns True if the specified node is visible
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsNodeVisible.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.IsNodeVisible.ANode">
        <short/>
      </element>

      <element name="TCustomTreeView.IsNodeHeightFullVisible">
        <short>
          <var>IsNodeHeightFullVisible</var> - returns True if the full height of the specified node is visible in the current view
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsNodeHeightFullVisible.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.IsNodeHeightFullVisible.ANode">
        <short/>
      </element>

      <element name="TCustomTreeView.IsInsertMarkVisible">
        <short>
          <var>IsInsertMarkVisible</var> - returns True if an Insert mark is visible
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsInsertMarkVisible.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.MoveSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveSelection.ANewNode">
        <short/>
      </element>
      <element name="TCustomTreeView.MoveSelection.ASelect">
        <short/>
      </element>

      <element name="TCustomTreeView.Change">
        <short>
          <var>Change</var> - software emulation of the <var>OnChange</var> event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Change.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.Collapse">
        <short>
          <var>Collapse</var> - software emulation of the <var>OnCollapsed</var> event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Collapse.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.CreateWnd" link="#LCL.Controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Click" link="#LCL.Controls.TControl.Click">
        <descr>
          <p>
            <var>Click</var> is an overridden method in <var>TCustomTreeView</var>. It calls the inherited method when a tree node has been selected using a mouse down event. No actions are performed in the method when a tree node has not been selected using the mouse.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.Click">TControl.Click</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.DblClick" link="#LCL.Controls.TControl.DblClick">
        <descr>
          <p>
            <var>DblClick</var> is an overridden method in <var>TCustomTreeView</var>. It calls the inherited method when a tree node has been double clicked using the mouse. No actions are performed in the method when a tree node has not been selected and a double click event occurs.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DblClick">TControl.DblClick</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.TripleClick" link="#LCL.Controls.TControl.TripleClick">
        <short></short>
        <descr></descr>
        <seealso>
          <link id="#lcl.controls.TControl.TripleClick">TControl.TripleClick</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.QuadClick" link="#LCL.Controls.TControl.QuadClick">
        <short></short>
        <descr></descr>
        <seealso>
          <link id="#lcl.controls.TControl.QuadClick">TControl.QuadClick</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.Delete">
        <short>
          <var>Delete</var> - remove the specified node from the tree structure (software emulation of the <var>OnDeletion</var> event)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Delete.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.DoCreateNodeClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoCreateNodeClass.NewNodeClass">
        <short/>
      </element>

      <element name="TCustomTreeView.DoEndDrag" link="#LCL.Controls.TControl.DoEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoEndDrag.Target">
        <short/>
      </element>
      <element name="TCustomTreeView.DoEndDrag.X">
        <short/>
      </element>
      <element name="TCustomTreeView.DoEndDrag.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.DoMouseWheel" link="#LCL.Controls.TControl.DoMouseWheel"/>
      <element name="TCustomTreeView.DoMouseWheel.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheel.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheel.WheelDelta">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheel.MousePos">
        <short/>
      </element>

      <element name="TCustomTreeView.DoMouseWheelHorz">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.WheelDelta">
        <short/>
      </element>
      <element name="TCustomTreeView.DoMouseWheelHorz.MousePos">
        <short/>
      </element>

      <element name="TCustomTreeView.DoPaint">
        <short>
          <var>DoPaint</var> - perform the actual painting
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.DoPaintNode">
        <short>
          <var>DoPaintNode</var> - perform the actual painting of the specified node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoPaintNode.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.DoStartDrag" link="#LCL.Controls.TControl.DoStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DoStartDrag.DragObject">
        <short/>
      </element>

      <element name="TCustomTreeView.DragOver" link="#LCL.Controls.TControl.DragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.DragOver.Source">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.X">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.Y">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.State">
        <short/>
      </element>
      <element name="TCustomTreeView.DragOver.Accept">
        <short/>
      </element>

      <element name="TCustomTreeView.EndEditing">
        <short>
          <var>EndEditing</var> - finish editing
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.EnsureNodeIsVisible">
        <short>
          <var>EnsureNodeIsVisible</var> - method to make sure specified node is visible
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.EnsureNodeIsVisible.ANode">
        <short/>
      </element>

      <element name="TCustomTreeView.Expand">
        <short>
          <var>Expand</var> the specified node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Expand.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.GetImageIndex">
        <short>
          <var>GetImageIndex</var> - returns the index of the image associated with the specified node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetImageIndex.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.GetSelectedIndex">
        <short>
          <var>GetSelectedIndex</var> - returns the index of the selected node
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetSelectedIndex.Node">
        <short/>
      </element>

      <element name="TCustomTreeView.InitializeWnd" link="#LCL.Controls.TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.KeyDown.Key">
        <short/>
      </element>
      <element name="TCustomTreeView.KeyDown.Shift">
        <short/>
      </element>

      <element name="TCustomTreeView.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.MouseDown" link="#LCL.Controls.TControl.MouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MouseDown.Button">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseDown.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseDown.X">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseDown.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.MouseMove" link="#LCL.Controls.TControl.MouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MouseMove.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseMove.X">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseMove.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.MouseUp" link="#LCL.Controls.TControl.MouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MouseUp.Button">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseUp.Shift">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseUp.X">
        <short/>
      </element>
      <element name="TCustomTreeView.MouseUp.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.MouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.NodeChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.NodeChanged.Node">
        <short/>
      </element>
      <element name="TCustomTreeView.NodeChanged.ChangeReason">
        <short/>
      </element>

      <element name="TCustomTreeView.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomTreeView.Notification.Operation">
        <short/>
      </element>

      <element name="TCustomTreeView.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ScrollView">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ScrollView.DeltaX">
        <short/>
      </element>
      <element name="TCustomTreeView.ScrollView.DeltaY">
        <short/>
      </element>

      <element name="TCustomTreeView.SetDragMode" link="#LCL.Controls.TControl.SetDragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetDragMode.Value">
        <short/>
      </element>

      <element name="TCustomTreeView.SetOptions">
        <short>
          <var>SetOptions</var> - specifies the options for the TreeView
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetOptions.NewOptions">
        <short/>
      </element>

      <element name="TCustomTreeView.UpdateDefaultItemHeight">
        <short>
          <var>UpdateDefaultItemHeight</var> - brings the value of the default item height up-to-date
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UpdateInsertMark">
        <short>
          <var>UpdateInsertMark</var> - see if there is an insert mark at X,Y and put one in if necessary
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.UpdateInsertMark.X">
        <short/>
      </element>
      <element name="TCustomTreeView.UpdateInsertMark.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.DoSelectionChanged">
        <short>
          <var>DoSelectionChanged</var> - perform the code required for a change in selection
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.WMHScroll">
        <short>
          <var>WMHScroll</var> - LCL Message for horizontal scroll
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMHScroll.Msg">
        <short/>
      </element>

      <element name="TCustomTreeView.WMVScroll">
        <short>
          <var>WMVScroll</var> - LCL Message for Vertical scroll
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMVScroll.Msg">
        <short/>
      </element>

      <element name="TCustomTreeView.WMLButtonDown" link="#LCL.Controls.TControl.WMLButtonDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMLButtonDown.AMessage">
        <short/>
      </element>

      <element name="TCustomTreeView.WMSetFocus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMSetFocus.Message">
        <short/>
      </element>

      <element name="TCustomTreeView.WMKillFocus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WMKillFocus.Message">
        <short/>
      </element>

      <element name="TCustomTreeView.Resize" link="#LCL.Controls.TControl.Resize">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.EditingItem">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.States">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.GetSelectedChildAccessibleObject">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetSelectedChildAccessibleObject.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetChildAccessibleObjectAtPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetChildAccessibleObjectAtPos.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetChildAccessibleObjectAtPos.APos">
        <short/>
      </element>

      <element name="TCustomTreeView.AccessibilityOn">
        <short>Allows to turn accessibility off to speed up the control</short>
        <descr>
          <p>
            This property is provided for the case when a tree view contains a huge amount of items, lets say 10.000+. In this case accessibility might slow the tree down, so turning this property off might make things faster.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.AutoExpand">
        <short>Unfold a tree-item when user clicks it or an item activated by code.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.BorderStyle" link="#LCL.Controls.TCustomControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.HideSelection">
        <short>
          If a control looses focus, then don't paint selection for a selected tree-item.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.HotTrack">
        <short>Additionally highlight/underline tree-item when mouse is over it.</short>
        <descr/>
        <seealso>
          <link id="#lcl.comctrls.TCustomListview.HotTrack">TCustomListView.HotTrack</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.HotTrackColor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.DisabledFontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Indent">
        <short>Size in pixels by which each nested branching level is to be indented.</short>
        <descr>
          <p>
            Use 0 for auto-sized value.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.MultiSelect">
        <short>
          Allow to select several tree-items at a time, e.g. using Ctrl+click (select one item more) or Shift+click (select range of items).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnAddition">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnAdvancedCustomDraw">
        <short>
          <var>OnAdvancedCustomDraw</var> - event handler for advanced custom drawing
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnAdvancedCustomDrawItem">
        <short>
          <var>OnAdvancedCustomDrawItem</var> - event handler for advanced custom drawing item
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnChange">
        <short>
          <var>OnChange</var> - specialized event handler for a change in the TreeView
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnChanging">
        <short>
          <var>OnChanging</var> - specialized event handler while TreeView is being changed
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCollapsed">
        <short>
          <var>OnCollapsed</var> - specialized event handler when part of the tree is collapsed
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCollapsing">
        <short>
          <var>OnCollapsing</var> - specialized event handler while part of the tree is being collapsed
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCompare">
        <short>
          <var>OnCompare</var> - specialized event handler for comparisons within the TreeView
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCreateNodeClass">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCustomCreateItem">
        <short>
          <var>OnCustomCreateItem</var> - event handler for custom item creation
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCustomDraw">
        <short>
          <var>OnCustomDraw</var> - event handler for custom drawing
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCustomDrawItem">
        <short>
          <var>OnCustomDrawItem</var> - event handler for custom drawing item
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnCustomDrawArrow">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnDeletion">
        <short>
          <var>OnDeletion</var> - specialized event handler for deletion of node(s) from the tree
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnEdited">
        <short>
          <var>OnEdited</var> - specialized event handler when the TreeView has been edited
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnEditing">
        <short>
          <var>OnEditing</var> - specialized event handler while a TreeView is being edited
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnEditingEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnExpanded">
        <short>
          <var>OnExpanded</var> - specialized event handler when a TreeView has been expanded
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnExpanding">
        <short>
          <var>OnExpanding</var> - specialized event handler while a TreeView is being expanded
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for finding the index of an image
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnGetSelectedIndex">
        <short>
          <var>OnGetSelectedIndex</var> - event handler for finding index of selected item
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnNodeChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.OnSelectionChanged">
        <short>
          <var>OnSelectionChanged</var> - event handler for a change in the selection
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ReadOnly">
        <short>Don't allow to change item captions by mouse click with a delay.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.RightClickSelect">
        <short>Right-click also selects tree-item. Else it only calls PopupMenu.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.RowSelect">
        <short>When a tree-item is selected, paint selection background with full width.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ScrolledLeft">
        <short>
          <var>ScrolledLeft</var> - the position of the tree when fully scrolled to the left
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ScrolledTop">
        <short>
          <var>ScrolledTop</var> - the position of the tree when fully scrolled to the top
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowButtons">
        <short>
          Show expand/collapse (fold/unfold) icons at left side for nodes with sub-nodes.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowLines">
        <short>
          Show vertical lines at left side. They paint the tree structure for nested nodes.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowRoot">
        <short>
          Show the root tree-item which is always present in code but may be hidden for user.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ShowSeparators">
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SortType">
        <short>Allow to show items sorted: by caption, by Data property or both.</short>
        <descr>
          Changing the Text or Data of a node will sort again. While adding nodes does not. Call TreeView1.AlphaSort to sort the whole tree. Call ParentNode.CustomSort(nil) to sort only the child nodes of a single node.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ToolTips">
        <short>
          Show tooltip (hint) for a tree-item when the item is too long to fit by width and mouse is over it.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomTreeView</var>: calls inherited <var>Create</var> then sets defaults for style, size, etc
        </short>
        <descr>
          <p>
            <var>Create</var> - constructor for <var>TCustomTreeView</var>: calls inherited <var>Create</var> then sets defaults for style, size, etc.
          </p>
          <p>
            Among the variables initialized and defaults set are:
          </p>
          <p>
            size, color, the symbols for expansion etc, the border style and width, scroll bars, options, indentation, timers, action links
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TCustomTreeView.Create.AnOwner">
        <short/>
      </element>

      <element name="TCustomTreeView.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomTreeView</var>: frees images, nodes and links, then calls inherited Destroy
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.AlphaSort">
        <short>If True, sort alphabetically</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.AlphaSort.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.ClearSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ClearSelection.KeepPrimary">
        <short/>
      </element>

      <element name="TCustomTreeView.ConsistencyCheck">
        <short>
          <var>ConsistencyCheck</var> - check that indexes of treenodes match those of images etc
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.CustomSort">
        <short>
          <var>CustomSort</var> - if True, an external sorting method specified by <var>SortProc</var> is to be used
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.CustomSort.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.CustomSort.SortProc">
        <short/>
      </element>

      <element name="TCustomTreeView.DefaultTreeViewSort">
        <short>
          <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2
        </short>
        <descr>
          <p>
            <var>DefaultTreeViewSort</var> - returns result of string comparison between names of Node1 and Node2.
          </p>
          <p>
            <var>DefaultTreeViewSort</var> compares the text of two TreeNodes and returns the following result:
          </p>
          <dl>
            <dt>&lt; 0</dt>
            <dd>if <var>Node1.Text&lt;Node2.Text</var>.</dd>
            <dt>0</dt>
            <dd>if <var>Node1.Text=Node2.Text</var>.</dd>
            <dt>&gt; 0</dt>
            <dd>if <var>Node1.Text&gt;Node2.Text</var>.</dd>
          </dl>
          <p>
            The comparison takes into account ANSI characters, i.e. it takes care of accented characters. Unlike AnsiCompareText, the comparison is case sensitive.
          </p>
        </descr>
      </element>

      <element name="TCustomTreeView.EraseBackground" link="#LCL.Controls.TWinControl.EraseBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.EraseBackground.DC">
        <short/>
      </element>

      <element name="TCustomTreeView.GetHitTestInfoAt">
        <short>
          <var>GetHitTestInfoAt</var> - returns the result of a hit test at the point (X, Y)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetHitTestInfoAt.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetHitTestInfoAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.GetHitTestInfoAt.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.GetNodeAt">
        <short>
          <var>GetNodeAt</var> - returns the TreeNode at position (X. Y)
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetNodeAt.Result">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.GetNodeAt.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.GetInsertMarkAt">
        <short>
          <var>GetInsertMarkAt</var> - find if there is an insert mark at the specified coordinates
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.Y">
        <short/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkNode">
        <short/>
      </element>
      <element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkType">
        <short/>
      </element>

      <element name="TCustomTreeView.SetInsertMark">
        <short>
          <var>SetInsertMark</var> - place an Insert mark at the specified node in the tree
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetInsertMark.AnInsertMarkNode">
        <short/>
      </element>
      <element name="TCustomTreeView.SetInsertMark.AnInsertMarkType">
        <short/>
      </element>

      <element name="TCustomTreeView.SetInsertMarkAt">
        <short>
          <var>SetInsertMarkAt</var> - place an insert mark at the specified coordinates
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SetInsertMarkAt.X">
        <short/>
      </element>
      <element name="TCustomTreeView.SetInsertMarkAt.Y">
        <short/>
      </element>

      <element name="TCustomTreeView.Invalidate" link="#LCL.Controls.TControl.Invalidate">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.IsEditing">
        <short>
          <var>IsEditing</var> - returns True if editing is in progress
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.IsEditing.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.BeginUpdate">
        <short>
          <var>BeginUpdate</var> - start the update of the display
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.EndUpdate">
        <short>
          <var>EndUpdate</var> finishes updating the display
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.FullCollapse">
        <short>
          <var>FullCollapse</var> - method to collapse the treeview fully and show just the root
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.FullExpand">
        <short>
          <var>FullExpand</var> - method to expand the treeview fully and show all the branches
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.LoadFromFile">
        <short>
          <var>LoadFromFile</var> - load the data from the specified file
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.LoadFromFile.FileName">
        <short/>
      </element>

      <element name="TCustomTreeView.LoadFromStream">
        <short>
          <var>LoadFromStream</var> - load data from the specified stream
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.LoadFromStream.Stream">
        <short/>
      </element>

      <element name="TCustomTreeView.SaveToFile">
        <short>
          <var>SaveToFile</var> - saves the data to the specified file
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SaveToFile.FileName">
        <short/>
      </element>

      <element name="TCustomTreeView.SaveToStream">
        <short>
          <var>SaveToStream</var> - save the data to the specified stream
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SaveToStream.Stream">
        <short/>
      </element>

      <element name="TCustomTreeView.WriteDebugReport">
        <short>
          <var>WriteDebugReport</var> - used for debugging
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.WriteDebugReport.Prefix">
        <short/>
      </element>
      <element name="TCustomTreeView.WriteDebugReport.AllNodes">
        <short/>
      </element>

      <element name="TCustomTreeView.LockSelectionChangeEvent">
        <short>
          <var>LockSelectionChangeEvent</var> - if the selection has changed, lock its status
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.UnlockSelectionChangeEvent">
        <short>
          <var>UnlockSelectionChangeEvent</var> - unlock a selection to allow it to be changed
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.GetFirstMultiSelected">
        <short>
          <var>GetFirstMultiSelected</var> - returns the first node from a multiple selection
        </short>
        <descr>This works only if tvoAllowMultiSelect is enabled. </descr>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetFirstMultiSelected.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.GetLastMultiSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.GetLastMultiSelected.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.Select">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Select.Node">
        <short/>
      </element>
      <element name="TCustomTreeView.Select.ShiftState">
        <short/>
      </element>
      <element name="TCustomTreeView.Select.Nodes">
        <short/>
      </element>

      <element name="TCustomTreeView.SelectionVisible">
        <short>
          <var>SelectionVisible</var> - returns True if a selection is visible
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.SelectionVisible.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.MakeSelectionVisible">
        <short>
          <var>MakeSelectionVisible</var> - method for making a selection visible
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ClearInvisibleSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.StoreCurrentSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.StoreCurrentSelection.Result">
        <short/>
      </element>

      <element name="TCustomTreeView.ApplyStoredSelection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.ApplyStoredSelection.ASelection">
        <short/>
      </element>
      <element name="TCustomTreeView.ApplyStoredSelection.FreeList">
        <short/>
      </element>

      <element name="TCustomTreeView.MoveToNextNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveToNextNode.ASelect">
        <short/>
      </element>

      <element name="TCustomTreeView.MoveToPrevNode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveToPrevNode.ASelect">
        <short/>
      </element>

      <element name="TCustomTreeView.MovePageDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MovePageDown.ASelect">
        <short/>
      </element>

      <element name="TCustomTreeView.MovePageUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MovePageUp.ASelect">
        <short/>
      </element>

      <element name="TCustomTreeView.MoveHome">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveHome.ASelect">
        <short/>
      </element>

      <element name="TCustomTreeView.MoveEnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.MoveEnd.ASelect">
        <short/>
      </element>

      <element name="TCustomTreeView.BackgroundColor">
        <short>Color of background area of control.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.BottomItem">
        <short>
          <var>BottomItem</var> - the last item on the list
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.DefaultItemHeight">
        <short>
          Default height of tree-items. If tvoAutoItemHeight is set in Options, this value is detected from font and icons.
        </short>
        <seealso/>
      </element>

      <element name="TCustomTreeView.DropTarget">
        <short>
          <var>DropTarget</var> - the target node for dropping a dragged item
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ExpandSignColor">
        <short>
          Color used to paint expand/collapse (fold/unfold) symbol (i.e. plus/minus symbol).
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ExpandSignSize">
        <short>Size of expand/collapse (fold/unfold) symbol.</short>
        <descr>
          <p>Use 0 for auto-sized value.</p>
        </descr>
      </element>

      <element name="TCustomTreeView.ExpandSignType">
        <short>
          Sets shape of expand/collapse (fold/unfold) symbol: plus/minus, empty arrows, filled arrows etc.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Images">
        <short>TImageList object which holds icons for tree-items.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ImagesWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.InsertMarkNode">
        <short>
          <var>InsertMarkNode</var> - place a marker on the specified node
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.InsertMarkType">
        <short>
          <var>InsertMarkType</var> - the type of marker to be inserted
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Items">
        <short>
          Collection of tree-items which is the content of control. Has type TTreeNodes.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.KeepCollapsedNodes">
        <short>
          <var>KeepCollapsedNodes</var> - if True, the collapsed nodes are to be retained
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.MultiSelectStyle">
        <short>Additional options for MultiSelect property.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Options">
        <short>Set of additional option flags for treeview.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.ScrollBars">
        <short>
          Kind of scrollbars: horizontal, vertical, or both. Auto* mean that scrollbars hide automatically.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Selected">
        <short>The <var>Selected</var> tree nodes</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SelectionColor">
        <short>Color used to paint background of item selection.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SelectionCount">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SelectionFontColor">
        <short>Color used to paint text of selected item.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.SelectionFontColorUsed">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.Selections">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomTreeView.Selections.AIndex">
        <short/>
      </element>

      <element name="TCustomTreeView.SeparatorColor">
        <short>Color used to paint horizontal lines between items, separators.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.StateImages">
        <short>
          TImageList object which holds icons for tree-item states: normal item, selected item, etc.
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.StateImagesWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.TopItem">
        <short>
          <var>TopItem</var> - the first visible node of the tree
        </short>
        <descr>
          <p>
            Use <var>TopItem</var> to get the topmost visible node. It is usually needed when tree view contains many nodes and scroll bar is required to display them all. If you need the first node of the tree regardless of visibility use <var>Items</var>[0]
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView.Items">Items</link>
          <link id="TCustomTreeView.GetNodeAtY">GetNodeAtY</link>
        </seealso>
      </element>

      <element name="TCustomTreeView.TreeLineColor">
        <short>Color used to paint vertical lines at left side.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.TreeLinePenStyle">
        <short>Style of TPen, used to paint vertical lines at left side.</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomTreeView.TabStop" link="#LCL.Controls.TWinControl.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeView">
        <short>
          <var>TTreeView</var>  is a control that displays a hierarchical list of items
        </short>
        <descr>
          <p>
            Use a <var>TTreeView</var> to display a hierarchical list of items. Items are shown by their caption and an optional bitmap.
          </p>
        </descr>
        <seealso>
          <link id="TCustomTreeView"/>
          <link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
        </seealso>
      </element>

      <element name="TTreeView.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TTreeView.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TTreeView.AutoExpand" link="#lcl.comctrls.TCustomTreeView.AutoExpand"/>
      <element name="TTreeView.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TTreeView.BackgroundColor" link="#lcl.comctrls.TCustomTreeView.BackgroundColor"/>
      <element name="TTreeView.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TTreeView.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="TTreeView.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TTreeView.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TTreeView.DefaultItemHeight" link="#lcl.comctrls.TCustomTreeView.DefaultItemHeight"/>
      <element name="TTreeView.DisabledFontColor" link="#lcl.comctrls.TCustomTreeView.DisabledFontColor"/>
      <element name="TTreeView.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TTreeView.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TTreeView.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TTreeView.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TTreeView.ExpandSignColor" link="#lcl.comctrls.TCustomTreeView.ExpandSignColor"/>
      <element name="TTreeView.ExpandSignSize" link="#lcl.comctrls.TCustomTreeView.ExpandSignSize"/>
      <element name="TTreeView.ExpandSignType" link="#lcl.comctrls.TCustomTreeView.ExpandSignType"/>
      <element name="TTreeView.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TTreeView.HideSelection" link="#lcl.comctrls.TCustomTreeView.HideSelection"/>
      <element name="TTreeView.HotTrack" link="#lcl.comctrls.TCustomTreeView.HotTrack"/>
      <element name="TTreeView.Images" link="#lcl.comctrls.TCustomTreeView.Images"/>
      <element name="TTreeView.ImagesWidth" link="#lcl.comctrls.TCustomTreeView.ImagesWidth"/>
      <element name="TTreeView.Indent" link="#lcl.comctrls.TCustomTreeView.Indent"/>
      <element name="TTreeView.MultiSelect" link="#lcl.comctrls.TCustomTreeView.MultiSelect"/>
      <element name="TTreeView.MultiSelectStyle" link="#lcl.comctrls.TCustomTreeView.MultiSelectStyle"/>
      <element name="TTreeView.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TTreeView.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TTreeView.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TTreeView.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TTreeView.ReadOnly" link="#lcl.comctrls.TCustomTreeView.ReadOnly"/>
      <element name="TTreeView.RightClickSelect" link="#lcl.comctrls.TCustomTreeView.RightClickSelect"/>
      <element name="TTreeView.RowSelect" link="#lcl.comctrls.TCustomTreeView.RowSelect"/>
      <element name="TTreeView.ScrollBars" link="#lcl.comctrls.TCustomTreeView.ScrollBars"/>
      <element name="TTreeView.SelectionColor" link="#lcl.comctrls.TCustomTreeView.SelectionColor"/>
      <element name="TTreeView.SelectionFontColor" link="#lcl.comctrls.TCustomTreeView.SelectionFontColor"/>
      <element name="TTreeView.SelectionFontColorUsed" link="#lcl.comctrls.TCustomTreeView.SelectionFontColorUsed"/>
      <element name="TTreeView.SeparatorColor" link="#lcl.comctrls.TCustomTreeView.SeparatorColor"/>
      <element name="TTreeView.ShowButtons" link="#lcl.comctrls.TCustomTreeView.ShowButtons"/>
      <element name="TTreeView.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TTreeView.ShowLines" link="#lcl.comctrls.TCustomTreeView.ShowLines"/>
      <element name="TTreeView.ShowRoot" link="#lcl.comctrls.TCustomTreeView.ShowRoot"/>
      <element name="TTreeView.SortType" link="#lcl.comctrls.TCustomTreeView.SortType"/>
      <element name="TTreeView.StateImages" link="#lcl.comctrls.TCustomTreeView.StateImages"/>
      <element name="TTreeView.StateImagesWidth" link="#lcl.comctrls.TCustomTreeView.StateImagesWidth"/>
      <element name="TTreeView.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TTreeView.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TTreeView.Tag" link="#rtl.Classes.TComponent.Tag"/>
      <element name="TTreeView.ToolTips" link="#lcl.comctrls.TCustomTreeView.ToolTips"/>
      <element name="TTreeView.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TTreeView.OnAddition" link="#lcl.comctrls.TCustomTreeView.OnAddition"/>
      <element name="TTreeView.OnAdvancedCustomDraw" link="#lcl.comctrls.TCustomTreeView.OnAdvancedCustomDraw"/>
      <element name="TTreeView.OnAdvancedCustomDrawItem" link="#lcl.comctrls.TCustomTreeView.OnAdvancedCustomDrawItem"/>
      <element name="TTreeView.OnChange" link="#lcl.comctrls.TCustomTreeView.OnChange"/>
      <element name="TTreeView.OnChanging" link="#lcl.comctrls.TCustomTreeView.OnChanging"/>
      <element name="TTreeView.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TTreeView.OnCollapsed" link="#lcl.comctrls.TCustomTreeView.OnCollapsed"/>
      <element name="TTreeView.OnCollapsing" link="#lcl.comctrls.TCustomTreeView.OnCollapsing"/>
      <element name="TTreeView.OnCompare" link="#lcl.comctrls.TCustomTreeView.OnCompare"/>
      <element name="TTreeView.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TTreeView.OnCreateNodeClass" link="#lcl.comctrls.TCustomTreeView.OnCreateNodeClass"/>
      <element name="TTreeView.OnCustomCreateItem" link="#lcl.comctrls.TCustomTreeView.OnCustomCreateItem"/>
      <element name="TTreeView.OnCustomDraw" link="#lcl.comctrls.TCustomTreeView.OnCustomDraw"/>
      <element name="TTreeView.OnCustomDrawItem" link="#lcl.comctrls.TCustomTreeView.OnCustomDrawItem"/>
      <element name="TTreeView.OnCustomDrawArrow" link="#lcl.comctrls.TCustomTreeView.OnCustomDrawArrow"/>
      <element name="TTreeView.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TTreeView.OnDeletion" link="#lcl.comctrls.TCustomTreeView.OnDeletion"/>
      <element name="TTreeView.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TTreeView.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TTreeView.OnEdited" link="#lcl.comctrls.TCustomTreeView.OnEdited"/>
      <element name="TTreeView.OnEditing" link="#lcl.comctrls.TCustomTreeView.OnEditing"/>
      <element name="TTreeView.OnEditingEnd" link="#lcl.comctrls.TCustomTreeView.OnEditingEnd"/>
      <element name="TTreeView.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TTreeView.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TTreeView.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TTreeView.OnExpanded" link="#lcl.comctrls.TCustomTreeView.OnExpanded"/>
      <element name="TTreeView.OnExpanding" link="#lcl.comctrls.TCustomTreeView.OnExpanding"/>
      <element name="TTreeView.OnGetImageIndex" link="#lcl.comctrls.TCustomTreeView.OnGetImageIndex"/>
      <element name="TTreeView.OnGetSelectedIndex" link="#lcl.comctrls.TCustomTreeView.OnGetSelectedIndex"/>
      <element name="TTreeView.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TTreeView.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TTreeView.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TTreeView.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TTreeView.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TTreeView.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TTreeView.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TTreeView.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TTreeView.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TTreeView.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TTreeView.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TTreeView.OnMouseWheelHorz" link="#LCL.Controls.TControl.OnMouseWheelHorz"/>
      <element name="TTreeView.OnMouseWheelLeft" link="#LCL.Controls.TControl.OnMouseWheelLeft"/>
      <element name="TTreeView.OnMouseWheelRight" link="#LCL.Controls.TControl.OnMouseWheelRight"/>
      <element name="TTreeView.OnNodeChanged" link="#lcl.comctrls.TCustomTreeView.OnNodeChanged"/>
      <element name="TTreeView.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TTreeView.OnSelectionChanged" link="#lcl.comctrls.TCustomTreeView.OnSelectionChanged"/>
      <element name="TTreeView.OnShowHint" link="#LCL.Controls.TControl.OnShowHint"/>
      <element name="TTreeView.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TTreeView.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TTreeView.Options" link="#lcl.comctrls.TCustomTreeView.Options"/>
      <element name="TTreeView.Items" link="#lcl.comctrls.TCustomTreeView.Items"/>
      <element name="TTreeView.TreeLineColor" link="#lcl.comctrls.TCustomTreeView.TreeLineColor"/>
      <element name="TTreeView.TreeLinePenStyle" link="#lcl.comctrls.TCustomTreeView.TreeLinePenStyle"/>

      <element name="TTVGetNodeText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTVGetNodeText.Result">
        <short/>
      </element>
      <element name="TTVGetNodeText.Node">
        <short/>
      </element>

      <element name="TTreeNodeExpandedState">
        <short>
          Class used to save and restore the expanded state of a TTreeView
        </short>
        <descr>
          <p>
            <var>TTreeNodeExpandedState</var> is a class used to save and restore the expanded state of a TTreeView. The nodes are identified by their Text property.
          </p>
          <p>Usage example:</p>
          <code>
            // save old expanded state
            OldExpanded := TTreeNodeExpandedState.Create(ATreeView);
            //   ... change a lot of nodes ...
            // restore old expanded state
            OldExpanded.Apply(ATreeView);
            OldExpanded.Free;
          </code>
        </descr>
        <seealso>
          <link id="TTreeView"/>
        </seealso>
      </element>

      <element name="TTreeNodeExpandedState.FOnGetNodeText"/>

      <element name="TTreeNodeExpandedState.DefaultGetNodeText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.DefaultGetNodeText.Result">
        <short/>
      </element>
      <element name="TTreeNodeExpandedState.DefaultGetNodeText.Node">
        <short/>
      </element>

      <element name="TTreeNodeExpandedState.NodeText">
        <short>
          <var>NodeText</var> - the text in the current node
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.Children">
        <short>
          <var>Children</var> - the children of the current node, as an AvgLvlTree
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.Create" link="#rtl.System.TObject.Create">
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.Create.FirstTreeNode">
        <short/>
      </element>
      <element name="TTreeNodeExpandedState.Create.GetNodeTextEvent">
        <short/>
      </element>
      <element name="TTreeNodeExpandedState.Create.TreeView">
        <short/>
      </element>

      <element name="TTreeNodeExpandedState.Destroy" link="#rtl.System.TObject.Destroy">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.Clear">
        <short>
          <var>Clear</var> the nodes from the tree structure
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TTreeNodeExpandedState.CreateChildNodes">
        <short>
          <var>CreateChildNodes</var> - constructor for the offspring nodes
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.CreateChildNodes.FirstTreeNode">
        <short/>
      </element>

      <element name="TTreeNodeExpandedState.Apply">
        <short>Used to restore the expanded state for a node or tree view</short>
        <descr>
          <p>
            <var>Apply</var> is an overloaded procedure used to restore the expanded state for nodes in a tree structure. The overloaded variants allow either a specific tree node or the first node in the tree view to be used to reconstruct the tree structure.
          </p>
          <p>
            <var>CollapseToo</var> indicates whether child tree nodes are collapsed (when <b>True</b>) or expanded.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TTreeNodeExpandedState.Apply.FirstTreeNode">
        <short>Initial tree node examined in the method</short>
      </element>
      <element name="TTreeNodeExpandedState.Apply.TreeView">
        <short>Tree view with nodes examined in the method</short>
      </element>
      <element name="TTreeNodeExpandedState.Apply.CollapseToo">
        <short>Collapses previously expanded child nodes when True</short>
      </element>

      <element name="TTreeNodeExpandedState.OnGetNodeText">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="THeaderSectionState">
        <short>
          <var>THeaderSectionState</var> - enumerated type containing possible selection states for THeaderSection
        </short>
      </element>
      <element name="THeaderSectionState.hsNormal">
        <short/>
      </element>
      <element name="THeaderSectionState.hsHot">
        <short/>
      </element>
      <element name="THeaderSectionState.hsPressed">
        <short/>
      </element>

      <element name="THeaderSection">
        <short>
          <var>THeaderSection</var> - the individual sections of a THeaderControl, each of which can be used to control its own option, selection etc
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="THeaderSection.FAlignment"/>
      <element name="THeaderSection.FImageIndex"/>
      <element name="THeaderSection.FMinWidth"/>
      <element name="THeaderSection.FMaxWidth"/>
      <element name="THeaderSection.FState"/>
      <element name="THeaderSection.FText"/>
      <element name="THeaderSection.FVisible"/>
      <element name="THeaderSection.FWidth"/>
      <element name="THeaderSection.FOriginalIndex"/>

      <element name="THeaderSection.GetWidth">
        <short>Gets the value for the Width property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.GetWidth.Result">
        <short/>
      </element>

      <element name="THeaderSection.GetLeft">
        <short>Gets the value for the Left property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.GetLeft.Result">
        <short/>
      </element>

      <element name="THeaderSection.GetRight">
        <short>Gets the value for the Right property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.GetRight.Result">
        <short/>
      </element>

      <element name="THeaderSection.SetAlignment">
        <short>Sets the value for the Alignment property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetAlignment.AValue">
        <short/>
      </element>

      <element name="THeaderSection.SetMaxWidth">
        <short>Sets the value for the MaxWidth property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetMaxWidth.AValue">
        <short/>
      </element>

      <element name="THeaderSection.SetMinWidth">
        <short>Sets the value for the MinWidth property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetMinWidth.AValue">
        <short/>
      </element>

      <element name="THeaderSection.SetState">
        <short>Sets the value for the State property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetState.AValue">
        <short/>
      </element>

      <element name="THeaderSection.SetText">
        <short>Sets the value for the Text property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetText.AValue">
        <short/>
      </element>

      <element name="THeaderSection.SetVisible">
        <short>Sets the value for the Visible property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetVisible.AValue">
        <short/>
      </element>

      <element name="THeaderSection.SetWidth">
        <short>Sets the value for the Width property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetWidth.Value">
        <short/>
      </element>

      <element name="THeaderSection.SetImageIndex">
        <short>Sets the value for the ImageIndex property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.SetImageIndex.Value">
        <short/>
      </element>

      <element name="THeaderSection.CheckConstraints">
        <short>
          Ensures that the width for the section is with its minimum and maximum values
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="THeaderSection.GetDisplayName" link="#RTL.Classes.TCollectionItem.DisplayName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSection.Result">
        <short/>
      </element>

      <element name="THeaderSection.Create">
        <short>
          <var>Create</var> - constructor for THeaderSection: calls inherited <var>Create</var> then initializes state, visibility, alignment, size and Index
        </short>
        <seealso>
          <link id="#rtl.classes.TCollectionItem.Create">TCollectionItem.Create</link>
        </seealso>
      </element>
      <element name="THeaderSection.Create.ACollection">
        <short/>
      </element>

      <element name="THeaderSection.Assign">
        <short>
          <var>Assign</var> - if <var>Source</var> is of correct type, copies properties directly, otherwise calls inherited <var>Assign</var> which probably raises an exception
        </short>
        <seealso>
          <link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
        </seealso>
      </element>
      <element name="THeaderSection.Assign.Source">
        <short> </short>
      </element>

      <element name="THeaderSection.Left">
        <short>The position of the left boundary of the section</short>
      </element>

      <element name="THeaderSection.Right">
        <short>The position of the right boundary of the section</short>
      </element>

      <element name="THeaderSection.State">
        <short>
          <var>State</var> - whether normal, hot (i.e. mouse hovers over it ready to be selected) or pressed (selected)
        </short>
      </element>

      <element name="THeaderSection.Alignment">
        <short>
          <var>Alignment</var> - whether text is to be left or right justified or centered
        </short>
      </element>

      <element name="THeaderSection.ImageIndex">
        <short>Index of the image in the imagelist</short>
      </element>

      <element name="THeaderSection.MaxWidth">
        <short>Maximum permissible width of a section</short>
      </element>

      <element name="THeaderSection.MinWidth">
        <short>Minimum permissible width of a section (default = 0)</short>
      </element>

      <element name="THeaderSection.Text">
        <short>The text string that is to appear in the section</short>
      </element>

      <element name="THeaderSection.Width">
        <short>
          The <var>Width </var>of the section that appears on the <var>THeaderControl</var>
        </short>
      </element>

      <element name="THeaderSection.Visible">
        <short>Indicates if the section is visible in the header control</short>
        <descr>
          <p>
            <var>Visible</var> is a <var>Boolean</var> property which indicates if the header section is visible in the header control. When set to <b>False</b>,  the section cannot be drawn using the TCustomHeaderControl.PaintSection method.
          </p>
          <p>
            The default value for the property is <b>True</b>, as set in the constructor for the class instance.
          </p>
        </descr>
      </element>

      <element name="THeaderSection.OriginalIndex">
        <short>
          <var>OriginalIndex</var> - index which doesn't change when the user reorders the sections
        </short>
      </element>

      <element name="THeaderSectionClass">
        <short>
          <var>THeaderSectionClass</var> - class of <var>THeaderSection</var>
        </short>
      </element>

      <element name="THeaderSections">
        <short>
          <var>THeaderSections</var> - a collection of <var>Items </var> to type <var>THeaderSection</var>, the individual parts of a <var>THeaderControl</var>
        </short>
      </element>

      <element name="THeaderSections.FHeaderControl"/>

      <element name="THeaderSections.GetItem">
        <short>Gets the value for the indexed Items property</short>
        <descr/>
        <seealso>
          <link id="THeaderSections.Items"/>
          <link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
        </seealso>
      </element>
      <element name="THeaderSections.GetItem.Result">
        <short>Value for the property</short>
      </element>
      <element name="THeaderSections.GetItem.Index">
        <short>Ordinal position in the collection for the requested item</short>
      </element>

      <element name="THeaderSections.SetItem">
        <short>Sets the value for the indexed Items property</short>
        <descr/>
        <seealso>
          <link id="THeaderSections.Items"/>
          <link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
        </seealso>
      </element>
      <element name="THeaderSections.SetItem.Index">
        <short>Ordinal position in the collection for the affected item</short>
      </element>
      <element name="THeaderSections.SetItem.Value">
        <short>New value for the property</short>
      </element>

      <element name="THeaderSections.GetOwner">
        <short>
          <var>GetOwner</var> returns a HeaderControl, overriding inherited value
        </short>
        <seealso>
          <link id="#rtl.classes.TPersistent.GetOwner">TPersistent.GetOwner</link>
        </seealso>
      </element>
      <element name="THeaderSections.GetOwner.Result">
        <short/>
      </element>

      <element name="THeaderSections.Update" link="#rtl.classes.TCollection.Update">
        <short>Performs actions needed when a collection item has been changed</short>
        <descr>
          <p>
            <var>Update</var> is an overridden method used to notify observers of a change to the specified item in the collection.
          </p>
          <remark>
            Update does <b>not</b> call the inherited method which notifies observers of the change.
          </remark>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection.Update">TCollection.Update</link>
        </seealso>
      </element>
      <element name="THeaderSections.Update.Item">
        <short>Item updated in the collection</short>
      </element>

      <element name="THeaderSections.Create" link="#RTL.Classes.TCollection.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSections.Create.HeaderControl">
        <short>Owner of the collection</short>
      </element>

      <element name="THeaderSections.Add" link="#rtl.Classes.TCollection.Add">
        <short>Creates a new header section and adds it to the collection</short>
        <descr>
          Adds calls the AddItem method to get the return value for the method.
        </descr>
        <seealso/>
      </element>
      <element name="THeaderSections.Add.Result">
        <short>Collection item created and stored in the method</short>
      </element>

      <element name="THeaderSections.AddItem">
        <short>
          <var>AddItem</var> - adds a HeaderSection to the Header at the position specified by <var>Index</var>
        </short>
      </element>
      <element name="THeaderSections.AddItem.Result">
        <short/>
      </element>
      <element name="THeaderSections.AddItem.Item">
        <short/>
      </element>
      <element name="THeaderSections.AddItem.Index">
        <short/>
      </element>

      <element name="THeaderSections.Insert" link="#rtl.Classes.TCollection.Insert">
        <short>Insert a new collection item at the specified position in the collection</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSections.Insert.Result">
        <short/>
      </element>
      <element name="THeaderSections.Insert.Index">
        <short/>
      </element>

      <element name="THeaderSections.Delete" link="#rtl.Classes.TCollection.Delete">
        <short>
          Deletes the collection item stored at the specified position in the collection
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="THeaderSections.Delete.Index">
        <short/>
      </element>

      <element name="THeaderSections.Items">
        <short>
          <var>Items</var> - the series of individual HeaderSections in the collection
        </short>
      </element>
      <element name="THeaderSections.Items.Index">
        <short/>
      </element>

      <element name="TSectionTrackState">
        <short>
          <var>TSectionTrackState</var> - enumerated type for tracking the state of a header section
        </short>
      </element>
      <element name="TSectionTrackState.tsTrackBegin">
        <short/>
      </element>
      <element name="TSectionTrackState.tsTrackMove">
        <short/>
      </element>
      <element name="TSectionTrackState.tsTrackEnd">
        <short/>
      </element>

      <element name="TCustomSectionTrackEvent">
        <short>
          <var>TCustomSectionTrackEvent</var> - generic event handling method for custom tracking a header section
        </short>
      </element>
      <element name="TCustomSectionTrackEvent.HeaderControl">
        <short> </short>
      </element>
      <element name="TCustomSectionTrackEvent.Section">
        <short> </short>
      </element>
      <element name="TCustomSectionTrackEvent.Width">
        <short> </short>
      </element>
      <element name="TCustomSectionTrackEvent.State">
        <short> </short>
      </element>

      <element name="TSectionDragEvent">
        <short>
          <var>TSectionDragEvent</var> - generic event handling method for dragging a header section
        </short>
      </element>
      <element name="TSectionDragEvent.Sender">
        <short/>
      </element>
      <element name="TSectionDragEvent.FromSection">
        <short/>
      </element>
      <element name="TSectionDragEvent.ToSection">
        <short/>
      </element>
      <element name="TSectionDragEvent.AllowDrag">
        <short/>
      </element>

      <element name="TCustomSectionNotifyEvent">
        <short>
          <var>TCustomSectionNotifyEvent</var> - generic event notification method for header section
        </short>
      </element>
      <element name="TCustomSectionNotifyEvent.HeaderControl">
        <short/>
      </element>
      <element name="TCustomSectionNotifyEvent.Section">
        <short/>
      </element>

      <element name="TCustomHCCreateSectionClassEvent">
        <short>
          <var>TCustomHCCreateSectionClassEvent</var> - generic event handler method for custom creation of header control
        </short>
      </element>
      <element name="TCustomHCCreateSectionClassEvent.Sender">
        <short/>
      </element>
      <element name="TCustomHCCreateSectionClassEvent.SectionClass">
        <short/>
      </element>

      <element name="TCustomHeaderControl">
        <short>
          <var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions
        </short>
        <descr>
          <p>
            <var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions.
          </p>
          <p>
            <var>THeaderControl</var> offers a widget that could be placed along the edge of a <var>Panel</var> or <var>Form</var> allowing a highly customized mechanism for selection. However there are no intrinsically associated display areas and it is the developer's responsibility to supply an index associated with the selection from the <var>THeaderControl</var> and determining what action is to occur or what is to be displayed in any attached Panel or Form.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.extctrls.Multi-PageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="TCustomHeaderControl.FDragReorder"/>
      <element name="TCustomHeaderControl.FSections"/>
      <element name="TCustomHeaderControl.FImages"/>
      <element name="TCustomHeaderControl.FImagesWidth"/>
      <element name="TCustomHeaderControl.FPaintRect"/>
      <element name="TCustomHeaderControl.FDown"/>
      <element name="TCustomHeaderControl.FDownPoint"/>
      <element name="TCustomHeaderControl.FTracking"/>
      <element name="TCustomHeaderControl.FDragging"/>
      <element name="TCustomHeaderControl.FEndDragSectionIndex"/>
      <element name="TCustomHeaderControl.FSelectedSection"/>
      <element name="TCustomHeaderControl.FMouseInControl"/>
      <element name="TCustomHeaderControl.FSavedCursor"/>
      <element name="TCustomHeaderControl.FOnSectionClick"/>
      <element name="TCustomHeaderControl.FOnSectionResize"/>
      <element name="TCustomHeaderControl.FOnSectionTrack"/>
      <element name="TCustomHeaderControl.FOnSectionSeparatorDblClick"/>
      <element name="TCustomHeaderControl.FOnSectionDrag"/>
      <element name="TCustomHeaderControl.FOnSectionEndDrag"/>
      <element name="TCustomHeaderControl.FOnCreateSectionClass"/>

      <element name="TCustomHeaderControl.GetSectionFromOriginalIndex">
        <short>Gets the value for the indexed SectionFromOriginalIndex property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.GetSectionFromOriginalIndex.Result">
        <short>value for the property</short>
      </element>
      <element name="TCustomHeaderControl.GetSectionFromOriginalIndex.OriginalIndex">
        <short>Original position (ignoring visibility) in the Sections property</short>
      </element>

      <element name="TCustomHeaderControl.SetImages">
        <short>Sets the value for the Images property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SetImages.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomHeaderControl.SetImagesWidth">
        <short>Sets the value for the ImagesWidth property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SetImagesWidth.AImagesWidth">
        <short>New value for the property</short>
      </element>

      <element name="TCustomHeaderControl.SetSections">
        <short>Sets the value for the Sections property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SetSections.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomHeaderControl.UpdateSection">
        <short>Updates the control by calling Repaint</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.UpdateSection.Index">
        <short/>
      </element>

      <element name="TCustomHeaderControl.UpdateSections">
        <short>Updates all Sections in the control by calling Repaint</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.CreateSection">
        <short>
          <var>CreateSection</var> - method for creating a header section
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.CreateSection.Result">
        <short/>
      </element>

      <element name="TCustomHeaderControl.CreateSections">
        <short>
          <var>CreateSections</var> - method for creating a collection of header sections
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.CreateSections.Result">
        <short/>
      </element>

      <element name="TCustomHeaderControl.Loaded" link="#LCL.Controls.TWinControl.Loaded"/>

      <element name="TCustomHeaderControl.Notification" link="#rtl.Classes.TComponent.Notification"/>

      <element name="TCustomHeaderControl.SectionClick">
        <short>
          <var>SectionClick</var> - method for emulating the <var>OnSectionClick</var> event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionClick.Section">
        <short/>
      </element>

      <element name="TCustomHeaderControl.SectionResize">
        <short>
          <var>SectionResize</var> - method for emulating the <var>OnSectionResize</var> event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionResize.Section">
        <short/>
      </element>

      <element name="TCustomHeaderControl.SectionTrack">
        <short>
          <var>SectionTrack</var> - method for emulating the <var>OnSectionTrack</var> event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionTrack.Section">
        <short/>
      </element>
      <element name="TCustomHeaderControl.SectionTrack.State">
        <short/>
      </element>

      <element name="TCustomHeaderControl.SectionSeparatorDblClick">
        <short>
          <var>SectionSeparatorDblClick</var> - method for emulating the <var>OnSectionSeparatorDblClick</var> event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionSeparatorDblClick.Section">
        <short/>
      </element>

      <element name="TCustomHeaderControl.SectionEndDrag">
        <short>
          <var>SectionEndDrag</var> - method for emulating the <var>OnSectionEndDrag</var> event
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.SectionDrag">
        <short>
          <var>SectionDrag</var> - method to emulate the <var>OnSectionDrag </var>event
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionDrag.Result">
        <short/>
      </element>
      <element name="TCustomHeaderControl.SectionDrag.FromSection">
        <short/>
      </element>
      <element name="TCustomHeaderControl.SectionDrag.ToSection">
        <short/>
      </element>

      <element name="TCustomHeaderControl.MouseEnter" link="#LCL.Controls.TControl.MouseEnter"/>
      <element name="TCustomHeaderControl.MouseLeave" link="#LCL.Controls.TControl.MouseLeave"/>
      <element name="TCustomHeaderControl.MouseDown" link="#LCL.Controls.TControl.MouseDown"/>
      <element name="TCustomHeaderControl.MouseMove" link="#LCL.Controls.TControl.MouseMove"/>
      <element name="TCustomHeaderControl.MouseUp" link="#LCL.Controls.TControl.MouseUp"/>

      <element name="TCustomHeaderControl.UpdateState">
        <short>
          <var>UpdateState</var> - bring the state of the control up-to-date
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults, overriding inherited values
        </short>
        <seealso>
          <link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomHeaderControl.DoAutoAdjustLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TCustomHeaderControl.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TCustomHeaderControl.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TCustomHeaderControl.SectionFromOriginalIndex">
        <short>
          <var>SectionFromOriginalIndex</var> - the section as defined by the original (unchanged) index
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.SectionFromOriginalIndex.OriginalIndex">
        <short/>
      </element>

      <element name="TCustomHeaderControl.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomHeaderControl:</var> calls inherited <var>Create</var>, creates the sections and initializes style and bounds
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
          <link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
        </seealso>
      </element>
      <element name="TCustomHeaderControl.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomHeaderControl.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomHeaderControl</var>: frees sections then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
          <link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomHeaderControl.Click" link="#LCL.Controls.TControl.Click"/>
      <element name="TCustomHeaderControl.DblClick" link="#LCL.Controls.TControl.DblClick"/>

      <element name="TCustomHeaderControl.GetSectionAt">
        <short>
          <var>GetSectionAt</var> - find the index for the section located at point P
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.GetSectionAt.Result">
        <short/>
      </element>
      <element name="TCustomHeaderControl.GetSectionAt.P">
        <short/>
      </element>

      <element name="TCustomHeaderControl.Paint" link="#LCL.Controls.TCustomControl.Paint"/>

      <element name="TCustomHeaderControl.PaintSection">
        <short>
          <var>PaintSection</var> - method for painting the current section (specified by Index) of the Header
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomHeaderControl.PaintSection.Index">
        <short/>
      </element>

      <element name="TCustomHeaderControl.ChangeScale" link="#LCL.Controls.TWinControl.ChangeScale"/>
      <element name="TCustomHeaderControl.ChangeScale.M">
        <short/>
      </element>
      <element name="TCustomHeaderControl.ChangeScale.D">
        <short/>
      </element>

      <element name="TCustomHeaderControl.DragReorder">
        <short>
          <var>DragReorder</var> - find out if the sections are allowed to be re-ordered by dragging
        </short>
      </element>

      <element name="TCustomHeaderControl.Images">
        <short>
          <var>Images</var> is the list of Images available for selection using this tool
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.ImagesWidth">
        <short>Specifies the width for Images displayed in the header control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomHeaderControl.Sections">
        <short>
          <var>Sections</var> - the short segments of the header separated by vertical bars that function as the elementary selection units of the header
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionDrag">
        <short>
          <var>OnSectionDrag</var> - event handler for dragging the section of header
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionEndDrag">
        <short>
          <var>OnSectionEndDrag</var> - event handler for ending the drag process for this section
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionClick">
        <short>
          <var>OnSectionClick</var> - event handler for mouse click on this section of header
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionResize">
        <short>
          <var>OnSectionResize</var> - event handler for re-sizing this section of the header
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionTrack">
        <short>
          <var>OnSectionTrack</var> - event handler for tracking this section
        </short>
      </element>

      <element name="TCustomHeaderControl.OnSectionSeparatorDblClick">
        <short>
          <var>OnSectionSeparatorDblClick</var> - event handler for double-click on the separator between sections
        </short>
      </element>

      <element name="TCustomHeaderControl.OnCreateSectionClass">
        <short>
          <var>OnCreateSectionClass</var> - event handler for creating a new section class
        </short>
      </element>

      <element name="THeaderControl">
        <short>
          <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions
        </short>
        <descr>
          <p>
            <var>THeaderControl</var>, a header strip of user-designed sections which allow selection of pages or actions.
          </p>
          <p>
            <var>THeaderControl</var> offers a widget that could be placed along the edge of a <var>Panel</var> or <var>Form</var> allowing a highly customized mechanism for selection. However there are no intrinsically associated display areas and it is the developer's responsibility to supply an index associated with the selection from the <var>THeaderControl</var> and determine what action is to occur or what is to be displayed in any attached Panel or Form.
          </p>
          <p>
            THeaderControl is used by selecting its icon from the Common Controls tab of the IDE Component Palette and placing it on the Form in the desired position. It may be convenient to dock it with a <var>Form</var> or <var>Panel</var> whose properties it is to be used for controlling.
          </p>
          <p>
            After size, position, docking, alignment, anchoring etc have been performed using the Object Inspector or Form Designer, the Sections of the Header can be created by selecting the control, right-clicking with the mouse and choosing 'Section Editor'. A Stringlist editor will pop up with options to add, delete or move entries up or down the list. Each entry is given an Index which can be used in OnClick event handlers to determine the action to be taken when that section is selected at run-time.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Using Multi-Page Controls</link>
        </seealso>
      </element>

      <element name="THeaderControl.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="THeaderControl.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="THeaderControl.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="THeaderControl.BorderWidth" link="#LCL.Controls.TWinControl.BorderWidth"/>
      <element name="THeaderControl.BorderSpacing" link="#LCL.Controls.TWinControl.BorderSpacing"/>
      <element name="THeaderControl.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="THeaderControl.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="THeaderControl.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="THeaderControl.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="THeaderControl.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="THeaderControl.Images" link="#lcl.comctrls.TCustomHeaderControl.Images"/>
      <element name="THeaderControl.ImagesWidth" link="#lcl.comctrls.TCustomHeaderControl.ImagesWidth"/>
      <element name="THeaderControl.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="THeaderControl.Sections" link="#LCL.ComCtrls.TCustomHeaderControl.Sections"/>
      <element name="THeaderControl.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="THeaderControl.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="THeaderControl.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="THeaderControl.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="THeaderControl.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="THeaderControl.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="THeaderControl.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="THeaderControl.OnCreateSectionClass" link="#LCL.ComCtrls.TCustomHeaderControl.OnCreateSectionClass"/>
      <element name="THeaderControl.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="THeaderControl.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="THeaderControl.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="THeaderControl.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="THeaderControl.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="THeaderControl.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="THeaderControl.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="THeaderControl.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="THeaderControl.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="THeaderControl.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="THeaderControl.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="THeaderControl.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="THeaderControl.OnMouseWheelHorz" link="#LCL.Controls.TControl.OnMouseWheelHorz"/>
      <element name="THeaderControl.OnMouseWheelLeft" link="#LCL.Controls.TControl.OnMouseWheelLeft"/>
      <element name="THeaderControl.OnMouseWheelRight" link="#LCL.Controls.TControl.OnMouseWheelRight"/>
      <element name="THeaderControl.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="THeaderControl.OnSectionClick" link="#LCL.ComCtrls.TCustomHeaderControl.OnSectionClick"/>
      <element name="THeaderControl.OnSectionResize" link="#LCL.ComCtrls.TCustomHeaderControl.OnSectionResize"/>
      <element name="THeaderControl.OnSectionTrack" link="#LCL.ComCtrls.TCustomHeaderControl.OnSectionTrack"/>

      <element name="TCN_First">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCN_SELCHANGE">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCN_SELCHANGING">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="CompareExpandedNodes">
        <short>Function to compare the node text in two nodes</short>
        <descr>
          <p>
            This function does an ANSICompare on the NodeText of two nodes. The parameters Data1 and Data2 are pointers to the nodes to be compared. The result is the same as the result from ANSICompareText. For example:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>
              The nodetext from the first node is lower than the nodetext from the second.
            </dd>
            <dt>0</dt>
            <dd>
              The nodetext valuess from both nodes are equal.
            </dd>
            <dt>1</dt>
            <dd>
              The nodetext from the first node is higher than the nodetext from the second.
            </dd>
          </dl>
        </descr>
      </element>
      <element name="CompareExpandedNodes.Result">
        <short/>
      </element>
      <element name="CompareExpandedNodes.Data1">
        <short/>
      </element>
      <element name="CompareExpandedNodes.Data2">
        <short/>
      </element>

      <element name="CompareTextWithExpandedNode">
        <short>
          Function to compare the given text with the nodetext of the specified node.
        </short>
        <descr>
          <p>
            This function does an ANSICompare on the NodeText of two nodes. The parameters Data1 and Data2 are pointers to the nodes to be compared. The result is the same as the result from ANSICompareText.
          </p>
          <dl>
            <dt>-1</dt>
            <dd>The given text is lower then the nodetext from the given node.</dd>
            <dt>0</dt>
            <dd>The given text is equal to the nodetext from the given node.</dd>
            <dt>1</dt>
            <dd>The given text is higher then the nodetext from the given node.</dd>
          </dl>
        </descr>
      </element>
      <element name="CompareTextWithExpandedNode.Result">
        <short/>
      </element>
      <element name="CompareTextWithExpandedNode.Key">
        <short/>
      </element>
      <element name="CompareTextWithExpandedNode.Data">
        <short/>
      </element>

      <element name="DbgS">
        <short>Generates a list of tab control options for display in the debugger</short>
        <descr>
          <p>
            <var>DbgS</var> is an overloaded <var>String</var> function used to generate string content displayed in the debugger for option values used in <var>TCustomTabControl</var>. DbgS generates a comma-delimited list of option values found in the specified argument using the string representations in <var>TabControlOptionStr</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="DbgS.Result">
        <short>String with the tab control option values displayed in the debugger</short>
      </element>
      <element name="DbgS.Opt">
        <short>LCL-compatible tab control options to examine in the routine</short>
      </element>

      <element name="Register">
        <short>Registers components in the Lazarus IDE</short>
        <descr>
          <p>
            Register is a procedure used to register components in the <file>comctrls.pp</file> unit in the Lazarus IDE. Register adds the following components:
          </p>
          <p><b>Common Controls Tab</b></p>
          <ul>
            <li>TTrackbar</li>
            <li>TProgressBar</li>
            <li>TTreeView</li>
            <li>TListView</li>
            <li>TStatusBar</li>
            <li>TToolBar</li>
            <li>TCoolBar</li>
            <li>TUpDown</li>
            <li>TPageControl</li>
            <li>TTabControl</li>
            <li>THeaderControl</li>
          </ul>
          <p>
            Register adds the following as components with no icon on the component palette:
          </p>
          <ul>
            <li>TToolButton</li>
            <li>TTabSheet</li>
          </ul>
        </descr>
        <seealso/>
      </element>

      <element name="RegisterCustomPage">
        <short>
          Calls WSRegisterCustomPage to register a custom page using the widgetset classes
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="RegisterCustomTabControl">
        <short>Registers TCustomTabControl and its widgetset class type when needed</short>
        <descr/>
        <seealso/>
      </element>

    </module>
    <!-- ComCtrls -->
  </package>
</fpdoc-descriptions>
